<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="_goodsManage">

    <sql id="searchWhere">
        <!-- 카테고리 -->
        <if test="q_goodsTyCd != null  and  q_goodsTyCd != ''">
            <choose>
                <when test="q_ctgryCd3 != null  and q_ctgryCd3 != ''">
                    AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd3})
                </when>
                <when test="q_ctgryCd2 != null  and q_ctgryCd2 != ''">
                    <!-- AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd2}) -->
                    AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I 
                                        WHERE CTGRY_CODE IN (SELECT CTGRY_CODE
                                                               FROM TST_CATE_MGMT_M
                                                             START WITH PARNTS_CTGRY_CODE = #{q_ctgryCd2}
                                                             CONNECT BY PRIOR CTGRY_CODE = PARNTS_CTGRY_CODE)
                                       UNION
                                       SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd2})
                </when>
                <when test="q_ctgryCd1 != null  and q_ctgryCd1 != ''">
                    <!-- AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd1}) -->
                    AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I 
                                        WHERE CTGRY_CODE IN (SELECT CTGRY_CODE
                                                               FROM TST_CATE_MGMT_M
                                                             START WITH PARNTS_CTGRY_CODE = #{q_ctgryCd1}
                                                             CONNECT BY PRIOR CTGRY_CODE = PARNTS_CTGRY_CODE)
                                       UNION
                                       SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd1})
                </when>
                <otherwise>
                    AND GOODS_CODE IN
                    ( SELECT  A.GOODS_CODE
                        FROM  TST_GOOD_CATE_I A, TST_CATE_MGMT_M B
                       WHERE  A.CTGRY_CODE = B.CTGRY_CODE
                         AND  B.CTGRY_CL_CD = #{q_goodsTyCd}
                    GROUP BY  A.GOODS_CODE )
                </otherwise>
            </choose>
        </if>
        <if test="q_goodsTyCd == null  or  q_goodsTyCd == ''">
                     AND GOODS_CODE IN
                     ( SELECT  A.GOODS_CODE
                         FROM  TST_GOOD_CATE_I A, TST_CATE_MGMT_M B
                        WHERE  A.CTGRY_CODE = B.CTGRY_CODE
                        <!--   AND  B.CTGRY_CL_CD IN (1001, 1002) -->
                     GROUP BY  A.GOODS_CODE )
        </if>

        <!-- 판매방식 -->
        <if test="q_sleMthdCd != null  and q_sleMthdCd != ''">
            AND SLE_MTHD_CD = #{q_sleMthdCd}
        </if>

        <!-- 서비스 언어 -->
        <if test="q_langCodes != null  and q_langCodes != ''">
            AND A.LANG_CODE IN
            <foreach collection="q_langCodes" item="item" index="index" separator="," open=" (" close=") ">
                    TRIM(#{item})
            </foreach>
        </if>

        <!-- 등록일 -->
        <if test='q_beginDate != null and q_beginDate != ""'>
            AND  NVL((SELECT EXMNT_CONFM_DT FROM TST_EXMN_CNFM_H
                        WHERE GOODS_CODE = A.GOODS_CODE AND
                        (CASE WHEN A.GOODS_REGIST_STTUS &gt;= 1006 THEN EXMNT_CONFM_CD IN (1006, 1007, 1009) ELSE EXMNT_CONFM_CD = A.GOODS_REGIST_STTUS END)
                        ORDER BY EXMNT_CONFM_DT DESC LIMIT 1), UPDT_DT)
            BETWEEN TO_DATE(#{q_beginDate}, 'YYYY-MM-DD') AND TO_DATE(#{q_endDate}, 'YYYY-MM-DD') + 1
        </if>

        <!-- 최초 승인일 -->
        <if test='q_beginDate2 != null and q_beginDate2 != ""'>
            AND  CONFM_DT
            BETWEEN TO_DATE(#{q_beginDate2}, 'YYYY-MM-DD') AND TO_DATE(#{q_endDate2}, 'YYYY-MM-DD') + 1
        </if>

        <!-- 전시 유무 -->
        <choose>
            <when test="q_goodsRegistSttus != null and q_goodsRegistSttus != ''">
            	<if test="q_goodsRegistSttus == 1007">
                	AND GOODS_REGIST_STTUS &gt;= 1007
                </if>
                <if test="q_goodsRegistSttus == 1006">
                	AND GOODS_REGIST_STTUS = #{q_goodsRegistSttus}
                </if>
            </when>
		</choose>
		<choose>
            <when test="q_registSttus != null and q_registSttus != ''">
                AND GOODS_REGIST_STTUS IN
                <foreach collection="q_registSttus" item="item" index="index" separator="," open=" (" close=") ">
                    TRIM(#{item})
                </foreach>
            </when>
            <otherwise>
                AND GOODS_REGIST_STTUS &gt;= 1006
            </otherwise>
        </choose>
        
		<if test="q_goodsSttusType != null and q_goodsSttusType != ''">
			 AND GOODS_REGIST_STTUS = #{q_goodsSttusType}
		</if>
        <!-- 인증구분 -->
        <if test="q_crtfc != null and q_crtfc != ''">
            AND GOODS_CODE IN
                ( SELECT  GOODS_CODE
                    FROM  TST_GOOD_MARK_I
                   WHERE  MARK_CD = #{q_crtfc}
                GROUP BY GOODS_CODE )
        </if>

        <!-- 상세 검색 -->
        <if test="q_searchKey != null  and q_searchKey != ''">
            <choose>
                <!-- 서비스명 -->
                <when test="q_searchKey == '1001'">
                    AND GOODS_NM LIKE  '%' || #{q_searchVal} || '%'
                </when>
                <!-- 스토어명 -->
                <when test="q_searchKey == '1002'">
                    AND A.USER_ID IN (SELECT USER_ID FROM TUM_SVC_STOR_I WHERE LANG_STORE_NM LIKE '%' || #{q_searchVal} || '%')
                </when>
                <!-- 판매자ID -->
                <when test="q_searchKey == '1003'">
                    AND A.USER_ID = #{q_searchVal}
                </when>
                <!-- 서비스코드 -->
                <when test="q_searchKey == '1004'">
                    AND A.GOODS_CODE = #{q_searchVal}
                </when>
            </choose>
        </if>
        		
	  	<if test="q_goodsMonitorUrlChk != null and q_goodsMonitorUrlChk != '' ">
	  			AND ifnull(A.GOODS_MONITOR_URL, '') != '' 
	  			AND GOODS_REGIST_STTUS = 1006

		<!--  20161205 나라장터 등록여부 검색조건추가 전체(''),등록('1001'),미등록('1002') -->	  
 	 	</if> 
		<if test="q_gtwobChk != null  and q_gtwobChk != ''">
             <choose>
                <when test="q_gtwobChk == '1001'">
                    AND  (GS_CRTFC_NO != '' OR GS_CRTFC_NO != NULL) 
                </when>
                <when test="q_gtwobChk == '1002'">
                    AND  (GS_CRTFC_NO = '' OR GS_CRTFC_NO = NULL)
                </when>
            </choose>
        </if>     

    </sql>

    <sql id="searchWhereDelete">
        <!-- 카테고리 -->
        <if test="q_goodsTyCd != null  and  q_goodsTyCd != ''">
            <choose>
                <when test="q_ctgryCd3 != null  and q_ctgryCd3 != ''">
                    AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd3})
                </when>
                <when test="q_ctgryCd2 != null  and q_ctgryCd2 != ''">
                    <!-- AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd2}) -->
                    AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I 
                                        WHERE CTGRY_CODE IN (SELECT CTGRY_CODE
                                                               FROM TST_CATE_MGMT_M
                                                             START WITH PARNTS_CTGRY_CODE = #{q_ctgryCd2}
                                                             CONNECT BY PRIOR CTGRY_CODE = PARNTS_CTGRY_CODE)
                                       UNION
                                       SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd2})
                </when>
                <when test="q_ctgryCd1 != null  and q_ctgryCd1 != ''">
                    <!-- AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd1}) -->
                    AND GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I 
                                        WHERE CTGRY_CODE IN (SELECT CTGRY_CODE
                                                               FROM TST_CATE_MGMT_M
                                                             START WITH PARNTS_CTGRY_CODE = #{q_ctgryCd1}
                                                             CONNECT BY PRIOR CTGRY_CODE = PARNTS_CTGRY_CODE)
                                       UNION
                                       SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd1})
                </when>
                <otherwise>
                    AND GOODS_CODE IN
                    ( SELECT  A.GOODS_CODE
                        FROM  TST_GOOD_CATE_I A, TST_CATE_MGMT_M B
                       WHERE  A.CTGRY_CODE = B.CTGRY_CODE
                         AND  B.CTGRY_CL_CD = #{q_goodsTyCd}
                    GROUP BY  A.GOODS_CODE )
                </otherwise>
            </choose>
        </if>

        <!-- 판매방식 -->
        <if test="q_sleMthdCd != null  and q_sleMthdCd != ''">
            AND SLE_MTHD_CD = #{q_sleMthdCd}
        </if>

        <!-- 서비스 언어 -->
        <if test="q_langCodes != null  and q_langCodes != ''">
            AND A.LANG_CODE IN
            <foreach collection="q_langCodes" item="item" index="index" separator="," open=" (" close=") ">
                    TRIM(#{item})
            </foreach>
        </if>

        <!-- 삭제일 -->
        <if test="q_beginDate != null and q_beginDate != ''">
            AND UPDT_DT BETWEEN TO_DATE(#{q_beginDate}, 'YYYY-MM-DD') AND TO_DATE(#{q_endDate}, 'YYYY-MM-DD') + 1
        </if>

        <!-- 인증구분 -->
        <if test="q_crtfc != null and q_crtfc != ''">
            AND GOODS_CODE IN
                ( SELECT  GOODS_CODE
                    FROM  TST_GOOD_MARK_I
                   WHERE  MARK_CD = #{q_crtfc}
                GROUP BY GOODS_CODE )
        </if>

        <!-- 상세 검색 -->
        <if test="q_searchKey != null  and q_searchKey != ''">
            <choose>
                <!-- 서비스명 -->
                <when test="q_searchKey == '1001'">
                    AND GOODS_NM LIKE  '%' || #{q_searchVal} || '%'
                </when>
                <!-- 스토어명 -->
                <when test="q_searchKey == '1002'">
                    AND A.USER_ID IN (SELECT USER_ID FROM TUM_SVC_STOR_I WHERE LANG_STORE_NM LIKE '%' || #{q_searchVal} || '%')
                </when>
                <!-- 판매자ID -->
                <when test="q_searchKey == '1003'">
                    AND A.USER_ID = #{q_searchVal}
                </when>
                <!-- 서비스코드 -->
                <when test="q_searchKey == '1004'">
                    AND A.GOODS_CODE = #{q_searchVal}
                </when>
            </choose>
        </if>
    </sql>

    <!-- 조달청등록서비스정보조회 --> 
    <sql id="searchPppWhere">
        <!-- 등록일 -->
        <if test='q_beginDate != null and q_beginDate != ""'>
	    AND  ITEM_ENTR_DATE
            BETWEEN TO_DATE(#{q_beginDate}, 'YYYY-MM-DD') AND TO_DATE(#{q_endDate}, 'YYYY-MM-DD') + 1
        </if>
        <!-- 규격명 -->
       <if test='q_itemName != null and q_itemName != ""'>
            AND ITEM_NAME LIKE  '%' || TRIM(#{q_itemName}) || '%'      
        </if>       
   </sql>
   

    <resultMap id="goodsResult" type="goodsVO">
        <result property="goodsCode" column="GOODS_CODE"/>
        <result property="langCode"  column="LANG_CODE"/>
        <collection property="goodsType"     column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsTyList"/>
        <collection property="goodsMarkList" column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsMarkImageList"/>
    </resultMap>
    
    <select id="goodsList" parameterType="map" resultMap="goodsResult">
    /* _goodsManage.goodsList */
       SELECT Y.* 
         FROM (SELECT  ROWNUM NUM
                     , X.*
                     , TO_CHAR(exmntConfmDate,'YYYY.MM.DD HH24:mi')													AS exmntConfmDt
                     , TO_CHAR(ADDDATE(exmntConfmDate, 7),'YYYY.MM.DD HH24:mi')							AS exmntLimitDt
                     , DATEDIFF(SYSDATETIME, ADDDATE(exmntConfmDate, 7))										AS exmntDay
                     , TO_CHAR(ADDDATE(exmntConfmDate, 3),'YYYY.MM.DD HH24:mi')							AS confmLimitDt
                     , DATEDIFF(SYSDATETIME, ADDDATE(exmntConfmDate, 3)) 										AS confmDay 
                 FROM  ( SELECT  A.GOODS_CODE
                               , A.LANG_CODE
                               , A.goods_knd_cd																							AS goodsKndCd
                               , DECODE(A.goods_knd_cd, '1001', 'Paas'
                                                      , '1002', 'Saas'
                                                      , '1003', 'Iaas'
                                                      , '1004', 'SCS') 											AS goodsKndNm
                               , DECODE(A.GOODS_KND_CD, 1001, 'SaaS'
                                                      , 1002, 'PaaS'
                                                      , 1003, 'IaaS'
                                                      , 1004, 'SCS') 												AS goodsKnd
                               , GOODS_NM AS goodsNm
                               , SVC_PC 																										AS goodsPc
                               , SVC_PC_UNT_CD 																							AS svcPcUntCd
                               , A.SVC_PC_VAT																								AS svcPcVat
                               , DECODE(NVL(A.SVC_PC_VAT, 'D')
                                        , 'Y', 'VAT포함'
                                        , 'N', '미포함'
                                        , 'D', '')																					AS svcPcVatNm
                               , (SELECT indvdlz_cd_nm 
                                    FROM OP_CODE_INDVDLZ 
                                   WHERE group_cd = '2085' 
                                     AND indvdlz_cd = A.SVC_PC_UNT_CD)  										AS svcPcUntCdNm
                               , DUE_STDR_MUMM																							AS dueStdrMumm
                               , (SELECT indvdlz_cd_nm 
                                    FROM op_code_indvdlz 
                                   WHERE group_cd = '2077' 
                                     AND indvdlz_cd = A.DUE_STDR_MUMM)											AS dueStdrMummNm
                               , (SELECT LANG_NM 
                                    FROM TCO_SVC_LANG_C 
                                   WHERE LANG_CODE = A.LANG_CODE) 													AS langNm
                               , (SELECT INDVDLZ_CD_NM 
                                    FROM OP_CODE_INDVDLZ 
                                   WHERE LANG_CODE = A.LANG_CODE 
                                     AND GROUP_CD = 1007 
                                     AND INDVDLZ_CD = A.SLE_MTHD_CD)												AS sleMthdNm
                               , A.GOODS_REGIST_STTUS 																			AS goodsRegistSttus
                               , (SELECT INDVDLZ_CD_NM 
                                    FROM OP_CODE_INDVDLZ 
                                   WHERE LANG_CODE = '00' 
                                     AND GROUP_CD = 1008 
                                     AND INDVDLZ_CD = A.GOODS_REGIST_STTUS)									AS goodsRegistSttusNm
                               , (SELECT LANG_STORE_NM 
                                    FROM TUM_SVC_STOR_I 
                                   WHERE USER_ID = A.USER_ID 
                                     AND LANG_CODE = A.LANG_CODE)														AS langStoreNm
                               , (SELECT DECODE(NATION_CODE, '410', '국내','해외') 
                                    FROM OP_USER 
                                   WHERE USER_ID = A.USER_ID)																AS nationGrp
                               , (SELECT (CASE WHEN USER_TY_CD = 1002 THEN '개인' 
                                               WHEN USER_TY_CD = 2002 THEN '기업' 
                                               WHEN USER_TY_CD = 3002 THEN '정부' 
                                          END)
                                    FROM OP_USER 
                                   WHERE USER_ID = A.USER_ID)																AS userTyGrp
                               , USER_ID 																										AS userId
                               , TO_CHAR(REGIST_DT,'YYYY.MM.DD HH24:mi')										AS registDt
                               , NVL((SELECT IFNULL(EXMNT_CONFM_DT ,REQU_DT) EXMNT_CONFM_DT 
                                        FROM TST_EXMN_CNFM_H 
                                       WHERE GOODS_CODE = A.GOODS_CODE 
                                         AND (CASE WHEN (A.GOODS_REGIST_STTUS &gt;= 1006 ) 
                                         						THEN EXMNT_CONFM_CD IN (1006, 1007,1009) 
                                              ELSE EXMNT_CONFM_CD = A.GOODS_REGIST_STTUS 
                                               END)
                                       ORDER BY EXMNT_CONFM_DT DESC LIMIT 1),UPDT_DT)				AS exmntConfmDate
                               , (SELECT COUNT(GOODS_CODE) 
                                    FROM TST_EXMN_CNFM_H 
                                   WHERE EXMNT_CONFM_CD IN (1006,1007) 
                                     AND GOODS_CODE = A.GOODS_CODE)													AS confmCnt
                               , TO_CHAR(A.CONFM_DT,'YYYY.MM.DD HH24:mi')										AS confmDt
                               , A.GOODS_MONITOR_URL AS goodsMonitorUrl
                               , (SELECT GOODS_CHNG_FILE 
                                    FROM TST_EXMN_CNFM_H 
                                   WHERE GOODS_CODE = A.GOODS_CODE 
                                     AND EXMNT_CONFM_CD = '1009' 
                                   ORDER BY EXMNT_CONFM_DT DESC LIMIT 1)										AS goodsChngSeq
                               , (SELECT EXMNT_CONFM_HIST_SN 
                                    FROM TST_EXMN_CNFM_H 
                                   WHERE GOODS_CODE = A.GOODS_CODE 
                                     AND EXMNT_CONFM_CD = '1009' 
                                   ORDER BY EXMNT_CONFM_DT DESC LIMIT 1)										AS exmntConfmHistSn
                               , TO_CHAR(NVL( A.UPDT_DT, A.REGIST_DT),'YYYY.MM.DD HH24:mi')	AS updtDt
		                   FROM  TST_GOOD_INFO_I A
		                  WHERE  MNGR_DELETE_AT='N' 
		                    AND  GOODS_ACTVTY_AT='Y'
		                    <include refid="searchWhere"/>
		                    <if test="q_registSttus != null and q_registSttus != ''">
		                    	ORDER BY exmntConfmDate DESC, REGIST_DT DESC
		                    </if>
		                    <if test="q_registSttus == null or q_registSttus == ''">
		                    	ORDER BY exmntConfmDate DESC NULLS LAST, REGIST_DT DESC
		                    </if>
             			) X
            	  WHERE ROWNUM &lt;= #{pagingEndNum}
        	    ) Y
          WHERE NUM &gt;= #{pagingStartNum}
    </select>
    <select id="goodsDeleteList" parameterType="map" resultMap="goodsResult">
    /*_goodsManage.goodsDeleteList*/
       SELECT Y.* FROM (
           SELECT ROWNUM NUM, X.* FROM (
               SELECT
                      A.GOODS_CODE,
                      A.LANG_CODE,
                      GOODS_NM AS goodsNm,
                      GOODS_PC AS goodsPc,
                      (SELECT LANG_NM FROM TCO_SVC_LANG_C WHERE LANG_CODE = A.LANG_CODE) AS langNm,
                      (SELECT INDVDLZ_CD_NM FROM OP_CODE_INDVDLZ WHERE LANG_CODE = A.LANG_CODE AND GROUP_CD=1007 AND INDVDLZ_CD = A.SLE_MTHD_CD) AS sleMthdNm,
                      (SELECT INDVDLZ_CD_NM FROM OP_CODE_INDVDLZ WHERE LANG_CODE = A.LANG_CODE AND GROUP_CD=1008 AND INDVDLZ_CD = A.GOODS_REGIST_STTUS) AS goodsRegistSttusNm,
                      (SELECT LANG_STORE_NM FROM TUM_SVC_STOR_I WHERE USER_ID = A.USER_ID AND LANG_CODE = A.LANG_CODE) AS langStoreNm,
                      MNGR_DELETE_AT AS mngrDeleteAt,
                      GOODS_ACTVTY_AT AS goodsActvtyAt,
                      (SELECT DECODE(NATION_CODE, '410', '국내','해외') FROM OP_USER WHERE USER_ID = A.USER_ID) AS nationGrp,
                      (SELECT (CASE WHEN USER_TY_CD = 1002 THEN '개인' WHEN USER_TY_CD = 2002 THEN '기업' WHEN USER_TY_CD = 3002 THEN '정부' END)
                         FROM OP_USER WHERE USER_ID = A.USER_ID) AS userTyGrp,
                      USER_ID AS userId,
                      TO_CHAR(UPDT_DT,'YYYY.MM.DD HH24:mm') AS updtDt,
                      TO_CHAR(A.CONFM_DT,'YYYY.MM.DD HH24:mm') AS confmDt
                 FROM TST_GOOD_INFO_I A
                WHERE ((MNGR_DELETE_AT='Y') OR (GOODS_ACTVTY_AT='N'))
                <include refid="searchWhereDelete"/>
              ORDER BY UPDT_DT DESC, REGIST_DT DESC
             ) X
            WHERE ROWNUM &lt;= #{pagingEndNum}
        ) Y
        WHERE NUM &gt;= #{pagingStartNum}
    </select>

    <select id="goodsTyList" resultType="map">
    /*_goodsManage.goodsTyList*/
        SELECT  (SELECT INDVDLZ_CD_NM
                   FROM OP_CODE_INDVDLZ
                  WHERE LANG_CODE = #{langCode} AND GROUP_CD = 1005 AND INDVDLZ_CD = B.CTGRY_CL_CD) AS GOODSTYNM
          FROM  TST_GOOD_CATE_I A, TST_CATE_MGMT_M B
         WHERE  A.GOODS_CODE = #{goodsCode}
           AND  A.CTGRY_CODE = B.CTGRY_CODE
           AND  B.LANG_CODE = #{langCode}
      GROUP BY  B.CTGRY_CL_CD
      ORDER BY  B.CTGRY_CL_CD
    </select>
    
    <select id="goodsMarkImageList" resultType="map">
    /*_goodsManage.goodsMarkImageList*/
          SELECT   B.MARK_IMAGE_FILE_SEQ AS MARKIMAGEFILESEQ
            FROM   TST_GOOD_MARK_I A, TST_GOOD_MARK_M B
           WHERE   A.MARK_CD = B.MARK_CD
             AND A.GOODS_CODE = #{goodsCode}
        ORDER BY   A.MARK_CD
    </select>

    <select id="goodsCount" parameterType="map" resultType="int">
    /*_goodsManage.goodsCount*/
        SELECT
            COUNT(A.GOODS_CODE) AS totalCount
        FROM
            TST_GOOD_INFO_I A
        WHERE MNGR_DELETE_AT='N' AND GOODS_ACTVTY_AT='Y'
        <include refid="searchWhere"/>
    </select>
 
    <select id="goodsDeleteCount" parameterType="map" resultType="int">
    /*_goodsManage.goodsDeleteCount*/
        SELECT
            COUNT(A.GOODS_CODE) AS totalCount
        FROM
            TST_GOOD_INFO_I A
        WHERE ((MNGR_DELETE_AT='Y') OR (GOODS_ACTVTY_AT='N'))
        <include refid="searchWhereDelete"/>
    </select>

    <update id="dspyUpdate" parameterType="goodsVO">
    /*_goodsManage.dspyUpdate*/
        UPDATE TST_GOOD_INFO_I SET
          GOODS_REGIST_STTUS = #{goodsRegistSttus}
        , UPDT_ID       = #{updtId}
        , UPDT_DT       = SYSDATETIME
        <!-- 20150820 즉시 승인 시 confm_dt 업데이트 시작 -->
        ,CONFM_DT       = (CASE WHEN CONFM_DT IS NULL AND 1007 IN (1006,1007) THEN SYSDATETIME ELSE CONFM_DT END)
        <!-- 20150820 즉시 승인 시 confm_dt 업데이트 끝 -->
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="goodsCodes != null">
                GOODS_CODE IN
                   <foreach item="item" index="index" collection="goodsCodes" open="(" separator="," close=")">#{item}</foreach>
            </if>
        </trim>
    </update>
    <update id="cfmItemContentUpdate" parameterType="goodsVO">
    /*_goodsManage.cfmItemContentUpdate*/
        UPDATE TST_GOOD_INFO_I_TMP
        SET CFM_ITEM_CONTENT = #{cfmItemContent}
		WHERE GOODS_CODE = #{goodsCode}
    </update>

    <update id="tstGoodInfoIUpdate" parameterType="goodsVO">
    /*_goodsManage.tstGoodInfoIUpdate*/
        UPDATE TST_GOOD_INFO_I
        SET GOODS_REGIST_STTUS = 1006
		WHERE GOODS_CODE = #{goodsCode}
    </update>
    
    <update id="tstGoodInfoITmpUpdate" parameterType="goodsVO">
    /*_goodsManage.tstGoodInfoITmpUpdate*/
        UPDATE TST_GOOD_INFO_I_TMP
        SET GOODS_STAT = 1005, GOODS_REGIST_STTUS = 1006
		WHERE GOODS_CODE = #{goodsCode}
    </update>

    <update id="tstExmnCnfmHStatUpdate" parameterType="goodsVO">
    /*_goodsManage.tstExmnCnfmHStatUpdate*/
        UPDATE TST_EXMN_CNFM_H
        SET requst_process_at = ''
		WHERE GOODS_CODE = #{goodsCode}
		and requst_process_at = 'N'
    </update>

	<update id="dspyPricUpdate" parameterType="goodsVO">
	/*_goodsManage.dspyPricUpdate*/
		 UPDATE TST_GOOD_INFO_I SET
		 	GOODS_PC = IFNULL((SELECT DECODE(IFNULL(GOODS_CHNG_PC,''),'',GOODS_BEFORE_PC, GOODS_CHNG_PC) FROM TST_EXMN_CNFM_H WHERE GOODS_CODE = #{goodsCode} AND EXMNT_CONFM_HIST_SN 	= #{exmntConfmHistSn} ),GOODS_PC )
		 WHERE GOODS_CODE = #{goodsCode}
	</update>

    <select id="langList" parameterType="goodsVO" resultType="goodsVO">
    /*_goodsManage.langList*/
         SELECT
                LANG_CODE AS langCode
              , LANG_NM    AS langNm
              , DOMAIN_CD  AS domainCd
              , LANG_ENG_ABRV AS  langEngAbrv
              , LANG_ENG_NM   AS  langEngNm
           FROM TCO_SVC_LANG_C
          WHERE DOMAIN_CD IS NOT NULL
    </select>

    <select id="ctgryList"  parameterType="goodsVO" resultType="goodsVO">
    /*_goodsManage.ctgryList*/
        SELECT
               PARNTS_CTGRY_CODE AS parntsCtgryCd
             , CTGRY_CODE AS ctgryCd
             , LANG_CTGRY_NM AS ctgryNm
          FROM TST_CATE_MGMT_M
         WHERE CTGRY_CL_CD = #{goodsTyCd}
           AND CTGRY_DP = #{ctgryDp}
           <if test="ctgryCd != null and ctgryCd != '' and ctgryCd != 'null'">
                AND PARNTS_CTGRY_CODE = #{ctgryCd}
           </if>
           AND CTGRY_USE_YN = 'Y'
           AND CTGRY_DELETE_AT = 'N'
         ORDER BY LANG_CODE, SORT_ORDR
    </select>

	<resultMap id="goodsViewResult" type="goodsVO">
		<result property="goodsCode" column="GOODS_CODE"/>
		<result property="userId"    column="USER_ID"/>
		<result property="langCode"  column="LANG_CODE"/>
		<collection property="goodsCtgry"          column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsCtgryList"/>
		<collection property="goodsMark"           column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsMarkList"/>
		<collection property="goodsStore"          column="{userId=USER_ID, langCode=LANG_CODE}" ofType="map" select="goodsStoreList"/>
		<collection property="goodsTag"            column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsTagList"/>
		<collection property="goodsMetaLang"       column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsMetaLangList"/>
		<collection property="goodsMetaOS"         column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsMetaOSList"/>
		<collection property="goodsMetaAS"         column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsMetaASList"/>
		<collection property="goodsMetaTECH"       column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsMetaTECHList"/>
		<collection property="goodsMetaTAG"        column="{goodsCode = GOODS_CODE, langCode = LANG_CODE}" ofType="map" select="goodsMetaTAGList"/>
		<collection property="exmntMgr"            column="{goodsCode = GOODS_CODE}" ofType="map" select="exmntMgrList"/>
		<collection property="confmMgr"            column="{goodsCode = GOODS_CODE}" ofType="map" select="confmMgrList"/>
		
		<collection property="goodsMetaExprn"      column="{goodsCode = GOODS_CODE, langCode=LANG_CODE}" ofType="map" select="goodsMetaExprnList"/>		 <!--무료/체험 -->
		<collection property="goodsMetaCntrctUnit" column="{goodsCode = GOODS_CODE, langCode=LANG_CODE}" ofType="map" select="goodsMetaCntrctUnitList"/> <!--계약단위 -->
		<collection property="goodsMetaSvc"        column="{goodsCode = GOODS_CODE, langCode=LANG_CODE}" ofType="map" select="goodsMetaSvcList"/>        <!--서비스관리 -->
		<collection property="goodsMetaCnstcMthd"  column="{goodsCode = GOODS_CODE, langCode=LANG_CODE}" ofType="map" select="goodsMetaCnstcMthdList"/>  <!--구축방식 -->
		<collection property="goodsMetaStd"        column="{goodsCode = GOODS_CODE, langCode=LANG_CODE}" ofType="map" select="goodsMetaStdList"/>        <!--호환성(표준) -->

	</resultMap>
    
    
	<select id="goodsView" parameterType="String" resultMap="goodsViewResult">
	
	/*_goodsManage.goodsView*/
		SELECT  A.LANG_CODE
		      , A.GOODS_CODE
		      , (SELECT LANG_NM 
		           FROM TCO_SVC_LANG_C 
		          WHERE LANG_CODE = A.LANG_CODE) 																								AS langNm
		      , A.GOODS_REGIST_STTUS 																														AS goodsRegistSttus
					, (SELECT INDVDLZ_CD_NM 
					     FROM OP_CODE_INDVDLZ 
					    WHERE LANG_CODE=A.LANG_CODE 
					      AND GROUP_CD=1008 
					      AND INDVDLZ_CD = A.GOODS_REGIST_STTUS)																			AS goodsRegistSttusNm
					, A.SLE_MTHD_CD																																		AS sleMthdCd
					, (SELECT INDVDLZ_CD_NM 
					     FROM OP_CODE_INDVDLZ 
					    WHERE LANG_CODE=A.LANG_CODE 
					      AND GROUP_CD=1007 
					      AND INDVDLZ_CD = A.SLE_MTHD_CD)																							AS sleMthdNm
					, A.GOODS_FILE_SEQ																																AS goodsFileSeq
					, A.DEMO_EXPRN_URL																																AS demoExprnUrl
					, A.GOODS_NM																																			AS goodsNm
					, A.GOODS_PC																																			AS goodsPc
					, A.GOODS_KND_CD																																	AS goodsKndCd
					, (SELECT INDVDLZ_CD_NM 
					     FROM OP_CODE_INDVDLZ 
					    WHERE LANG_CODE=A.LANG_CODE 
					      AND GROUP_CD=1024 
					      AND INDVDLZ_CD = A.GOODS_KND_CD)																						AS goodsKndNm
					, A.GOODS_LICENCE_CD																															AS goodsLicenceCd
					, A.GOODS_LICENCE_CN																															AS goodsLicenceCn
					, (SELECT INDVDLZ_CD_NM 
					     FROM OP_CODE_INDVDLZ 
					    WHERE LANG_CODE=A.LANG_CODE 
					      AND GROUP_CD=1015 
					      AND INDVDLZ_CD = A.GOODS_LICENCE_CD)																				AS goodsLicenceNm
					, A.ARCHTC_SE 																																		AS archtcSe
					, A.GOODS_VER_INFO 																																AS goodsVerInfo
					<!-- , TO_CHAR( TO_DATE(DECODE(A.COMOU_DE,'',null,A.COMOU_DE), 'YYYYMMDD'), 'YYYY. MM. DD')				AS comouDe -->
					, A.COMOU_DE			AS comouDe
					, A.GOODS_MAKR																																		AS goodsMakr
					, A.GOODS_DWLD_URL																																AS goodsDwldUrl
					, A.GOODS_IMAGE_FILE_SEQ																													AS goodsImageFileSeq
					, A.GOODS_MNL_FILE_SEQ																														AS goodsMnlFileSeq1
					, (SELECT COUNT(*) 
					     FROM TST_GOOD_SPEC_DESCRIBE_I 
					    WHERE GOODS_CODE = A.GOODS_CODE)																							AS goodsMnlFileSeq
					, (SELECT LANG_STORE_NM 
					     FROM TUM_SVC_STOR_I 
					    WHERE USER_ID = A.USER_ID 
					      AND LANG_CODE = A.LANG_CODE)																								AS langStoreNm
					, A.USER_ID
					, ( SELECT  CC.indvdlz_cd_nm	
					      FROM  op_code_indvdlz CC
					          , tst_good_spec_describe_i BB	
					     WHERE  1=1	
					       AND  CC.indvdlz_cd = BB.entrprs_Se	
					       AND  CC.group_cd = '2075'	
					       AND  BB.goods_code = A.goods_code	
					       AND  BB.goods_num = (SELECT MAX(goods_num) 
					                              FROM tst_good_spec_describe_i	
					                             WHERE goods_code = A.goods_code))										AS smlpzChk // 기업구분
             , (SELECT DECODE(NATION_CODE, '410', '국내','해외') 
                  FROM OP_USER 
                 WHERE USER_ID = A.USER_ID)																									AS nationGrp
             , (SELECT (CASE WHEN USER_TY_CD = 1002 THEN '개인' 
                             WHEN USER_TY_CD = 2002 THEN '기업' 
                             WHEN USER_TY_CD = 3002 THEN '정부' 
                         END)
                  FROM OP_USER WHERE USER_ID = A.USER_ID)																		AS userTyGrp
					, ( SELECT AO.svc_Charger_Nm
					      FROM TST_GOOD_SPEC_DESCRIBE_I AO
					     WHERE AO.goods_code = A.goods_code
					       AND AO.goods_num = (SELECT MAX(goods_num) 
					                             FROM tst_good_spec_describe_i 
					                            WHERE goods_code = A.goods_code) )										AS goodsChargerNm // 담당자
					, ( SELECT AP.svc_charger_telno 
					      FROM TST_GOOD_SPEC_DESCRIBE_I AP
					     WHERE AP.goods_code = A.goods_code
					       AND AP.goods_num = (SELECT MAX(goods_num) 
					                             FROM tst_good_spec_describe_i 
					                            WHERE goods_code = A.goods_code) ) 										AS goodsChargerCttpc // 담당자 전화번호
					, DECRYPT(( SELECT AU.svc_charger_email 
					              FROM TST_GOOD_SPEC_DESCRIBE_I AU
					             WHERE AU.goods_code = A.goods_code
					               AND AU.goods_num = (SELECT MAX(goods_num) 
					                                     FROM tst_good_spec_describe_i 
					                                    WHERE goods_code = A.goods_code)), 'P008')		AS goodsChargerEmail //이메일
					, DECRYPT(A.GOODS_CHARGER_MBTLNUM, 'P007') 																				AS goodsChargerMbtlnum
					, A.GOODS_HMPG_URL 																																AS goodsHmpgUrl
					, A.GOODS_SUMRY 																																	AS goodsSumry
					, A.GOODS_MAIN_FNCT 																															AS goodsMainFnct
					, A.CSTMR_INFO 																																		AS cstmrInfo
					, A.GOODS_REFER 																																	AS goodsRefer
					, A.SPCLTY_REALM 																																	AS spcltyRealm
					, A.CNSTNT_CO 																																		AS cnstntCo
					, A.CNSL_EXPC_EFFECT 																															AS cnslExpcEffect
					, TO_CHAR(A.REGIST_DT,'YYYY. MM. DD') 																						AS registDt
					, TO_CHAR(UPDT_DT,'YYYY. MM. DD') 																								AS updtDt
					, A.CNTC_INSTT_CD
					, (SELECT COUNT(GOODS_CODE) FROM TST_GOOD_ORDR_I WHERE GOODS_CODE = A.GOODS_CODE)	AS sellCnt
					, (SELECT COUNT(GOODS_CODE) FROM TST_GOOD_EVL_I WHERE GOODS_CODE = A.GOODS_CODE)	AS evlCnt
					, (SELECT COUNT(GOODS_CODE) FROM TST_GOOD_INQR_I WHERE GOODS_CODE = A.GOODS_CODE)	AS inqrCnt
					, A.ITEM_SFE 																																			AS itemSfe 				//특장점
					, A.ORGPLCE 																																			AS orgplce
					, A.ITEM_VOD_URL 																																	AS itemVodUrl 		//체험판 (기존데이타 사용으로 인해 컬럼명 매칭안됨)
					, A.ITEM_IMG_URL 																																	AS itemImgUrl
					, A.PRICE_DN_FILE_SEQ 																														AS priceDnFileSeq
					, A.MNL_DN_FILE_SEQ 																															AS mnlDnFileSeq 	//사용자 메뉴얼
					, A.GS_CRTFC_NO 																																	AS cntrctNo 			//계약번호 (종합쇼핑몰 연계를 위해 사용)
					, A.GTWOB_NUMBER 																																	AS gtwobNumber 		//물품일련번호 (종합쇼핑몰 연계를 위해 사용)
					, A.item_dn_file_seq 																															AS etcFileSeq
					, A.GOODS_MONITOR_URL																															AS goodsMonitorUrl <!-- {{ BH, 2016.01.13 가격표 파일 추가 -->
					, A.SERVICE_OFFER_METHOD 																													AS serviceOfferMethod
					, (SELECT INDVDLZ_CD_NM 
					     FROM OP_CODE_INDVDLZ 
					    WHERE LANG_CODE = A.LANG_CODE 
					      AND GROUP_CD=2034 
					      AND INDVDLZ_CD = A.SERVICE_OFFER_METHOD) 																		AS serviceOfferMethodNm
					, A.GTWOB_CHK																																			AS gtwobChk
					, B.GOODS_CHNG_FILE																																AS goodsChngSeq /*변경사유서*/
          , B.GOODS_CHNG_PC																																	AS goodsChngPc
          , B.EXMNT_CONFM_HIST_SN																														AS exmntConfmHistSn
          , DECODE(A.IS_MARK, '', 'N', NVL(A.IS_MARK, 'N'))																	AS isMark
			    , (SELECT INDVDLZ_CD_NM 
			         FROM OP_CODE_INDVDLZ 
			        WHERE LANG_CODE = A.LANG_CODE 
			          AND GROUP_CD=2076 
			          AND INDVDLZ_CD = A.GOODS_KND_CD)																						AS goodsTyNm
			    , (SELECT NVL(MAX(goods_num),  0) 
			         FROM tst_good_spec_describe_i 
			        WHERE goods_code = A.GOODS_CODE)																							AS specMaxNum /*규격서 체크*/
					, A.SVC_PC 																																				AS svcPc
					, A.SVC_PC_VAT																																		AS svcPcVat
					, A.SVC_PC_UNT_CD																																	AS svcPcUntCd
			    , (SELECT indvdlz_cd_nm 
			         FROM op_code_indvdlz 
			        WHERE 1=1 
			          AND indvdlz_cd = A.SVC_PC_UNT_CD 
			          AND group_cd = '2085') 																											AS svcPcUntCdNm
					, A.MUMM_CNTRCTPD																																	AS mummCntrctpd
					, DECODE(A.DUE_STDR_MUMM, '', NULL, A.DUE_STDR_MUMM)															AS dueStdrMumm
			    , (SELECT indvdlz_cd_nm 
			         FROM op_code_indvdlz 
			        WHERE 1=1 
			          AND indvdlz_cd = A.due_Stdr_Mumm 
			          AND group_cd = '2077')																											AS dueStdrMummNm
					, A.GOODS_EXPC_EFFECT																															AS goodsExpcEffect	//기대효과
      FROM  TST_GOOD_INFO_I A
      LEFT  JOIN (SELECT  MAX(EXMNT_CONFM_HIST_SN) 																					AS EXMNT_CONFM_HIST_SN
                        , GOODS_CODE 
                        , EXMNT_CONFM_CD
                        , GOODS_CHNG_FILE
                        , GOODS_CHNG_PC
			              FROM  TST_EXMN_CNFM_H 
					         GROUP  BY GOODS_CODE 
					              , EXMNT_CONFM_CD) B 
					    ON  B.GOODS_CODE = A.GOODS_CODE 
					   AND  EXMNT_CONFM_CD = '1009'
     WHERE  MNGR_DELETE_AT = 'N' 
       AND  GOODS_ACTVTY_AT = 'Y'
       AND  A.GOODS_CODE = #{goodsCode}
	</select>
    
  <select id="goodsView-AsIs" parameterType="String" resultMap="goodsViewResult">
  /*_goodsManage.goodsView-AsIs*/
       SELECT  A.LANG_CODE
             , (SELECT LANG_NM 
                  FROM TCO_SVC_LANG_C 
                 WHERE LANG_CODE = A.LANG_CODE) 												AS langNm
             , A.GOODS_REGIST_STTUS AS goodsRegistSttus
             , (SELECT INDVDLZ_CD_NM 
                  FROM OP_CODE_INDVDLZ 
                 WHERE LANG_CODE = A.LANG_CODE 
                   AND GROUP_CD=1008 
                   AND INDVDLZ_CD = A.GOODS_REGIST_STTUS)								AS goodsRegistSttusNm
             , A.SLE_MTHD_CD																						AS sleMthdCd
             , (SELECT INDVDLZ_CD_NM 
                  FROM OP_CODE_INDVDLZ 
                 WHERE LANG_CODE = A.LANG_CODE 
                   AND GROUP_CD=1007 
                   AND INDVDLZ_CD = A.SLE_MTHD_CD)											AS sleMthdNm
             , A.GOODS_FILE_SEQ																					AS goodsFileSeq
             , A.DEMO_EXPRN_URL																					AS demoExprnUrl
             , A.GOODS_CODE
             , A.GOODS_NM																								AS goodsNm
             , DECODE(A.GOODS_PC, '', '0', NVL(A.GOODS_PC, '0'))				AS goodsPc
             , A.GOODS_KND_CD																						AS goodsKndCd
             , (SELECT INDVDLZ_CD_NM 
                  FROM OP_CODE_INDVDLZ 
                 WHERE LANG_CODE = A.LANG_CODE 
                   AND GROUP_CD=1024 
                   AND INDVDLZ_CD = A.GOODS_KND_CD)											AS goodsKndNm
             , A.GOODS_LICENCE_CD																				AS goodsLicenceCd
             , A.GOODS_LICENCE_CN																				AS goodsLicenceCn
             , (SELECT INDVDLZ_CD_NM 
                  FROM OP_CODE_INDVDLZ 
                 WHERE LANG_CODE = A.LANG_CODE 
                   AND GROUP_CD=1015 
                   AND INDVDLZ_CD = A.GOODS_LICENCE_CD)									AS goodsLicenceNm
             , A.ARCHTC_SE																							AS archtcSe
             , A.GOODS_VER_INFO																					AS goodsVerInfo
             , A.COMOU_DE																								AS comouDe
             , A.GOODS_MAKR																							AS goodsMakr
             , DECODE(A.GOODS_DWLD_URL, '', NULL, A.GOODS_DWLD_URL)			AS goodsDwldUrl
             , A.GOODS_IMAGE_FILE_SEQ																		AS goodsImageFileSeq
             , A.GOODS_MNL_FILE_SEQ																			AS goodsMnlFileSeq	/*상품규격서*/
             , (SELECT LANG_STORE_NM 
                  FROM TUM_SVC_STOR_I 
                 WHERE USER_ID = A.USER_ID 
                   AND LANG_CODE = A.LANG_CODE)													AS langStoreNm
             , (SELECT DECODE(NATION_CODE, '410', '국내','해외') 
                  FROM OP_USER 
                 WHERE USER_ID = A.USER_ID) AS nationGrp
             , (SELECT (CASE WHEN USER_TY_CD = 1002 THEN '개인' 
                             WHEN USER_TY_CD = 2002 THEN '기업' 
                             WHEN USER_TY_CD = 3002 THEN '정부' 
                         END)
                  FROM OP_USER WHERE USER_ID = A.USER_ID)								AS userTyGrp
             , A.USER_ID
             , DECODE(A.GOODS_CHARGER_NM, '', NULL, A.GOODS_CHARGER_NM)	AS goodsChargerNm
             , DECRYPT(A.GOODS_CHARGER_EMAIL, 'P008')										AS goodsChargerEmail
             , A.GOODS_CHARGER_CTTPC																		AS goodsChargerCttpc
             , DECRYPT(A.GOODS_CHARGER_MBTLNUM, 'P007')									AS goodsChargerMbtlnum
             , A.GOODS_HMPG_URL																					AS goodsHmpgUrl
             , A.GOODS_SUMRY																						AS goodsSumry
             , A.GOODS_MAIN_FNCT																				AS goodsMainFnct
             , A.GOODS_REFER																						AS goodsRefer
             , A.SPCLTY_REALM																						AS spcltyRealm
             , A.CNSTNT_CO																							AS cnstntCo
             , A.CNSL_EXPC_EFFECT																				AS cnslExpcEffect
             , TO_CHAR(A.REGIST_DT,'YYYY.MM.DD HH24:mm')								AS registDt
             , A.ITEM_VOD_URL																						AS itemVodUrl     /*체험판 (기존데이타 사용으로 인해 컬럼명 매칭안됨)*/
             , A.SMLPZ_CHK																							AS smlpzChk       /*중소기업구분*/
             , A.ORGPLCE																								AS orgPlce        /*원산지*/
             , A.ITEM_SFE																								AS itemSfe  	     /*특장점*/
             , A.PRICE_DN_FILE_SEQ																			AS priceDnFileSeq /*가격표 파일 순번*/ 
             , A.MNL_DN_FILE_SEQ																				AS mnlDnFileSeq	 /*사용자 메뉴얼 파일 순번*/ 
             , A.ITEM_DN_FILE_SEQ																				AS etcFileSeq     /*기타 첨부파일 순번*/ 
             , A.CNTRCT_NO																							AS cntrctNo       /*나라장터 계약번호*/
             , A.GOODS_MONITOR_URL																			AS goodsMonitorUrl <!-- {{ BH, 2016.01.13 가격표 파일 추가 -->
             <!-- {{ DK, 2016.06.23 서비스제공방식 추가 -->
             , A.SERVICE_OFFER_METHOD																		AS serviceOfferMethod
             , (SELECT INDVDLZ_CD_NM 
                  FROM OP_CODE_INDVDLZ 
                 WHERE LANG_CODE = A.LANG_CODE
                   AND GROUP_CD=2034 
                   AND INDVDLZ_CD = A.SERVICE_OFFER_METHOD)							AS serviceOfferMethodNm
             <!-- }} -->    
     		 <!--  20161205 조달등록여부 항목추가 -->
             , A.GTWOB_CHK																							AS gtwobChk 
             , B.GOODS_CHNG_FILE																				AS goodsChngSeq /*변경사유서*/
             , B.GOODS_CHNG_PC																					AS goodsChngPc
             , B.EXMNT_CONFM_HIST_SN																		AS exmntConfmHistSn
             , DECODE(A.IS_MARK, '', 'N', NVL(A.IS_MARK, 'N'))					AS isMark
             , A.SVC_PC																									AS svcPc
             , A.SVC_PC_VAT																							AS svcPcVat 
             , A.SVC_PC_UNT_CD																					AS svcPcUntCd
             , A.MUMM_CNTRCTPD																					AS mummCntrctpd
             , DECODE(A.DUE_STDR_MUMM, '', NULL, A.DUE_STDR_MUMM)				AS dueStdrMumm 
             , A.CSTMR_INFO																							AS cstmrInfo				//대상고객
             , A.GOODS_EXPC_EFFECT																			AS goodsExpcEffect	//기대효과
         FROM  TST_GOOD_INFO_I A
         LEFT  JOIN (SELECT  MAX(EXMNT_CONFM_HIST_SN) 									AS EXMNT_CONFM_HIST_SN
                           , GOODS_CODE 
                           , EXMNT_CONFM_CD
                           , GOODS_CHNG_FILE
                           , GOODS_CHNG_PC
					             FROM  TST_EXMN_CNFM_H 
					            GROUP  BY GOODS_CODE 
					                 , EXMNT_CONFM_CD) B 
					       ON  B.GOODS_CODE = A.GOODS_CODE 
					      AND  EXMNT_CONFM_CD = '1009'
        WHERE  A.MNGR_DELETE_AT='N' 
          AND  A.GOODS_ACTVTY_AT='Y'
          AND  A.GOODS_CODE = #{goodsCode}
    </select>
	<!--
     * SQL 명      : _goodsManage.goodsMetaExprnList
     * 기능(설명)  : 무료/체험 구분 조회
     * 작   성   자  : (주)엔키소프트
     * 작   성   일  : 2016-01-19
    -->
    <select id="goodsMetaExprnList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaExprnList*/
        SELECT  A.GOODS_CODE
              , A.LANG_CD
              , A.INDVDLZ_CD
              , A.META_ETC_CN
              , B.INDVDLZ_CD_NM
          FROM  TST_GOOD_META_I A
              , OP_CODE_INDVDLZ B
         WHERE  A.GROUP_CD   = B.GROUP_CD 
           AND  A.INDVDLZ_CD = B.INDVDLZ_CD 
           AND  A.LANG_CD    = B.LANG_CODE
           AND  A.GOODS_CODE = #{goodsCode}
           AND  A.GROUP_CD   = 2027
           AND  B.LANG_CODE  = #{langCode}
           AND  B.USE_YN     = 'Y' 
    </select>
	<!--
     * SQL 명      : _goodsManage.goodsMetaCntrctUnitList
     * 기능(설명)  : 계약단위 조회
     * 작   성   자  : (주)엔키소프트
     * 작   성   일  : 2016-01-19
    -->
    <select id="goodsMetaCntrctUnitList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaCntrctUnitList*/
        SELECT  A.GOODS_CODE, A.LANG_CD, A.INDVDLZ_CD, A.META_ETC_CN,
                B.INDVDLZ_CD_NM
          FROM  TST_GOOD_META_I A, OP_CODE_INDVDLZ B
          WHERE A.GROUP_CD = B.GROUP_CD AND A.INDVDLZ_CD = B.INDVDLZ_CD AND A.LANG_CD = B.LANG_CODE
            AND A.GOODS_CODE = #{goodsCode}
            AND A.GROUP_CD = 2028
            AND B.LANG_CODE = #{langCode}
            AND B.USE_YN = 'Y' 
    </select>
	<!--
     * SQL 명      : _goodsManage.goodsMetaSvcList
     * 기능(설명)  : 서비스관리 조회
     * 작   성   자  : (주)엔키소프트
     * 작   성   일  : 2016-01-19
    -->
    <select id="goodsMetaSvcList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaSvcList*/
        SELECT  A.GOODS_CODE, A.LANG_CD, A.INDVDLZ_CD, A.META_ETC_CN,
                B.INDVDLZ_CD_NM
          FROM  TST_GOOD_META_I A, OP_CODE_INDVDLZ B
          WHERE A.GROUP_CD = B.GROUP_CD AND A.INDVDLZ_CD = B.INDVDLZ_CD AND A.LANG_CD = B.LANG_CODE
            AND A.GOODS_CODE = #{goodsCode}
            AND A.GROUP_CD = 2030
            AND B.LANG_CODE = #{langCode}
            AND B.USE_YN = 'Y' 
    </select>
	<!--
     * SQL 명      : _goodsManage.goodsMetaCnstcMthdList
     * 기능(설명)  : 구축방식 조회
     * 작   성   자  : (주)엔키소프트
     * 작   성   일  : 2016-01-19
    -->
    <select id="goodsMetaCnstcMthdList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaCnstcMthdList*/
        SELECT  A.GOODS_CODE, A.LANG_CD, A.INDVDLZ_CD, A.META_ETC_CN,
                B.INDVDLZ_CD_NM
          FROM  TST_GOOD_META_I A, OP_CODE_INDVDLZ B
          WHERE A.GROUP_CD = B.GROUP_CD AND A.INDVDLZ_CD = B.INDVDLZ_CD AND A.LANG_CD = B.LANG_CODE
            AND A.GOODS_CODE = #{goodsCode}
            AND A.GROUP_CD = 2032
            AND B.LANG_CODE = #{langCode}
            AND B.USE_YN = 'Y' 
    </select>
	<!--
     * SQL 명      : _goodsManage.goodsMetaStdList
     * 기능(설명)  : 호환성(표준) 조회
     * 작   성   자  : (주)엔키소프트
     * 작   성   일  : 2016-01-19
    -->
    <select id="goodsMetaStdList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaStdList*/
        SELECT  A.GOODS_CODE, A.LANG_CD, A.INDVDLZ_CD, A.META_ETC_CN,
                B.INDVDLZ_CD_NM
          FROM  TST_GOOD_META_I A, OP_CODE_INDVDLZ B
          WHERE A.GROUP_CD = B.GROUP_CD AND A.INDVDLZ_CD = B.INDVDLZ_CD AND A.LANG_CD = B.LANG_CODE
            AND A.GOODS_CODE = #{goodsCode}
            AND A.GROUP_CD = 2031
            AND B.LANG_CODE = #{langCode}
            AND B.USE_YN = 'Y' 
    </select>
    
	<!--
     * SQL 명      : _goodsManage.goodsCtgryList
     * 기능(설명)  : 카테고리 조회
     * 작   성   자  : (주)엔키소프트
     * 작   성   일  : 2016-01-19
    -->
    <select id="goodsCtgryList" resultType="map">
    /*_goodsManage.goodsCtgryList*/
        SELECT
                A.CTGRY_CODE    AS CTGRYCODE,
                (SELECT SYS_CONNECT_BY_PATH(C.ctgry_code, ' > ')
                   FROM TST_CATE_MGMT_M C
                  WHERE C.CTGRY_CODE = A.CTGRY_CODE
             START WITH C.PARNTS_CTGRY_CODE = '0'
       CONNECT BY PRIOR C.CTGRY_CODE = C.PARNTS_CTGRY_CODE  )    AS CTGRYPATH_CODE,
       			  B.CTGRY_CL_CD		AS CTGRYCLCD,
                (SELECT INDVDLZ_CD_NM
                   FROM OP_CODE_INDVDLZ
                  WHERE LANG_CODE = #{langCode}
                    AND GROUP_CD = 1005
                    AND INDVDLZ_CD = B.CTGRY_CL_CD)    AS CTGRYCLNM,
                (SELECT SYS_CONNECT_BY_PATH(C.LANG_CTGRY_NM, ' > ')
                   FROM TST_CATE_MGMT_M C
                  WHERE C.CTGRY_CODE = A.CTGRY_CODE
             START WITH C.PARNTS_CTGRY_CODE = '0'
       CONNECT BY PRIOR C.CTGRY_CODE = C.PARNTS_CTGRY_CODE  )    AS CTGRYPATH
          FROM TST_GOOD_CATE_I A, TST_CATE_MGMT_M B
         WHERE A.CTGRY_CODE = B.CTGRY_CODE
           AND B.CTGRY_DELETE_AT = 'N'
           AND A.GOODS_CODE = #{goodsCode}
    </select>

    <!--     인증구분     -->
    <select id="goodsMarkList" resultType="map">
    /*_goodsManage.goodsMarkList*/
        SELECT B.INDVDLZ_CD AS MARKCD,
               B.INDVDLZ_CD_NM AS MARKNM,
               A.MARK_CD AS GOODSMARKCD,
               (SELECT MARK_IMAGE_FILE_SEQ FROM TST_GOOD_MARK_M WHERE MARK_CD = A.MARK_CD) AS MARKIMAGEFILESEQ,
               C.CRTFC_SE_FILE_SEQ AS CRTFCSEFILESEQ
          FROM OP_CODE_INDVDLZ B LEFT OUTER JOIN TST_GOOD_MARK_I A
            ON A.MARK_CD = B.INDVDLZ_CD AND A.GOODS_CODE = #{goodsCode}
               LEFT OUTER JOIN TST_CTFC_ATCH_I C
            ON B.INDVDLZ_CD = C.CRTFC_SE_CD AND C.GOODS_CODE = #{goodsCode}
         WHERE B.LANG_CODE = #{langCode}
           AND B.GROUP_CD = 1011
           AND B.USE_YN = 'Y'
        ORDER BY B.CD_SORT_NO
    </select>
    
    <!--     판매자 정보     -->
    <select id="goodsStoreList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsStoreList*/
       SELECT ( CASE WHEN A.USER_TY_CD=1002 THEN (SELECT CMPNY_NM FROM OP_USER_OPTION WHERE USER_ID=A.USER_ID)
                     WHEN A.USER_TY_CD=2002 THEN (SELECT CMPNY_NM FROM OP_USER_ENTRPRS_OPTION WHERE USER_ID=A.USER_ID)
                 END) AS CMPNYNM
             , B.STORE_IMAGE_FILE_SEQ AS STOREIMAGEFILESEQ
             , B.LANG_STORE_NM AS LANGSTORENM
             , B.LANG_STORE_INTRCN AS LANGSTOREINTRCN
             , B.STORE_CHARGER_NM AS STORECHARGERNM
             , decrypt(B.REPRSNT_EMAIL, 'P008') AS REPRSNTEMAIL
             , B.REPRSNT_TELNO AS REPRSNTTELNO
             , A.USER_ID AS USERID
             , decrypt(A.MBTLNUM, 'P007') AS MBTLNUM
         FROM  OP_USER A
             , TUM_SVC_STOR_I B
        WHERE  A.USER_ID   = B.USER_ID
           AND B.LANG_CODE = #{langCode}
           AND A.USER_ID = #{userId}
<!--           
        SELECT
               (CASE WHEN A.USER_TY_CD=1002 THEN (SELECT CMPNY_NM FROM OP_USER_OPTION WHERE USER_ID=A.USER_ID) 
                     WHEN USER_TY_CD=2002   THEN (SELECT CMPNY_NM FROM OP_USER_ENTRPRS_OPTION WHERE USER_ID=A.USER_ID)
                END) AS CMPNYNM,
               B.LANG_STORE_NM AS LANGSTORENM,
               B.STORE_CHARGER_NM AS STORECHARGERNM,
               DECRYPT(B.REPRSNT_EMAIL, 'P008') AS REPRSNTEMAIL,
               B.REPRSNT_TELNO AS REPRSNTTELNO
             FROM OP_USER A, TUM_SVC_STOR_I B
         WHERE A.USER_ID = B.USER_ID
           AND B.LANG_CODE = #{langCode}
           AND A.USER_ID = #{userId}
 -->           
    </select>
    <!--     태그    -->
    <select id="goodsTagList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsTagList*/
        SELECT GOODS_TAG_NM AS GOODSTAGNM FROM TST_GOOD_TAG_I
        WHERE GOODS_CODE = #{goodsCode}
    </select>

    <select id="goodsMetaLangCode" parameterType="goodsVO" resultType="goodsVO">
    /*_goodsManage.goodsMetaLangCode*/
        SELECT  INDVDLZ_CD AS metaLangCd, INDVDLZ_CD_NM AS metaLangNm
          FROM  OP_CODE_INDVDLZ
         WHERE  LANG_CODE = #{langCode}
           AND  GROUP_CD = 1019
           AND  USE_YN = 'Y'
      ORDER BY  CD_SORT_NO
    </select>

    <select id="goodsMetaLangList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaLangList*/
        SELECT  B.INDVDLZ_CD AS LANGCD,
                B.INDVDLZ_CD_NM AS LANGNM,
                A.INDVDLZ_CD AS METALANGCD,
                A.META_ETC_CN AS METAETCCN
          FROM  OP_CODE_INDVDLZ B LEFT OUTER JOIN TST_GOOD_META_I A
            ON  A.GROUP_CD = B.GROUP_CD AND A.INDVDLZ_CD = B.INDVDLZ_CD AND A.LANG_CD = B.LANG_CODE AND A.GOODS_CODE = #{goodsCode}
         WHERE  B.LANG_CODE = #{langCode}
           AND  B.GROUP_CD = 1019
           AND  B.USE_YN = 'Y'
      ORDER BY  B.CD_SORT_NO
    </select>

    <select id="goodsMetaOSList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaOSList*/
        SELECT  A.GOODS_CODE, A.LANG_CD, A.INDVDLZ_CD, A.META_ETC_CN,
                B.INDVDLZ_CD_NM
          FROM  TST_GOOD_META_I A, OP_CODE_INDVDLZ B
          WHERE A.GROUP_CD = B.GROUP_CD AND A.INDVDLZ_CD = B.INDVDLZ_CD AND A.LANG_CD = B.LANG_CODE
            AND A.GOODS_CODE = #{goodsCode}
            AND A.GROUP_CD = 1020
            AND B.LANG_CODE = #{langCode}
            AND B.USE_YN = 'Y'
    </select>
    <select id="goodsMetaASList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaASList*/
        SELECT  A.GOODS_CODE, A.LANG_CD, A.INDVDLZ_CD, A.META_ETC_CN,
                B.INDVDLZ_CD_NM
          FROM  TST_GOOD_META_I A, OP_CODE_INDVDLZ B
          WHERE A.GROUP_CD = B.GROUP_CD AND A.INDVDLZ_CD = B.INDVDLZ_CD AND A.LANG_CD = B.LANG_CODE
            AND A.GOODS_CODE = #{goodsCode}
            AND A.GROUP_CD = 1021
            AND B.LANG_CODE = #{langCode}
            AND B.USE_YN = 'Y'
    </select>
    <select id="goodsMetaTECHList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaTECHList*/
        SELECT  A.GOODS_CODE, A.LANG_CD, A.INDVDLZ_CD, A.META_ETC_CN,
                B.INDVDLZ_CD_NM
          FROM  TST_GOOD_META_I A, OP_CODE_INDVDLZ B
          WHERE A.GROUP_CD = B.GROUP_CD AND A.INDVDLZ_CD = B.INDVDLZ_CD AND A.LANG_CD = B.LANG_CODE
            AND A.GOODS_CODE = #{goodsCode}
            AND A.GROUP_CD = 1022
            AND B.LANG_CODE = #{langCode}
            AND B.USE_YN = 'Y'
    </select>
    <select id="goodsMetaTAGList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.goodsMetaTAGList*/
        SELECT  A.GOODS_CODE, A.LANG_CD, A.INDVDLZ_CD, A.META_ETC_CN,
                B.INDVDLZ_CD_NM
          FROM  TST_GOOD_META_I A, OP_CODE_INDVDLZ B
          WHERE A.GROUP_CD = B.GROUP_CD AND A.INDVDLZ_CD = B.INDVDLZ_CD AND A.LANG_CD = B.LANG_CODE
            AND A.GOODS_CODE = #{goodsCode}
            AND A.GROUP_CD = 1023
            AND B.LANG_CODE = #{langCode}
            AND B.USE_YN = 'Y'
    </select>
    <select id="exmntMgrList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.exmntMgrList*/
        SELECT A.MNGR_ID, (SELECT MNGR_NM FROM OP_MNGR WHERE MNGR_ID = A.MNGR_ID) AS MNGR_NM
          FROM TST_EXMN_CNFM_H A
         WHERE A.GOODS_CODE = #{goodsCode} AND A.EXMNT_CONFM_CD = 1004
         ORDER BY A.EXMNT_CONFM_DT DESC LIMIT 1
    </select>
    <select id="confmMgrList" parameterType="java.util.Map" resultType="map">
    /*_goodsManage.confmMgrList*/
        SELECT A.MNGR_ID, (SELECT MNGR_NM FROM OP_MNGR WHERE MNGR_ID = A.MNGR_ID) AS MNGR_NM
          FROM TST_EXMN_CNFM_H A
         WHERE A.GOODS_CODE = #{goodsCode} AND A.EXMNT_CONFM_CD IN (1006 , 1007 )
           AND A.EXMNT_CONFM_DT &gt;
               NVL((SELECT EXMNT_CONFM_DT FROM TST_EXMN_CNFM_H WHERE GOODS_CODE = A.GOODS_CODE AND EXMNT_CONFM_CD = 1004 ORDER BY EXMNT_CONFM_DT DESC LIMIT 1),
               TO_DATE('19000101','YYYYMMDD'))
         ORDER BY A.EXMNT_CONFM_DT LIMIT 1
    </select>

    <select id="ctgrySelect"  parameterType="goodsVO" resultType="goodsVO">
    /*_goodsManage.ctgrySelect*/
        SELECT A.CTGRY_CODE  AS ctgryCode,
                (SELECT INDVDLZ_CD_NM
                   FROM OP_CODE_INDVDLZ
                  WHERE LANG_CODE = A.LANG_CODE
                    AND GROUP_CD = 1005
                    AND INDVDLZ_CD = A.CTGRY_CL_CD) AS ctgryClNm,
                (SELECT SYS_CONNECT_BY_PATH(B.LANG_CTGRY_NM, ' > ')
                   FROM TST_CATE_MGMT_M B
                  WHERE B.CTGRY_CODE = A.CTGRY_CODE
             START WITH B.PARNTS_CTGRY_CODE = '0'
       CONNECT BY PRIOR B.CTGRY_CODE = B.PARNTS_CTGRY_CODE  ) AS ctgryPath
          FROM TST_CATE_MGMT_M A
         WHERE A.CTGRY_DELETE_AT = 'N'
           <if test="ctgryCodes != null">
           AND A.CTGRY_CODE IN
               <foreach item="item" index="index" collection="ctgryCodes" open="(" separator="," close=")">#{item}</foreach>
           </if>
    </select>

	<!--
     * SQL 명      : _goodsManage.goodsUpdate
     * 기능(설명)  : 서비스 수정 처리
     * 작   성   자  : (주)엔키소프트
     * 작   성   일  : 2016-01-19
    -->
    <update id="goodsUpdate" parameterType="goodsVO">
    /*_goodsManage.goodsUpdate*/
    	UPDATE  TST_GOOD_INFO_I 
    	   SET  GOODS_KND_CD          = #{goodsKndCd}						//dataForm1
    	   	<if test="formNm eq 'dataForm1'">
     	      , GOODS_NM 		          = #{goodsNm}							//서비스명
     	      , DUE_STDR_MUMM         = #{dueStdrMumm}					//과금 기준(최소)
    	      , GOODS_DWLD_URL        = TRIM(#{goodsDwldUrl})		//dataForm1
    	      , DEMO_EXPRN_URL        = TRIM(#{demoExprnUrl})		//dataForm1
    	      , GOODS_IMAGE_FILE_SEQ  = #{goodsImageFileSeq}		//dataForm1
    	      , GOODS_REGIST_STTUS    = #{goodsRegistSttus}
    	      , CONFM_DT              = (CASE WHEN CONFM_DT IS NULL AND #{goodsRegistSttus} IN (1006,1007) THEN SYSDATETIME ELSE CONFM_DT END)
    	      , ITEM_VOD_URL          = #{itemVodUrl}      		//체험동영상URL*/
    	      , GOODS_MONITOR_URL 	  = #{goodsMonitorUrl}  	//모니터링 URL*/
					  , SVC_PC_UNT_CD         = #{svcPcUntCd}					//통화기준
					  , SVC_PC                = #{svcPc}							//서비스 가격
					  , SVC_PC_VAT            = #{svcPcVat} 					//VAT 포함
					  , MUMM_CNTRCTPD		  		= #{mummCntrctpd}				//최소 계약기간
					</if>
					<if test="formNm eq 'dataForm2'">
						, GOODS_SUMRY           = #{goodsSumry}					//서비스개요
						, ITEM_SFE              = #{itemSfe}         		//특장점
						, CSTMR_INFO			  		= #{cstmrInfo}					//대상고객
            , GOODS_MAIN_FNCT       = #{goodsMainFnct}			//주요기능
            , GOODS_REFER           = #{goodsRefer}					//주요 레퍼런스
            , GOODS_EXPC_EFFECT 	  = #{goodsExpcEffect}		//서비스 기대효과
					</if>
 					<if test="formNm eq 'dataForm3'">
						, SERVICE_OFFER_METHOD  = #{serviceOfferMethod} <!-- {{ DK, 2016.06.23 서비스제공방식 추가}} -->//서비스 유형
						, ARCHTC_SE             = #{archtcSe}						//아키텍쳐
						, GOODS_MAKR            = #{goodsMakr}					//제조사
						, COMOU_DE              = #{comouDe}						//출시일
					</if>
					<if test="formNm eq 'dataForm4'">
						, CNTRCT_NO         	  = #{cntrctNo}        		//나라장터 계약번호
						, GS_CRTFC_NO						= #{cntrctNo}        		//나라장터 계약번호
						, IS_MARK				  			= #{isMark}							//해당사항 없음 체크
					</if>	
					<if test="formNm eq 'dataForm14'">
						  , PRICE_DN_FILE_SEQ   = #{priceDnFileSeq}  	//가격표 파일순번
						  , MNL_DN_FILE_SEQ   	= #{mnlDnFileSeq}    	//서비스소개서 파일순번
						  , ITEM_DN_FILE_SEQ  	= #{etcFileSeq}      	//기타첨부파일 파일순번
					</if>
					, UPDT_ID               	= #{updtId}
    	    , UPDT_DT               	= SYSDATETIME
			 WHERE  GOODS_CODE 						= #{goodsCode}
    </update>
    
    <update id="goodsUpdate_ASIS" parameterType="goodsVO">
    /*_goodsManage.goodsUpdate_ASIS*/
        UPDATE  TST_GOOD_INFO_I 
           SET  GOODS_KND_CD          = #{goodsKndCd}						//dataForm1
              , GOODS_NM 		          = #{goodsNm}							//dataForm1
              , GOODS_VER_INFO        = #{goodsVerInfo}					//?
              , GOODS_HMPG_URL        = TRIM(#{goodsHmpgUrl})		//?
              , GOODS_SUMRY           = #{goodsSumry}						//dataForm2
              , GOODS_MAIN_FNCT       = #{goodsMainFnct}				//dataForm2
              , CNSL_EXPC_EFFECT      = #{cnslExpcEffect}				//?
              , GOODS_REFER           = #{goodsRefer}						//dataForm2
						  , GOODS_DWLD_URL        = TRIM(#{goodsDwldUrl})		//dataForm1
						  , SLE_MTHD_CD           = #{sleMthdCd}						//?
						  , GOODS_FILE_SEQ        = #{goodsFileSeq}					//?
						  , DEMO_EXPRN_URL        = TRIM(#{demoExprnUrl})		//dataForm1
						  , SPCLTY_REALM          = #{spcltyRealm}					//dataForm8
						  , CNSTNT_CO             = #{cnstntCo}							//?
						  , GOODS_IMAGE_FILE_SEQ  = #{goodsImageFileSeq}		//dataForm1
						  , GOODS_MNL_FILE_SEQ    = #{goodsMnlFileSeq}			//?
						  , COMOU_DE              = #{comouDe}							//dataForm3
						  , GOODS_MAKR            = #{goodsMakr}						//dataForm3
						  , GOODS_PC              = #{goodsPc}							//?
						  , GOODS_LICENCE_CD      = TRIM(#{goodsLicenceCd})	//?
						  , GOODS_LICENCE_CN      = TRIM(#{goodsLicenceCn})	//?
						  , ARCHTC_SE             = #{archtcSe}
						  , GOODS_CHARGER_NM      = #{goodsChargerNm}
						  , GOODS_CHARGER_EMAIL   = encrypt(TRIM(#{goodsChargerEmail}), 'P008')
						  , GOODS_CHARGER_CTTPC   = #{goodsChargerCttpc}
						  , GOODS_CHARGER_MBTLNUM = encrypt(TRIM(#{goodsChargerMbtlnum}), 'P007')
						  , GOODS_REGIST_STTUS    = #{goodsRegistSttus}
						  , UPDT_ID               = #{updtId}
						  , UPDT_DT               = SYSDATETIME
						  , CONFM_DT              = (CASE WHEN CONFM_DT IS NULL AND #{goodsRegistSttus} IN (1006,1007) THEN SYSDATETIME ELSE CONFM_DT END)
						  , ITEM_VOD_URL          = #{itemVodUrl}      /*체험동영상URL*/
						  , ORGPLCE               = #{orgplce}         /*원산지*/
						  , ITEM_SFE              = #{itemSfe}         /*특장점*/
						  , SMLPZ_CHK             = #{smlpzChk}        /*중소기업구분*/
						  , PRICE_DN_FILE_SEQ     = #{priceDnFileSeq}  /*가격표 파일순번*/
						  , MNL_DN_FILE_SEQ   	  = #{mnlDnFileSeq}    /*서비스소개서 파일순번*/
						  , ITEM_DN_FILE_SEQ  	  = #{etcFileSeq}      /*기타첨부파일 파일순번*/
						  , CNTRCT_NO         	  = #{cntrctNo}        /*나라장터 계약번호*/
						  , GOODS_MONITOR_URL 	  = #{goodsMonitorUrl}  /*모니터링 URL*/
						  , SERVICE_OFFER_METHOD  = #{serviceOfferMethod} <!-- {{ DK, 2016.06.23 서비스제공방식 추가}} -->
						  , MUMM_CNTRCTPD		  		= #{mummCntrctpd}
						  , CSTMR_INFO			  		= #{cstmrInfo}
						  , GOODS_EXPC_EFFECT 	  = #{goodsExpcEffect}
						  , IS_MARK				  			= #{isMark}
						  , SVC_PC_UNT_CD         = #{svcPcUntCd}
						  , SVC_PC                = #{svcPc}
						  , SVC_PC_VAT            = #{svcPcVat}
			   WHERE  GOODS_CODE 						= #{goodsCode}
    </update>
    
    <update id="goodsUpdateConfn" parameterType="goodsVO">
    /* _goodsManage.goodsUpdateConfn*/
        UPDATE TST_GOOD_INFO_I SET
          GOODS_REGIST_STTUS = #{goodsRegistSttus}
        ,  UPDT_ID       = #{updtId}
        ,  UPDT_DT       = SYSDATETIME
        ,  CONFM_DT = (CASE WHEN CONFM_DT IS NULL AND #{goodsRegistSttus} IN (1006,1007) THEN SYSDATETIME ELSE CONFM_DT END)
        WHERE
          GOODS_CODE = #{goodsCode}
    </update>
    
    <insert id="goodsInsert" parameterType="goodsVO">
    	/*_goodsManage.goodsInsert*/
        <selectKey order="BEFORE" keyProperty="goodsCode" resultType="string">
            SELECT TO_CHAR(SYSDATE, 'YYYYMM') || GOODS_SEQ.NEXT_VALUE
        </selectKey>
        INSERT INTO TST_GOOD_INFO_I
			        ( GOODS_CODE, USER_ID, LANG_CODE                                  /* 서비스코드, 등록자ID, 언어코드*/
			         , GOODS_KND_CD, GOODS_NM                                          /* 서비스구분, 서비스명 */
			         , GOODS_VER_INFO, GOODS_HMPG_URL                                  /* 서비스버전, 서비스홈페이지 */
			         , GOODS_SUMRY, GOODS_MAIN_FNCT, CNSL_EXPC_EFFECT                  /* 서비스개요, 주요기능, 컨설팅기대효과 */
			         , GOODS_REFER, GOODS_DWLD_URL, SLE_MTHD_CD                        /* 대상고객, 서비스다운로드URL, 판매방식코드(GROUP_CD:1007) */
			         , GOODS_FILE_SEQ, DEMO_EXPRN_URL, SPCLTY_REALM, CNSTNT_CO         /* 서비스파일일련, 데모체험URL, 전문분야, 컨설턴트수 */
			         , GOODS_IMAGE_FILE_SEQ, GOODS_MNL_FILE_SEQ, COMOU_DE, GOODS_MAKR  /* 서비스이미지파일 일련번호, */
			         , GOODS_PC, GOODS_LICENCE_CD, GOODS_LICENCE_CN, ARCHTC_SE         /**/
			         , GOODS_CHARGER_NM, GOODS_CHARGER_EMAIL                           /**/
			         , GOODS_CHARGER_CTTPC, GOODS_CHARGER_MBTLNUM                      /**/
			         , GOODS_REGIST_STTUS, GOODS_ACTVTY_AT                             /**/
			         , REGIST_ID, REGIST_DT, UPDT_ID, UPDT_DT                          /**/
			         , CONFM_DT                                                        /**/
			         , GOODS_RDCNT, MNGR_DELETE_AT, DELETE_MNGR_DEPT_CODE              /**/
			         , DELETE_MNGR_ID, CNTC_INSTT_CD                                   /**/
			         /* 이하 2016.01.19 추가 */
			         , ITEM_VOD_URL, ORGPLCE, ITEM_SFE, SMLPZ_CHK                      /*체험동영상URL, 원산지, 특장점, 중소기업구분*/
			         , PRICE_DN_FILE_SEQ, MNL_DN_FILE_SEQ, ITEM_DN_FILE_SEQ            /*가격표 파일순번, 서비스소개서 파일순번, 기타첨부파일 파일순번*/
			         , CNTRCT_NO                                                       /*나라장터 계약번호*/
			         , GOODS_MONITOR_URL 
			         , SERVICE_OFFER_METHOD <!-- {{ DK, 2016.06.22 서비스제공방식 추가}} -->
			        )
          VALUES
          		( #{goodsCode}, #{userId}, #{langCode}                                      /* 서비스코드(O), 등록자ID(O), 언어코드(O) */
                , #{goodsKndCd}, TRIM(#{goodsNm})                                           /* 서비스구분(O), 서비스명(O) */
                , TRIM(#{goodsVerInfo}), TRIM(#{goodsHmpgUrl})                              /* 서비스버전, 서비스홈페이지 */
                , TRIM(#{goodsSumry}), TRIM(#{goodsMainFnct}), TRIM(#{cnslExpcEffect})      /* 서비스개요, 주요기능, 컨설팅기대효과 */
                , TRIM(#{goodsRefer}), TRIM(#{goodsDwldUrl}), #{sleMthdCd}                  /* 대상고객, 서비스다운로드URL, 판매방식코드(GROUP_CD:1007) */
                , #{goodsFileSeq}, TRIM(#{demoExprnUrl}), TRIM(#{spcltyRealm}), #{cnstntCo} /* 서비스파일일련, 데모체험URL, 전문분야, 컨설턴트수 */
                , #{goodsImageFileSeq}, #{goodsMnlFileSeq}, #{comouDe}, TRIM(#{goodsMakr})
                , #{goodsPc}, #{goodsLicenceCd}, TRIM(#{goodsLicenceCn}), #{archtcSe}
                , TRIM(#{goodsChargerNm}), encrypt(TRIM(#{goodsChargerEmail}),'P008')
                , TRIM(#{goodsChargerCttpc}), encrypt(TRIM(#{goodsChargerMbtlnum}), 'P007')
                , #{goodsRegistSttus}, #{goodsActvtyAt}
                , #{registId}, SYSDATETIME, #{updtId}, SYSDATETIME
                , (CASE WHEN #{goodsRegistSttus} IN (1006,1007) THEN SYSDATETIME ELSE #{confmDt} END)
                , #{goodsRdcnt}, #{mngrDeleteAt}, #{deleteMngrDeptCode}
                , #{deleteMngrId}, #{cntcInsttCd}
                /* 이하 2016.01.19 추가 */
                , #{itemVodUrl}, #{orgplce}, #{itemSfe}, #{smlpzChk}     /*체험동영상URL, 원산지, 특장점, 중소기업구분*/
                , #{priceDnFileSeq}, #{mnlDnFileSeq}, #{etcFileSeq}      /*가격표 파일순번, 서비스소개서 파일순번, 기타첨부파일 파일순번*/
                , #{cntrctNo}                                            /*나라장터 계약번호*/
                , #{goodsMonitorUrl} <!-- {{ SK, 2016.01.20 기타 모니터링 URL}} -->
                , #{serviceOfferMethod} <!-- {{ DK, 2016.06.22 서비스제공방식 추가}} -->
                )
    </insert>
    
    <select id="g2bGoodsCount" parameterType="goodsPPSVo" resultType="int">
    /* _goodsManage.g2bGoodsCount */
        SELECT COUNT(CNTR_UNUM) AS totalCount
          FROM TCN_PPS_GOOD_INFO_L
         WHERE SUBSTR(CNTR_NUM,0,9) = SUBSTR(#{cntrNum},0,9)
          AND LINE_NUM	= #{lineNum}
    </select>
    
    <update id="g2bGoodsUpdate" parameterType="goodsPPSVo">
    /* _goodsManage.g2bGoodsUpdate */
        UPDATE TCN_PPS_GOOD_INFO_L SET
           	   CNTR_NUM					= #{cntrNum}
           	 , ITEM_CLASS_IDENTIFIER	= #{itemClassIdentifier}
             , ITEM_IDENTIFIER			= #{itemIdentifier}
             , ITEM_DETAIL_CLS_IDEN		= #{itemDetailClsIden}
             , ITEM_NAME				= #{itemName}
             , ITEM_UNIT				= #{itemUnit}
             , UNIT_PRIC				= #{unitPric}
             , ITEM_IMGURL				= #{itemImgurl}
             , ITEM_CERTF				= #{itemCertf}
             , DELIVER_DAY				= #{deliverDay}
             , DELIVER_CONTENT			= #{deliverContent}
             , ORGN_CODE				= #{orgnCode}
             , ORGN_NAME				= #{orgnName}
             , LGS_CATE_CODE			= #{lgsCateCode}
             , LGS_CATE_NAME			= #{lgsCateName}
             , MDS_CATE_CODE			= #{mdsCateCode}
             , MDS_CATE_NAME			= #{mdsCateName}
             , MANU_NAME				= #{manuName}
             , LOCAL_ADDR				= #{localAddr}
             , SUPY_DEPT_NAME			= #{supyDeptName}
             , SUPU_DEPT_NUM			= #{supuDeptNum}
             , ITEM_USE					= #{itemUse}
             , ITEM_DELETE				= #{itemDelete}
             , ITEM_DEALSTOP			= #{itemDealstop}
             , ITEM_ORDER_BLOCK			= #{itemOrderBlock}
             , ITEM_ENTR_DATE			= SYSDATETIME
         WHERE SUBSTR(CNTR_NUM,0,9)		= SUBSTR(#{cntrNum},0,9)
           AND LINE_NUM					= #{lineNum}
           AND SUBSTR(CNTR_NUM,10,2)  &lt; SUBSTR(#{cntrNum},10,2)
    </update>
    
    <insert id="g2bGoodsInsert" parameterType="goodsPPSVo">
    /* _goodsManage.g2bGoodsInsert */
        INSERT INTO TCN_PPS_GOOD_INFO_L
             (
             CNTR_UNUM
             , CNTR_NUM
             , LINE_NUM
             , ITEM_CLASS_IDENTIFIER
             , ITEM_IDENTIFIER
             , ITEM_DETAIL_CLS_IDEN
             , ITEM_NAME
             , ITEM_UNIT
             , UNIT_PRIC
             , ITEM_IMGURL
             , ITEM_CERTF
             , DELIVER_DAY
             , DELIVER_CONTENT
             , ORGN_CODE
             , ORGN_NAME
             , LGS_CATE_CODE
             , LGS_CATE_NAME
             , MDS_CATE_CODE
             , MDS_CATE_NAME
             , MANU_NAME
             , LOCAL_ADDR
             , SUPY_DEPT_NAME
             , SUPU_DEPT_NUM
             , ITEM_USE
             , ITEM_DELETE
             , ITEM_DEALSTOP
             , ITEM_ORDER_BLOCK
             , ITEM_ENTR_DATE
			 )
        VALUES
             ( 
			   #{cntrUnum} 
			 , #{cntrNum} 
			 , #{lineNum} 
			 , #{itemClassIdentifier} 
			 , #{itemIdentifier} 
			 , #{itemDetailClsIden} 
			 , #{itemName} 
			 , #{itemUnit} 
			 , #{unitPric} 
			 , #{itemImgurl} 
			 , #{itemCertf} 
			 , #{deliverDay} 
			 , #{deliverContent} 
			 , #{orgnCode} 
			 , #{orgnName} 
			 , #{lgsCateCode} 
			 , #{lgsCateName} 
			 , #{mdsCateCode} 
			 , #{mdsCateName} 
			 , #{manuName} 
			 , #{localAddr} 
			 , #{supyDeptName} 
			 , #{supuDeptNum} 
			 , #{itemUse} 
			 , #{itemDelete} 
			 , #{itemDealstop} 
			 , #{itemOrderBlock} 
			 , SYSDATETIME 
			 )
    </insert>
    
    <update id="updtUpdate" parameterType="goodsVO">
    /*_goodsManage.updtUpdate*/
    
        UPDATE TST_GOOD_INFO_I 
           SET UPDT_DT = SYSDATETIME
         WHERE GOODS_CODE = #{goodsCode}
         
    </update>

    <select id="orderCnt" parameterType="goodsVO" resultType="integer">
    /*_goodsManage.orderCnt*/
        SELECT COUNT(GOODS_CODE) AS ordrCnt
          FROM TST_GOOD_ORDR_I
         WHERE ORDER_CNFIRM_AT = 'N' AND GOODS_CODE= #{goodsCode}
    </select>
    <select id="goodCodeTmpCount" parameterType="goodsVO" resultType="integer">
    /*_goodsManage.goodCodeTmpCount*/
        SELECT COUNT(GOODS_CODE) AS goodCodeTmpCount
          FROM TST_GOOD_INFO_I_TMP
         WHERE GOODS_CODE= #{goodsCode}
    </select>
    <update id="goodsDelete" parameterType="goodsVO">
    /*_goodsManage.goodsDelete*/
        UPDATE TST_GOOD_INFO_I SET
          MNGR_DELETE_AT = 'Y'
        , UPDT_ID       = #{updtId}
        , UPDT_DT       = SYSDATETIME
        , DELETE_MNGR_DEPT_CODE = (SELECT DEPT_CODE FROM OP_MNGR WHERE MNGR_ID = #{updtId})
        , DELETE_MNGR_ID = #{updtId}
        WHERE
          GOODS_CODE = #{goodsCode}
    </update>

    <update id="registUpdate" parameterType="goodsVO">
    /*_goodsManage.registUpdate*/
        UPDATE TST_GOOD_INFO_I SET
          GOODS_REGIST_STTUS = 1002
        , UPDT_ID       = #{updtId}
        , UPDT_DT       = SYSDATETIME
        WHERE
          GOODS_CODE = #{goodsCode}
    </update>

    <delete id="ctgryDelete" parameterType="goodsVO">
    /*_goodsManage.ctgryDelete*/
        DELETE FROM TST_GOOD_CATE_I
        WHERE
        GOODS_CODE = #{goodsCode}
    </delete>

    <insert id="ctgryInsert" parameterType="goodsVO">
    /*_goodsManage.ctgryInsert*/
        INSERT INTO TST_GOOD_CATE_I
        ( GOODS_CODE, CTGRY_CODE)
        (
	        SELECT #{goodsCode}, #{ctgryCd}
	        UNION ALL
	        SELECT #{goodsCode}, MAPNG_CTGRY_CODE FROM TST_CATE_MGMT_M
	        WHERE #{pChk} AND CTGRY_CODE = #{ctgryCd} AND (MAPNG_CTGRY_CODE IS NOT NULL AND TRIM(MAPNG_CTGRY_CODE) != '')
	        UNION ALL
	        SELECT #{goodsCode}, MAPNG_CTGRY_CODE2 FROM TST_CATE_MGMT_M
	        WHERE #{goodsKndCd} = 1003 AND CTGRY_CODE = #{ctgryCd} AND (MAPNG_CTGRY_CODE2 IS NOT NULL AND TRIM(MAPNG_CTGRY_CODE2) != '')
        )
    </insert>
    
    <insert id="g2bCtgryInsert" parameterType="goodsVO">
    	/* _goodsManage.g2bCtgryInsert */
        INSERT INTO TST_GOOD_CATE_I
        ( GOODS_CODE, CTGRY_CODE)
        (
	        SELECT #{goodsCode}, MCLAS_CODE FROM TCN_MAPNG_CTGRY_I WHERE CTGRY_USE_YN = 'Y' AND  MAPNG_SCLAS_CODE = ${detailGoodsClNo} LIMIT 1
	        UNION ALL
	        SELECT #{goodsCode}, SCLAS_CODE FROM TCN_MAPNG_CTGRY_I WHERE CTGRY_USE_YN = 'Y' AND  MAPNG_SCLAS_CODE = ${detailGoodsClNo} LIMIT 1
        )
    </insert>

<!--     <update id="imageUpdate" parameterType="goodsVO"> -->
<!--         UPDATE T_GOODS_IMAGES SET -->
<!--             GOODS_IMAGE_FILE_SEQ = #{goodsImageFileSeq} -->
<!--         WHERE -->
<!--         GOODS_CODE = #{goodsCode} -->
<!--     </update> -->

    <delete id="markDelete" parameterType="goodsVO">
    	/* _goodsManage.markDelete */
        DELETE FROM TST_GOOD_MARK_I
        WHERE
        GOODS_CODE = #{goodsCode}
    </delete>

    <delete id="markDeleteOne" parameterType="goodsVO">
    /* _goodsManage.markDeleteOne*/
    	DELETE FROM TST_GOOD_MARK_I
       WHERE GOODS_CODE = #{goodsCode}
         AND MARK_CD = #{markCd}
    </delete>

    <insert id="markInsert" parameterType="goodsVO">
    	/* _goodsManage.markInsert */
        INSERT INTO TST_GOOD_MARK_I
        (GOODS_CODE, MARK_CD)
        VALUES
        (#{goodsCode}, #{markCd})
    </insert>

    <update id="crtfcUpdate" parameterType="goodsVO">
    /*_goodsManage.crtfcUpdate*/
        MERGE INTO
              TST_CTFC_ATCH_I T
        USING (SELECT #{goodsCode} AS GOODS_CODE, #{markCd} AS CRTFC_SE_CD ) S
           ON (T.GOODS_CODE = S.GOODS_CODE AND T.CRTFC_SE_CD = S.CRTFC_SE_CD)
        WHEN MATCHED THEN
              UPDATE SET  T.CRTFC_SE_FILE_SEQ = #{crtfcSeFileSeq}
        WHEN NOT MATCHED THEN
              INSERT
                  (GOODS_CODE, CRTFC_SE_CD, CRTFC_SE_FILE_SEQ)
              VALUES
                  (#{goodsCode}, #{markCd}, #{crtfcSeFileSeq})
    </update>

    <delete id="tagDelete" parameterType="goodsVO">
    	/* _goodsManage.tagDelete */
        DELETE FROM TST_GOOD_TAG_I
        WHERE
        GOODS_CODE = #{goodsCode}
    </delete>

    <update id="tagInsert" parameterType="goodsVO">
    	/* _goodsManage.tagInsert */
        INSERT INTO TST_GOOD_TAG_I
            (GOODS_CODE, GOODS_TAG_NM)
        VALUES
            (#{goodsCode}, #{goodsTagNm})
    </update>

    <delete id="metaDelete" parameterType="goodsVO">
    	/* _goodsManage.metaDelete */
        DELETE FROM TST_GOOD_META_I
        WHERE
            GOODS_CODE = #{goodsCode} AND GROUP_CD = #{metaGroupCd}
    </delete>
    <delete id="metaDelete1" parameterType="goodsVO">
    	/* _goodsManage.metaDelete */
        DELETE FROM TST_GOOD_META_I
        WHERE
            GOODS_CODE = #{goodsCode}
    </delete>

    <delete id="atchDelete" parameterType="goodsVO">
    	/* _goodsManage.atchDelete */
        DELETE FROM TST_CTFC_ATCH_I
        WHERE
            GOODS_CODE = #{goodsCode}
    </delete>
    <delete id="cateDelete" parameterType="goodsVO">
    	/* _goodsManage.cateDelete */
        DELETE FROM TST_GOOD_CATE_I
        WHERE
            GOODS_CODE = #{goodsCode}
    </delete>

    <insert id="metaInsert" parameterType="goodsVO">
    /* _goodsManage.metaInsert */
    	INSERT INTO TST_GOOD_META_I
			(
			  GOODS_CODE, LANG_CD,    GROUP_CD,
				INDVDLZ_CD, META_ETC_CN
			)
			VALUES
			(
				#{goodsCode}, #{langCode}, #{metaGroupCd},
				#{metaCode}, #{metaEtcCn}
			)
    </insert>

    <delete id="metaDeleteTmp" parameterType="goodsVO">
    	/* _goodsManage.metaDeleteTmp */
        DELETE FROM TST_GOOD_META_I_TMP
        WHERE
            GOODS_CODE = #{goodsCode} AND GROUP_CD = #{metaGroupCd}
    </delete>

    <insert id="metaInsertTmp" parameterType="goodsVO">
    	/* _goodsManage.metaInsertTmp */
            INSERT INTO TST_GOOD_META_I_TMP
			(
				GOODS_CODE, LANG_CD,    GROUP_CD,
				INDVDLZ_CD, META_ETC_CN
			)
			VALUES
			(
				#{goodsCode}, #{langCode}, #{metaGroupCd},
				#{metaCode}, #{metaEtcCn}
			)
    </insert>


<!--     <update id="mnlUpdate" parameterType="goodsVO"> -->
<!--         UPDATE T_GOODS_MNL_INFO SET             -->
<!--             GOODS_MNL_NM = #{goodsMnlNm}, -->
<!--             GOODS_MNL_FILE_SEQ = #{goodsMnlFileSeq}   -->
<!--         WHERE GOODS_CODE = #{goodsCode} -->
<!--           AND GOODS_MNL_SEQ = #{goodsMnlSeq} -->
<!--     </update> -->

    <select id="fileCount" parameterType="int" resultType="int">
    /*_goodsManage.fileCount*/
        SELECT COUNT(FILE_SEQ) AS fileCnt
          FROM OP_FILE
         WHERE FILE_SEQ = #{fileSeq}
    </select>

    <!--     인증구분코드목록     -->
    <select id="goodsMarkCodeList" resultType="map">
    /*_goodsManage.goodsMarkCodeList*/
        SELECT B.INDVDLZ_CD AS MARKCD,
               B.INDVDLZ_CD_NM AS MARKNM,
               A.MARK_CD AS GOODSMARKCD,
               (SELECT MARK_IMAGE_FILE_SEQ FROM TST_GOOD_MARK_M WHERE MARK_CD = A.MARK_CD) AS MARKIMAGEFILESEQ,
               C.CRTFC_SE_FILE_SEQ AS CRTFCSEFILESEQ
          FROM OP_CODE_INDVDLZ B LEFT OUTER JOIN TST_GOOD_MARK_I A
            ON A.MARK_CD = B.INDVDLZ_CD
               LEFT OUTER JOIN TST_CTFC_ATCH_I C
            ON B.INDVDLZ_CD = C.CRTFC_SE_CD
         WHERE B.LANG_CODE = #{langCode}
           AND B.GROUP_CD = 1011
           AND B.USE_YN = 'Y'
        ORDER BY B.CD_SORT_NO
<!--         SELECT B.INDVDLZ_CD AS MARKCD, -->
<!--                B.INDVDLZ_CD_NM AS MARKNM,                -->
<!--                (SELECT MARK_IMAGE_FILE_SEQ FROM TST_GOOD_MARK_M WHERE MARK_CD = B.INDVDLZ_CD) AS MARKIMAGEFILESEQ -->
<!--           FROM OP_CODE_INDVDLZ B            -->
<!--          WHERE  -->
<!--                B.GROUP_CD = 1011 -->
<!--            AND B.USE_YN = 'Y' -->
<!--        ORDER BY B.CD_SORT_NO         -->
    </select>

    <sql id="sellerWhere">
        <if test="q_searchKey != null  and q_searchKey != ''">
            <choose>
                <!-- 스토어명 -->
                <when test="q_searchKey == '1003'">
                AND A.USER_ID IN (SELECT USER_ID FROM TUM_SVC_STOR_I WHERE LANG_STORE_NM LIKE '%' || #{q_searchVal} || '%')
                </when>
                <!-- 판매자ID -->
                <when test="q_searchKey == '1001'">
                AND A.USER_ID LIKE '%' || #{q_searchVal} || '%'
                </when>
                <!-- 판매자명 -->
                <when test="q_searchKey == '1002'">
                AND A.USER_NM LIKE '%' || #{q_searchVal} || '%'
                </when>
            </choose>
        </if>
    </sql>

    <select id="sellerList" parameterType="map" resultType="userVO">
    /* _goodsManage.sellerList */
        SELECT
               Y.*
          FROM (SELECT
                       ROWNUM NUM, X.*
                  FROM (SELECT
                              A.USER_ID AS userId
                             ,A.USER_NM AS userNm
                             ,A.USER_TY_CD AS userTyCd
                             ,A.NATION_CODE AS nationCode
                             ,(SELECT LANG_NM FROM TCO_SVC_LANG_C WHERE LANG_CODE = B.LANG_CODE) AS langNm
                             ,B.LANG_CODE AS langCode
                             ,B.LANG_STORE_NM AS langStoreNm
                             ,B.STORE_CHARGER_NM AS storeChargerNm
                             ,DECRYPT(B.REPRSNT_EMAIL, 'P008') AS reprsntEmail
                             ,DECRYPT(B.REPRSNT_TELNO, 'P007') AS reprsntTelno
                             ,B.STORE_URL AS storeUrl
                         FROM OP_USER A, TUM_SVC_STOR_I B
                        WHERE A.USER_ID = B.USER_ID
                          AND A.USER_TY_CD IN (1002, 2002, 3002)
                          AND A.USER_STTUS_CD = 1001
                          AND B.LANG_CODE = #{q_searchKey0}
                          AND B.STORE_ACTVTY_AT = 'Y'
                          <include refid="sellerWhere"/>
                        ORDER BY A.USER_NM ASC
                       )X
                 WHERE ROWNUM &lt;= #{pagingEndNum}
               ) Y
         WHERE NUM &gt;= #{pagingStartNum}
    </select>

    <select id="sellerListCount" parameterType="map" resultType="int">
    /* _goodsManage.sellerListCount */
        SELECT
               COUNT(A.USER_ID) AS totalCount
          FROM OP_USER A, TUM_SVC_STOR_I B
         WHERE A.USER_ID = B.USER_ID
           AND A.USER_TY_CD IN (1002, 2002, 3002)
           AND A.USER_STTUS_CD = 1001
           AND B.LANG_CODE = #{q_searchKey0}
           AND B.STORE_ACTVTY_AT = 'Y'
           <include refid="sellerWhere"/>
    </select>

    <!-- 검토반려 판매자 정보조회 -->
    <select id="sellerInfo" parameterType="goodsVO" resultType="goodsVO">
    /* _goodsManage.sellerInfo */
        SELECT
               B.LANG_STORE_NM     AS langStoreNm
             , B.LANG_CODE         AS langCode
             , A.GOODS_CODE        AS goodsCode
             , A.USER_ID           AS userId
             , A.GOODS_CHARGER_NM  AS goodsChargerNm
             , DECRYPT(A.GOODS_CHARGER_EMAIL,'P008') AS goodsChargerEmail
             , DECRYPT(A.GOODS_CHARGER_CTTPC, 'P007') AS goodsChargerCttpc
             , DECRYPT(A.GOODS_CHARGER_MBTLNUM,'P007') AS goodsChargerMbtlnum
             , ( SELECT USER_TY_CD FROM OP_USER WHERE  USER_ID = A.USER_ID ) AS userTyCd
        FROM TST_GOOD_INFO_I A , TUM_SVC_STOR_I B
        WHERE A.USER_ID = B.USER_ID
          AND A.LANG_CODE = #{langCode}
          AND A.LANG_CODE = B.LANG_CODE
          AND A.GOODS_CODE = #{goodsCode}
    </select>

    <!-- 승인반려 검토관리자 정보조회 -->
    <select id="eManagerInfo" parameterType="goodsVO" resultType="goodsVO">
    /* _goodsManage.eManagerInfo */
        SELECT A.MNGR_NM AS mngrNm
             , A.MNGR_ID AS mngrId
             , (SELECT DEPT_NM FROM OP_DEPT WHERE A.DEPT_CODE=DEPT_CODE) AS deptNm
             , (SELECT TELNO FROM OP_DEPT WHERE A.DEPT_CODE=DEPT_CODE) AS deptTelno
             , DECRYPT(A.EMAIL, 'P008') AS email
             , DECRYPT(A.TELNO, 'P007') AS telno
          FROM OP_MNGR  A, TST_EXMN_CNFM_H B
          WHERE A.MNGR_ID = B.MNGR_ID
            AND B.GOODS_CODE = #{goodsCode}
            AND B.EXMNT_CONFM_CD = #{exmntConfmCd}
       ORDER BY B.EXMNT_CONFM_DT DESC
          LIMIT 1
    </select>

    <!--권한관리자 정보조회 -->
    <select id="eManagerAuthInfo" parameterType="goodsVO" resultType="goodsVO">
    /* _goodsManage.eManagerAuthInfo */
        SELECT
               A.MNGR_NM AS mngrNm
             , A.MNGR_ID AS mngrId
             , (SELECT DEPT_NM FROM OP_DEPT WHERE A.DEPT_CODE=DEPT_CODE) AS deptNm
             , (SELECT TELNO FROM OP_DEPT WHERE A.DEPT_CODE=DEPT_CODE) AS deptTelno
             , DECRYPT(A.EMAIL, 'P008') AS email
             , DECRYPT(A.TELNO, 'P007') AS telno
        FROM OP_MNGR A, OP_AUTH_MNGR_ASSIGN B
        WHERE A.MNGR_ID = B.MNGR_ID
          AND B.AUTH_CODE = #{authCode}
          AND A.USE_YN = 'Y'
          AND A.EMAIL IS NOT NULL
    </select>

    <!-- 승인,검토 반려등록 액션 -->
    <insert id="reasonAction" parameterType="goodsVO">
    /* _goodsManage.reasonAction */
        <selectKey order="BEFORE" keyProperty="exmntConfmHistSn" resultType="int">
            SELECT NVL(MAX(EXMNT_CONFM_HIST_SN), 0) + 1 FROM TST_EXMN_CNFM_H WHERE GOODS_CODE = #{goodsCode}
        </selectKey>
        INSERT INTO TST_EXMN_CNFM_H
        (   GOODS_CODE
          , EXMNT_CONFM_HIST_SN
          , MNGR_ID
          , EXMNT_CONFM_CD
          , EXMNT_CONFM_DT
          , RETURN_RESN
          <if test="requstResn != null and requstResn != ''">
          , REQU_DT
          , REQUST_SE
          , REQUST_RESN
          , REQUST_PROCESS_AT
          , DSPY_CNVRS_PREARNGE_DT
          </if>
        ) VALUES(
            #{goodsCode}
          , #{exmntConfmHistSn}
          , #{mngrId}
          , #{exmntConfmCd}
          , SYS_DATETIME
          , #{returnResn}
           <if test="requstResn != null and requstResn != ''">
          , SYS_DATETIME
          , #{requstSe}
          , #{requstResn}
          , 'Y'
          , #{dspyCnvrsPrearngeDt}
          </if>
        )
    </insert>
	
	<insert id="insertChangeAction" parameterType="goodsVO">
    /* _goodsManage.insertChangeAction */
        <selectKey order="BEFORE" keyProperty="exmntConfmHistSn" resultType="int">
            SELECT NVL(MAX(EXMNT_CONFM_HIST_SN), 0) + 1 FROM TST_EXMN_CNFM_H WHERE GOODS_CODE = #{goodsCode}
        </selectKey>
        INSERT INTO TST_EXMN_CNFM_H
        (   GOODS_CODE
          , EXMNT_CONFM_HIST_SN
          , MNGR_ID
          , EXMNT_CONFM_CD
          , EXMNT_CONFM_DT
          , RETURN_RESN
          , GOODS_BEFORE_PC
          , GOODS_CHNG_PC
          , GOODS_CHNG_FILE
        ) VALUES(
            #{goodsCode}
          , #{exmntConfmHistSn}
          , #{mngrId}
          , #{exmntConfmCd}
          , SYS_DATETIME
          , #{returnResn}
          , #{goodsBeforPc}
          , #{goodsChngPc}
          , #{goodsChngSeq}
        )
    </insert>
  
<!--   검토승인 이력 -->
	<update id="updateChangeAction" parameterType="goodsVO">
     /* _goodsManage.updateChangeAction */
         UPDATE  TST_EXMN_CNFM_H
            SET  MNGR_ID				     = #{mngrId}
           	 	 , EXMNT_CONFM_CD 		 = #{exmntConfmCd}	
           	   , EXMNT_CONFM_DT		   = SYS_DATETIME 
           	   , RETURN_RESN			   = #{returnResn}
          WHERE  GOODS_CODE 			   = #{goodsCode}
            AND  EXMNT_CONFM_HIST_SN = #{exmntConfmHistSn}
    </update>
    
    <update id="updateConfirmAction" parameterType="goodsVO">
     /* _goodsManage.updateConfirmAction */
         UPDATE  TST_EXMN_CNFM_H
           SET  REQU_DT 		=  SYS_DATETIME,
           		EXMNT_CONFM_CD 	=  #{goodsRegistSttus},
           		REQU_ID 		=  #{updtId}
         WHERE GOODS_CODE 		=  #{goodsCode}
           AND EXMNT_CONFM_CD 	=  #{exmntConfmCd}
    </update>
    
	
    <!-- 승인,검토 반려등록후 서비스등록상태 수정 -->
    <update id="goodsSttusUpdate" parameterType="goodsVO">
    /* _goodsManage.goodsSttusUpdate */
        UPDATE TST_GOOD_INFO_I
        SET GOODS_REGIST_STTUS = #{goodsRegistSttus}
        WHERE MNGR_DELETE_AT ='N'
          AND GOODS_ACTVTY_AT ='Y'
          AND GOODS_CODE = #{goodsCode}
          AND LANG_CODE = #{langCode}
    </update>
    <update id="goodsSttusUpdateTmp" parameterType="goodsVO">
    /* _goodsManage.goodsSttusUpdateTmp */
        UPDATE TST_GOOD_INFO_I_TMP
        SET GOODS_STAT = 9999, GOODS_REGIST_STTUS = #{goodsRegistSttus}
        WHERE 1=1
          AND GOODS_CODE = #{goodsCode}
    </update>

    <!--     반려사유조회     -->
    <select id="returnReason" parameterType="goodsVO" resultType="String">
    /* _goodsManage.returnReason*/
        SELECT RETURN_RESN       AS returnResn
              FROM TST_EXMN_CNFM_H
              WHERE GOODS_CODE = #{goodsCode}
                 AND EXMNT_CONFM_CD = #{exmntConfmCd}
           ORDER BY EXMNT_CONFM_DT DESC
           LIMIT 1
    </select>

	<!--
     * SQL 명        : _goodsManage.goodsStatus
     * 기능(설명)    : 서비스 판매상태 조회
     * 작   성   자  : (주)엔키소프트
     * 작   성   일  : 2016-01-19
    -->
    <select id="goodsStatus" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.goodsStatus */
	    SELECT COUNT(GOODS_CODE)
	      FROM TST_GOOD_INFO_I
	     WHERE MNGR_DELETE_AT  = 'N' 
	       AND GOODS_ACTVTY_AT = 'Y'
	       AND GOODS_CODE         = #{goodsCode}
	       AND GOODS_REGIST_STTUS = #{goodsStatus}
	       
    </select>
    <select id="cntTstGoodInfoITmpCount" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.cntTstGoodInfoITmpCount */
	    SELECT COUNT(GOODS_CODE)
	      FROM TST_GOOD_INFO_I_TMP
	     WHERE 1=1
	       AND GOODS_CODE         = #{goodsCode}
    </select>
    <select id="tstGoodSpecDescribeICount" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.tstGoodSpecDescribeICount */
	    SELECT COUNT(GOODS_CODE)
	      FROM tst_good_spec_describe_i
	     WHERE 1=1
	       AND GOODS_CODE         = #{goodsCode}
    </select>
    <select id="updateTstGoodMarkIApplyCnt" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodMarkIApplyCnt */
	    SELECT COUNT(GOODS_CODE)
	      FROM TST_GOOD_MARK_I_TMP
	     WHERE 1=1
	       AND GOODS_CODE         = #{goodsCode}
    </select>
    <select id="updateTstGoodMetaIApplyCnt" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodMetaIApplyCnt */
	    SELECT COUNT(GOODS_CODE)
	      FROM TST_GOOD_META_I_TMP
	     WHERE 1=1
	       AND GOODS_CODE         = #{goodsCode}
    </select>
    <select id="updateTstCtfcAtchIApplyCnt" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstCtfcAtchIApplyCnt */
	    SELECT COUNT(GOODS_CODE)
	      FROM TST_CTFC_ATCH_I_TMP
	     WHERE 1=1
	       AND GOODS_CODE         = #{goodsCode}
    </select>
    <select id="updateTstGoodCateIApplyCnt" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodCateIApplyCnt */
	    SELECT COUNT(GOODS_CODE)
	      FROM TST_GOOD_CATE_I_TMP
	     WHERE 1=1
	       AND GOODS_CODE         = #{goodsCode}
    </select>
    <select id="updateTstGoodTagIApplyCnt" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodTagIApplyCnt */
	    SELECT COUNT(GOODS_CODE)
	      FROM TST_GOOD_TAG_I_TMP
	     WHERE 1=1
	       AND GOODS_CODE         = #{goodsCode}
    </select>

    <insert id="tstGoodSpecDescribeIInsert" parameterType="goodsVO">    
    /* _goodsManage.tstGoodSpecDescribeIInsert */
		insert into tst_good_spec_describe_i(goods_code, goods_num)
			select 
					goods_code, 
					goods_num 
			from 
					tst_good_spec_describe_i_tmp
			where 1=1 
			and goods_code = #{goodsCode}
			and goods_num  = (					
							   SELECT MAX(GOODS_NUM)
							   FROM TST_GOOD_SPEC_DESCRIBE_I_TMP 
    						   WHERE GOODS_CODE = #{goodsCode}
    					     )       
    </insert>
    <insert id="insertTstGoodMarkIApply" parameterType="goodsVO">    
    /* _goodsManage.insertTstGoodMarkIApply */
		insert into TST_GOOD_MARK_I
		(
			goods_code,	
			mark_cd
		)
		SELECT 
			goods_code,
			mark_cd
		from 
			TST_GOOD_MARK_I_TMP
		where goods_code = #{goodsCode}

    </insert>
    <insert id="insertTstGoodMetaIApply" parameterType="goodsVO">    
    /* _goodsManage.insertTstGoodMetaIApply */
		insert into TST_GOOD_META_I
		(
			goods_code,	
			lang_cd	,
			group_cd,	
			indvdlz_cd,	
			meta_etc_cn
		)
		SELECT 
			goods_code,	
			lang_cd	,
			group_cd,	
			indvdlz_cd,	
			meta_etc_cn
		from 
			TST_GOOD_META_I_TMP
		where goods_code = #{goodsCode}

    </insert>

    <insert id="insertTstCtfcAtchIApply" parameterType="goodsVO">    
    /* _goodsManage.insertTstCtfcAtchIApply */
		insert into TST_CTFC_ATCH_I
		(
			goods_code,	
			crtfc_se_cd	,
			crtfc_se_file_seq
		)
		SELECT 
			goods_code,	
			crtfc_se_cd	,
			crtfc_se_file_seq
		from 
			TST_CTFC_ATCH_I_TMP
		where goods_code = #{goodsCode}

    </insert>

    <insert id="insertTstGoodCateIApply" parameterType="goodsVO">    
    /* _goodsManage.insertTstGoodCateIApply */
		insert into TST_GOOD_CATE_I
		(
			goods_code,	
			ctgry_code
		)
		SELECT 
			goods_code,	
			ctgry_code
		from 
			TST_GOOD_CATE_I_TMP
		where goods_code = #{goodsCode}

    </insert>

    <insert id="insertTstGoodTagIApply" parameterType="goodsVO">    
    /* _goodsManage.insertTstGoodTagIApply */
		insert into TST_GOOD_TAG_I
		(
			goods_code,	
			ctgry_code
		)
		SELECT 
			goods_code,	
			ctgry_code
		from 
			TST_GOOD_TAG_I_TMP
		where goods_code = #{goodsCode}

    </insert>

	<!--
     * SQL 명        : _goodsManage.updateTstGoodInfoIAWpply
     * 기능(설명)    : 전시나 비전시 데이트 수정시 최종 승인요청시 Temp에 있는 내용을 실제 테이블로 내용 업데이트
     * 작   성   자  : 최성민
     * 작   성   일  : 2017-07-16
    -->
    <select id="updateTstGoodInfoIApply" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodInfoIApply */
		MERGE
		INTO
    		TST_GOOD_INFO_I A
		USING
    		(
		        SELECT
					*
		        FROM
					TST_GOOD_INFO_I_TMP b
				WHERE b.goods_code = #{goodsCode}
    		) B ON (
        		A.goods_code = B.goods_code
    		)
    		WHEN MATCHED THEN
        		UPDATE
        			SET
						A.goods_code					 = B.goods_code
						,A.user_id                       = B.user_id
						,A.lang_code                     = B.lang_code
						,A.goods_knd_cd                  = B.goods_knd_cd
						,A.goods_nm                      = B.goods_nm
						,A.goods_ver_info                = B.goods_ver_info
						,A.goods_hmpg_url                = B.goods_hmpg_url
						,A.goods_sumry                   = B.goods_sumry
						,A.goods_main_fnct               = B.goods_main_fnct
						,A.cnsl_expc_effect              = B.cnsl_expc_effect
						,A.goods_refer                   = B.goods_refer
						,A.cstmr_info                    = B.cstmr_info
						,A.goods_dwld_url                = B.goods_dwld_url
						,A.sle_mthd_cd                   = B.sle_mthd_cd
						,A.goods_file_seq                = B.goods_file_seq
						,A.demo_exprn_url                = B.demo_exprn_url
						,A.spclty_realm                  = B.spclty_realm
						,A.cnstnt_co                     = B.cnstnt_co
						,A.goods_image_file_seq          = B.goods_image_file_seq
						,A.goods_mnl_file_seq            = B.goods_mnl_file_seq
						,A.comou_de                      = B.comou_de
						,A.goods_makr                    = B.goods_makr
						,A.goods_pc                      = B.goods_pc
						,A.goods_licence_cd              = B.goods_licence_cd
						,A.goods_licence_cn              = B.goods_licence_cn
						,A.archtc_se                     = B.archtc_se
						,A.goods_charger_nm              = B.goods_charger_nm
						,A.goods_charger_email           = B.goods_charger_email
						,A.goods_charger_cttpc           = B.goods_charger_cttpc
						,A.goods_charger_mbtlnum         = B.goods_charger_mbtlnum
						,A.goods_regist_sttus            = B.goods_regist_sttus
						,A.goods_actvty_at               = B.goods_actvty_at
						,A.regist_id                     = B.regist_id
						,A.regist_dt                     = B.regist_dt
						,A.updt_id                       = B.updt_id
						,A.updt_dt                       = B.updt_dt
						,A.confm_dt                      = B.confm_dt
						,A.goods_rdcnt                   = B.goods_rdcnt
						,A.mngr_delete_at                = B.mngr_delete_at
						,A.delete_mngr_dept_code         = B.delete_mngr_dept_code
						,A.delete_mngr_id                = B.delete_mngr_id
						,A.cntc_instt_cd                 = B.cntc_instt_cd
						,A.cmpny_nm                      = B.cmpny_nm
						,A.unit_price                    = B.unit_price
						,A.orgplce                       = B.orgplce
						,A.cntrct_no                     = B.cntrct_no
						,A.locplc_hedofc                 = B.locplc_hedofc
						,A.price_chk                     = B.price_chk
						,A.locplc_it                     = B.locplc_it
						,A.item_vod_url                  = B.item_vod_url
						,A.item_dn_file_seq              = B.item_dn_file_seq
						,A.mnl_dn_file_seq               = B.mnl_dn_file_seq
						,A.frame_chk                     = B.frame_chk
						,A.gtwob_chk                     = B.gtwob_chk
						,A.item_sfe                      = B.item_sfe
						,A.smlpz_chk                     = B.smlpz_chk
						,A.delng_stop_chk                = B.delng_stop_chk
						,A.order_intrcp_chk              = B.order_intrcp_chk
						,A.item_img_url                  = B.item_img_url
						,A.gtwob_number                  = B.gtwob_number
						,A.price_dn_file_seq             = B.price_dn_file_seq
						,A.goods_monitor_url             = B.goods_monitor_url
						,A.service_offer_method          = B.service_offer_method
						,A.updt_stat                     = B.updt_stat
						,A.updt_chng_file                = B.updt_chng_file
						,A.goods_expc_effect             = B.goods_expc_effect
						,A.gs_crtfc_no                   = B.gs_crtfc_no
						,A.nara_crtfc_no                 = B.nara_crtfc_no
						,A.price_dn_file_id              = B.price_dn_file_id
						,A.is_mark		                 = B.is_mark
						,A.SVC_PC		                 = B.SVC_PC						
						,A.SVC_PC_VAT		             = B.SVC_PC_VAT
						,A.SVC_PC_UNT_CD		         = B.SVC_PC_UNT_CD
						,A.MUMM_CNTRCTPD		         = B.MUMM_CNTRCTPD
						,A.DUE_STDR_MUMM		         = B.DUE_STDR_MUMM
												
    </select>
    <select id="updateTstGoodSpecDescribeIApply" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodSpecDescribeIApply */
		MERGE
		INTO
    		tst_good_spec_describe_i A
		USING
    		(
        		SELECT
            			*
        		FROM
            		tst_good_spec_describe_i_tmp b
         		WHERE b.goods_code = #{goodsCode}
    		) B ON (
           		A.goods_code 	= B.goods_code
       			AND A.goods_num = B.goods_num
    		)
    	WHEN MATCHED THEN
        	UPDATE
        		SET
					A.goods_code											=  B.goods_code
					,A.goods_num                      =  B.goods_num
					,A.cmpny_nm	               				=  B.cmpny_nm
					,A.cmpny_fond_year	              =  B.cmpny_fond_year
					,A.entrprs_se	                    =  B.entrprs_se
					,A.cmpny_intrcn	                  =  B.cmpny_intrcn
					,A.bsns_realm	                    =  B.bsns_realm
					,A.main_refer	                    =  B.main_refer
					,A.svc_nm	                        =  B.svc_nm
					,A.svc_dfn_sfe	                  =  B.svc_dfn_sfe
					,A.svc_expc_effect	              =  B.svc_expc_effect
					,A.svc_ty	                        =  B.svc_ty
					,A.svc_entrprs_suply_ty	          =  B.svc_entrprs_suply_ty
					,A.due_stdr_mumm	                =  B.due_stdr_mumm
					,A.svc_pc	                        =  B.svc_pc
					,A.svc_pc_vat	                    =  B.svc_pc_vat
					,A.svc_pc_unt_cd	                =  B.svc_pc_unt_cd
					,A.mumm_cntrctpd	                =  B.mumm_cntrctpd
					,A.pc_table_atch_at	              =  B.pc_table_atch_at
					,A.vat_incls_at	                  =  B.vat_incls_at
					,A.svc_begin_procss	              =  B.svc_begin_procss
					,A.svc_end_procss	                =  B.svc_end_procss
					,A.at_svc_evl	                    =  B.at_svc_evl
					,A.svc_evl_suply_pd	              =  B.svc_evl_suply_pd
					,A.svc_charger_nm	                =  B.svc_charger_nm
					,A.svc_charger_telno	            =  B.svc_charger_telno
					,A.svc_charger_email	            =  B.svc_charger_email
					,A.gnrlz_sopmal_regist_at	        =  B.gnrlz_sopmal_regist_at
					,A.private_cloud_at	              =  B.private_cloud_at
					,A.public_cloud_at	              =  B.public_cloud_at
					,A.hybrid_cloud_at	              =  B.hybrid_cloud_at
					,A.kisa_crtfc_at	                =  B.kisa_crtfc_at
					,A.cloud_svc_qlity_crtfc_at	      =  B.cloud_svc_qlity_crtfc_at
					,A.cloud_svc_cnfirm_at	          =  B.cloud_svc_cnfirm_at
					,A.cc_crtfc_at	                  =  B.cc_crtfc_at
					,A.gs_crtfc_at	                  =  B.gs_crtfc_at
					,A.sla_applc_at	                  =  B.sla_applc_at
					,A.svc_useful	                    =  B.svc_useful
					,A.atmc_estn_sport_at	            =  B.atmc_estn_sport_at
					,A.clustering_sport_at	          =  B.clustering_sport_at
					,A.sfsrv_provisioning_sport_at	  =  B.sfsrv_provisioning_sport_at
					,A.svc_provisioning_time	        =  B.svc_provisioning_time
					,A.svc_provisioning_relis_time	  =  B.svc_provisioning_relis_time
					,A.data_cnter_hbrd_lc_info	      =  B.data_cnter_hbrd_lc_info
					,A.data_cnter_lc_info	            =  B.data_cnter_lc_info
					,A.dsstrrecovry_plan	            =  B.dsstrrecovry_plan
					,A.data_extrc_procss	            =  B.data_extrc_procss
					,A.unuse_data_prtc_policy	        =  B.unuse_data_prtc_policy
					,A.safe_data_delete_policy	      =  B.safe_data_delete_policy
					,A.svc_manage_sttus_info_suply	  =  B.svc_manage_sttus_info_suply
					,A.svc_use_log_suply_at	          =  B.svc_use_log_suply_at
					,A.trobl_manage_reprt_policy	    =  B.trobl_manage_reprt_policy
					,A.api_sport_at	                  =  B.api_sport_at
					,A.api_sport_ty	                  =  B.api_sport_ty
					,A.user_mnl_suply_at	            =  B.user_mnl_suply_at
					,A.user_mnl_info_at	              =  B.user_mnl_info_at
					,A.user_mnl_info_input	          =  B.user_mnl_info_input
					,A.user_edc_sport_at	            =  B.user_edc_sport_at
					,A.user_edc_sport_input	          =  B.user_edc_sport_input
					,A.user_edc_info	                =  B.user_edc_info
					,A.visit_edc_sport_at	            =  B.visit_edc_sport_at
					,A.visit_tchnlgy_sport_at	        =  B.visit_tchnlgy_sport_at
					,A.visit_else_tchnlgy_sport_at	  =  B.visit_else_tchnlgy_sport_at
					,A.cstmr_cnter_oper_at	          =  B.cstmr_cnter_oper_at
					,A.cstmr_cnter_oper_time	        =  B.cstmr_cnter_oper_time
					,A.i_othbc_std_sport_doc	        =  B.i_othbc_std_sport_doc
					,A.i_svc_direct_cnnc_ntwrk	      =  B.i_svc_direct_cnnc_ntwrk
					,A.i_virtl_ntwrk_sport	          =  B.i_virtl_ntwrk_sport
					,A.i_synchrn_sport_at	            =  B.i_synchrn_sport_at
					,A.i_sport_eqpmn_list	            =  B.i_sport_eqpmn_list
					,A.i_server_computer_svc	        =  B.i_server_computer_svc
					,A.i_strge_svc	                  =  B.i_strge_svc
					,A.i_ntwrk_svc	                  =  B.i_ntwrk_svc
					,A.i_scrty_svc	                  =  B.i_scrty_svc
					,A.i_manage_svc	                  =  B.i_manage_svc
					,A.i_etc_svc	                    =  B.i_etc_svc
					,A.p_secure_devlop	              =  B.p_secure_devlop
					,A.p_secure_dct_wdtb	            =  B.p_secure_dct_wdtb
					,A.p_sport_lang	                  =  B.p_sport_lang
					,A.p_sport_pltfom	                =  B.p_sport_pltfom
					,A.p_sport_container_ver	        =  B.p_sport_container_ver
					,A.p_sport_data_storge	          =  B.p_sport_data_storge
					,A.p_sub_tenancy_sport_at	        =  B.p_sub_tenancy_sport_at
					,A.p_dvlpr_unt_info	              =  B.p_dvlpr_unt_info
					,A.p_sdk_api_suply_at	            =  B.p_sdk_api_suply_at
					,A.p_test_debuging_sport_at	      =  B.p_test_debuging_sport_at
					,A.p_addon_svc_markplace_sport_at	=  B.p_addon_svc_markplace_sport_at
					,A.p_cisport_sport	              =  B.p_cisport_sport
					,A.p_loging_mntrng_sport	        =  B.p_loging_mntrng_sport
					,A.p_load_balancing_sport	        =  B.p_load_balancing_sport
					,A.s_user_svc_suply_mthd	        =  B.s_user_svc_suply_mthd
					,A.s_manage_svc_suply_mthd	      =  B.s_manage_svc_suply_mthd
					,A.s_infrstrctr_suply_mthd	      =  B.s_infrstrctr_suply_mthd
					,A.s_scrty_policy	                =  B.s_scrty_policy
					,A.s_data_encpt_at_mthd	          =  B.s_data_encpt_at_mthd
					,A.s_backup_recovry_policy	      =  B.s_backup_recovry_policy
					,A.s_user_crtfc_scrty_prtc_policy	=  B.s_user_crtfc_scrty_prtc_policy
					,A.s_multi_pltfom_sport_at	      =  B.s_multi_pltfom_sport_at
					,A.s_sport_opersysm_list	        =  B.s_sport_opersysm_list
					,A.s_sport_wbsr_list	            =  B.s_sport_wbsr_list
					,A.s_sport_mobile_pltfom_list	    =  B.s_sport_mobile_pltfom_list
					,A.s_open_std_sport_at	          =  B.s_open_std_sport_at
					,A.s_gvrn_frmwrk_sport_at	        =  B.s_gvrn_frmwrk_sport_at
					,A.s_open_sourc_sw_at	            =  B.s_open_sourc_sw_at
					,A.s_paasta_at	                  =  B.s_paasta_at
					,A.s_sourc_othbc_at	              =  B.s_sourc_othbc_at
					,A.s_api_access_sport_at	        =  B.s_api_access_sport_at
					,A.s_db_migration_sport_at	      =  B.s_db_migration_sport_at
					,A.s_extrl_application_sport_at	  =  B.s_extrl_application_sport_at
					,A.s_sub_tenancy_sport_at	        =  B.s_sub_tenancy_sport_at
					,A.s_cstmzng_posbl_at	            =  B.s_cstmzng_posbl_at
					,A.s_devlop_sport_etc	            =  B.s_devlop_sport_etc
					,A.c_spclty_realm	                =  B.c_spclty_realm
					,A.c_indc_whole	                  =  B.c_indc_whole
					,A.c_setup_mgr	                  =  B.c_setup_mgr
					,A.c_hold_qualf	                  =  B.c_hold_qualf
					,A.c_hold_tchnlgy	                =  B.c_hold_tchnlgy
					,A.c_infrstrctr	                  =  B.c_infrstrctr
					,A.c_infrstrctr_etc	              =  B.c_infrstrctr_etc
					,A.c_pltfom	                      =  B.c_pltfom
					,A.c_pltfom_etc	                  =  B.c_pltfom_etc
					,A.c_prjct_exprnc	                =  B.c_prjct_exprnc
					,A.c_cnsl_relm	                  =  B.c_cnsl_relm
					,A.c_cnsl_relm_etc	              =  B.c_cnsl_relm_etc
					,A.c_cnsl_scope	                  =  B.c_cnsl_scope
					,A.c_detail_svc	                  =  B.c_detail_svc
					,A.c_exc_pd	                      =  B.c_exc_pd
					,A.c_exc_pd_etc	                  =  B.c_exc_pd_etc
					,A.c_exc_area	                    =  B.c_exc_area
					,A.c_beffat_cnsl_at	              =  B.c_beffat_cnsl_at
					,A.c_cnsl_pc	                    =  B.c_cnsl_pc
					,A.entr_date	                    =  B.entr_date
					,A.user_id	                      =  B.user_id
					,A.save_step	                    =  B.save_step
					,A.goods_entr_date	              =  B.goods_entr_date
					,A.goods_use	                    =  B.goods_use
					,A.asis	                          =  B.asis
					,A.svc_charger_cttpc	            =  B.svc_charger_cttpc
					,A.svc_charger_mbtl_num	          =  B.svc_charger_mbtl_num
					,A.goods_spec1	                  =  B.goods_spec1
					,A.goods_spec6	                  =  B.goods_spec6
					,A.goods_spec7	                  =  B.goods_spec7
					,A.goods_spec8	                  =  B.goods_spec8
					,A.goods_spec14	                  =  B.goods_spec14
					,A.goods_spec15	                  =  B.goods_spec15
					,A.goods_spec17	                  =  B.goods_spec17
					,A.goods_spec18	                  =  B.goods_spec18
					,A.goods_spec19	                  =  B.goods_spec19
					,A.goods_spec23	                  =  B.goods_spec23
					,A.goods_spec24	                  =  B.goods_spec24
					,A.goods_spec25	                  =  B.goods_spec25
					,A.goods_spec30	                  =  B.goods_spec30
					,A.goods_spec35	                  =  B.goods_spec35
					,A.goods_spec37	                  =  B.goods_spec37
					,A.goods_spec38	                  =  B.goods_spec38
					,A.goods_spec41	                  =  B.goods_spec41
					,A.goods_spec43	                  =  B.goods_spec43
					,A.goods_spec44	                  =  B.goods_spec44
					,A.goods_spec48	                  =  B.goods_spec48
					,A.goods_spec49	                  =  B.goods_spec49
					,A.goods_spec50	                  =  B.goods_spec50
					,A.goods_spec51	                  =  B.goods_spec51
					,A.goods_spec52	                  =  B.goods_spec52
					,A.goods_spec53	                  =  B.goods_spec53
					,A.goods_spec54	                  =  B.goods_spec54
					,A.goods_spec55	                  =  B.goods_spec55
					,A.goods_spec56	                  =  B.goods_spec56
					,A.goods_spec57	                  =  B.goods_spec57
					,A.goods_spec58	                  =  B.goods_spec58
					,A.goods_spec59	                  =  B.goods_spec59
					,A.goods_spec60	                  =  B.goods_spec60
					,A.goods_spec61	                  =  B.goods_spec61
					,A.goods_spec64	                  =  B.goods_spec64
					,A.goods_spec65	                  =  B.goods_spec65
					,A.goods_spec66	                  =  B.goods_spec66
					,A.goods_spec67	                  =  B.goods_spec67
					,A.goods_spec68	                  =  B.goods_spec68
					,A.goods_spec69	                  =  B.goods_spec69
					,A.goods_spec70	                  =  B.goods_spec70
					,A.goods_spec71	                  =  B.goods_spec71
					,A.goods_spec72	                  =  B.goods_spec72
					,A.goods_spec73	                  =  B.goods_spec73
					,A.goods_spec74	                  =  B.goods_spec74
					,A.goods_spec75	                  =  B.goods_spec75
					,A.goods_spec76	                  =  B.goods_spec76
					,A.goods_spec5	                  =  B.goods_spec5
					,A.goods_spec4	                  =  B.goods_spec4
					,A.goods_spec10	                  =  B.goods_spec10
					,A.goods_spec26	                  =  B.goods_spec26
					,A.goods_spec22	                  =  B.goods_spec22
					,A.goods_spec21	                  =  B.goods_spec21
					,A.goods_spec29	                  =  B.goods_spec29
					,A.goods_spec2	                  =  B.goods_spec2
					,A.goods_spec31                   =  B.goods_spec31              					                    
    </select>

    <select id="updateTstGoodMarkIApply" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodMarkIApply */
		MERGE
		INTO
		    TST_GOOD_MARK_I A
		USING
		    (
		        SELECT
		            *
		        FROM
		            TST_GOOD_MARK_I_TMP b
		         WHERE b.goods_code = #{goodsCode}
		    ) B ON (
		           A.goods_code = B.goods_code
		    )
		    WHEN MATCHED THEN
		        UPDATE
		        SET
							A.goods_code 	= B.goods_code
							,A.mark_cd 		= B.mark_cd
    </select>
    <select id="updateTstGoodMetaIApply" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodMetaIApply */
		MERGE
		INTO
		    TST_GOOD_META_I A
		USING
		    (
		        SELECT
		            *
		        FROM
		            TST_GOOD_META_I_TMP b
		         WHERE b.goods_code = #{goodsCode}
		    ) B ON (
		           A.goods_code = B.goods_code
		    )
		    WHEN MATCHED THEN
		        UPDATE
		        SET
					A.goods_code 	= B.goods_code
					,A.lang_cd 		= B.lang_cd
					,A.group_cd 	= B.group_cd
					,A.indvdlz_cd 	= B.indvdlz_cd
					,A.meta_etc_cn	= B.meta_etc_cn
    </select>
    <select id="updateTstCtfcAtchIApply" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstCtfcAtchIApply */
		MERGE
		INTO
		    TST_CTFC_ATCH_I A
		USING
		    (
		        SELECT
		            *
		        FROM
		            TST_CTFC_ATCH_I_TMP b
		         WHERE b.goods_code = #{goodsCode}
		    ) B ON (
		           A.goods_code = B.goods_code
		    )
		    WHEN MATCHED THEN
		        UPDATE
		        SET
					A.goods_code 			= B.goods_code
					,A.crtfc_se_cd 			= B.crtfc_se_cd
					,A.crtfc_se_file_seq 	= B.crtfc_se_file_seq
    </select>
    <select id="updateTstGoodCateIApply" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodCateIApply */
		MERGE
		INTO
		    TST_GOOD_CATE_I A
		USING
		    (
		        SELECT
		            *
		        FROM
		            TST_GOOD_CATE_I_TMP b
		         WHERE b.goods_code = #{goodsCode}
		    ) B ON (
		           A.goods_code = B.goods_code
		    )
		    WHEN MATCHED THEN
		        UPDATE
		        SET
					A.goods_code 	= B.goods_code
					,A.ctgry_code	= B.ctgry_code
    </select>

    <select id="updateTstGoodTagIApply" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.updateTstGoodTagIApply */
		MERGE
		INTO
		    TST_GOOD_TAG_I A
		USING
		    (
		        SELECT
		            *
		        FROM
		            TST_GOOD_TAG_I_TMP b
		         WHERE b.goods_code = #{goodsCode}
		    ) B ON (
		           A.goods_code = B.goods_code
		    )
		    WHEN MATCHED THEN
		        UPDATE
		        SET
					A.goods_code 	= B.goods_code
					,A.goods_tag_nm = B.goods_tag_nm    
	</select>


    <select id="goodsStatusTmp" parameterType="goodsVO" resultType="Integer">
    
    /*  _goodsManage.goodsStatusTmp */
    
	    SELECT COUNT(GOODS_CODE)
	      FROM TST_GOOD_INFO_I_TMP
	     WHERE MNGR_DELETE_AT  = 'N' 
	       AND GOODS_ACTVTY_AT = 'Y'
	       AND GOODS_CODE         = #{goodsCode}
	       
    </select>

	<!--
     * SQL 명      : _goodsManage.chngHistInsert
     * 기능(설명)  : 서비스 수정이력 insert
     * 작   성   자  : (주)엔키소프트
     * 작   성   일  : 2016-01-19
    -->
    <insert id="chngHistInsert" parameterType="goodsVO">
    
    /* _goodsManage.chngHistInsert */
    
    INSERT INTO TST_GOOD_CHNG_H (GOODS_CODE, GOODS_HIST_SN, CHANGER_ID, CHANGE_DT, GOODS_CHANGE_CN_CD)

        SELECT #{goodsCode}
             , (SELECT NVL(MAX(GOODS_HIST_SN), 0) FROM TST_GOOD_CHNG_H WHERE GOODS_CODE = #{goodsCode}) + ROWNUM
             , #{updtId}
             , SYSDATETIME
             , GC
          FROM (
                 SELECT 1001 AS GC
                   FROM DB_ROOT
                  WHERE ( SELECT NVL(GOODS_CTGRY_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 0, 1 )
                     != ( SELECT NVL(GOODS_CTGRY_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 1, 1 )
                 UNION ALL
                 SELECT 1002 AS GC
                   FROM DB_ROOT
                  WHERE ( SELECT NVL(GOODS_IMAGE_FILE_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 0, 1 )
                     != ( SELECT NVL(GOODS_IMAGE_FILE_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 1, 1 )
                 UNION ALL
                 SELECT 1003 AS GC
                   FROM DB_ROOT
                  WHERE ( SELECT NVL(GOODS_MARK_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 0, 1 )
                     != ( SELECT NVL(GOODS_MARK_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 1, 1 )
                 UNION ALL
                 SELECT 1004 AS GC
                   FROM DB_ROOT
                  WHERE ( SELECT NVL(GOODS_CRTFC_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 0, 1 )
                     != ( SELECT NVL(GOODS_CRTFC_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 1, 1 )
                 UNION ALL
                 SELECT 1005 AS GC
                   FROM DB_ROOT
                  WHERE ( SELECT NVL(GOODS_TAG_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 0, 1 )
                     != ( SELECT NVL(GOODS_TAG_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 1, 1 )
                 UNION ALL
                 SELECT 1006 AS GC
                   FROM DB_ROOT
                  WHERE ( SELECT NVL(GOODS_MNL_FILE_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 0, 1 )
                     != ( SELECT NVL(GOODS_MNL_FILE_SET,'') FROM TST_GOOD_CHNG_L WHERE CHANGE_LOG_SE = 'U' AND GOODS_REGIST_STTUS &gt;= 1002 AND GOODS_CODE = #{goodsCode} ORDER BY CHANGE_LOG_SEQ DESC LIMIT 1, 1 )
               )

    </insert>

    <insert id="chngHistCodeInsert" parameterType="goodsVO">
    /*  _goodsManage.chngHistInsertCode */
    INSERT INTO
        TST_GOOD_CHNG_H  (GOODS_CODE, GOODS_HIST_SN, CHANGER_ID, CHANGE_DT, GOODS_CHANGE_CN_CD)
                 VALUES  (#{goodsCode}, (SELECT NVL(MAX(GOODS_HIST_SN), 0) + 1 FROM TST_GOOD_CHNG_H WHERE GOODS_CODE = #{goodsCode}), #{updtId}, SYSDATETIME, #{goodsChangeCode})
    </insert>

    <select id="goodsChngHist" parameterType="goodsVO" resultType="map">
    /*  _goodsManage.goodsChngHist */
         SELECT GOODS_CODE, CHANGER_ID,
			  (SELECT OP_DEPT.DEPT_NM FROM OP_MNGR, OP_DEPT
			    WHERE OP_MNGR.DEPT_CODE = OP_DEPT.DEPT_CODE
			      AND OP_MNGR.MNGR_ID = CHANGER_ID) AS DEPTNM,
			  ( SELECT USER_NM FROM
			     (SELECT USER_NM FROM OP_USER WHERE USER_ID = CHANGER_ID
			      UNION ALL
			      SELECT MNGR_NM FROM OP_MNGR WHERE MNGR_ID = CHANGER_ID)
			    LIMIT 1 ) AS USERNM,
			(SELECT INDVDLZ_CD_NM FROM OP_CODE_INDVDLZ WHERE GROUP_CD = 1010 AND INDVDLZ_CD = GOODS_CHANGE_CN_CD) AS CHANGE_NM,
            CHANGE_DT
        FROM TST_GOOD_CHNG_H
        WHERE GOODS_CODE = #{goodsCode}
        ORDER BY CHANGE_DT DESC
    </select>

    <select id="techCategory" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.techCategory */
                SELECT  COUNT(CTGRY_CODE)
                  FROM  TST_CATE_MGMT_M
                  WHERE CTGRY_CODE IN
                  <foreach collection="ctgryCds" item="item" index="index" separator="," open=" (" close=") ">
                    TRIM(#{item})
                  </foreach>
             START WITH PARNTS_CTGRY_CODE = #{techCtgry}
        CONNECT BY PRIOR CTGRY_CODE = PARNTS_CTGRY_CODE
    </select>

    <select id="cloudCategory" parameterType="goodsVO" resultType="Integer">
    /*  _goodsManage.cloudCategory */
                SELECT  COUNT(CTGRY_CODE)
                  FROM  TST_CATE_MGMT_M
                  WHERE CTGRY_CODE IN
                  <foreach collection="ctgryCds" item="item" index="index" separator="," open=" (" close=") ">
                    TRIM(#{item})
                  </foreach>
             START WITH PARNTS_CTGRY_CODE = #{cloudCtgry}
        CONNECT BY PRIOR CTGRY_CODE = PARNTS_CTGRY_CODE
    </select>
    
    <!-- 모니터링 서비스정보 조회 -->
    <select id="goodsMonitorList" parameterType="goodsVO" resultType="goodsVO">
    	/* _goodsManage.goodsMonitorList */
		SELECT A.GOODS_CODE AS goodsCode
		     , A.LANG_CODE AS langCode
		     , GOODS_NM AS goodsNm
		     , GOODS_PC AS goodsPc
		     , (SELECT LANG_NM FROM TCO_SVC_LANG_C WHERE LANG_CODE = A.LANG_CODE) AS langNm
		     , (SELECT INDVDLZ_CD_NM FROM OP_CODE_INDVDLZ WHERE LANG_CODE = A.LANG_CODE AND GROUP_CD=1007 AND INDVDLZ_CD = A.SLE_MTHD_CD) AS sleMthdNm
		     , A.GOODS_REGIST_STTUS AS goodsRegistSttus
		     , (SELECT INDVDLZ_CD_NM FROM OP_CODE_INDVDLZ WHERE LANG_CODE = '00' AND GROUP_CD=1008 AND INDVDLZ_CD = A.GOODS_REGIST_STTUS) AS goodsRegistSttusNm
		     , (SELECT LANG_STORE_NM FROM TUM_SVC_STOR_I WHERE USER_ID = A.USER_ID AND LANG_CODE = A.LANG_CODE) AS langStoreNm
		     , (SELECT DECODE(NATION_CODE, '410', '국내','해외') FROM OP_USER WHERE USER_ID = A.USER_ID) AS nationGrp
		     , (SELECT (CASE WHEN USER_TY_CD = 1002 THEN '개인' WHEN USER_TY_CD = 2002 THEN '기업' WHEN USER_TY_CD = 3002 THEN '정부' END) FROM OP_USER WHERE USER_ID = A.USER_ID) AS userTyGrp
		     , USER_ID AS userId
		     , TO_CHAR(REGIST_DT,'YYYY.MM.DD HH24:mm') AS registDt
		     , (SELECT EXMNT_CONFM_DT FROM TST_EXMN_CNFM_H WHERE GOODS_CODE = A.GOODS_CODE AND (CASE WHEN A.GOODS_REGIST_STTUS >= 1006 THEN EXMNT_CONFM_CD IN (1006, 1007) ELSE EXMNT_CONFM_CD = A.GOODS_REGIST_STTUS END) ORDER BY EXMNT_CONFM_DT DESC LIMIT 1) AS exmntConfmDate
		     , (SELECT COUNT(GOODS_CODE) FROM TST_EXMN_CNFM_H WHERE EXMNT_CONFM_CD IN (1006,1007) AND GOODS_CODE = A.GOODS_CODE) AS confmCnt
		     , TO_CHAR(A.CONFM_DT,'YYYY.MM.DD HH24:mm') AS confmDt
		     , A.GOODS_MONITOR_URL AS goodsMonitorUrl
		  FROM TST_GOOD_INFO_I A
		 WHERE MNGR_DELETE_AT='N' AND GOODS_ACTVTY_AT='Y'
		   AND GOODS_REGIST_STTUS = #{goodsRegistSttus}
		   AND A.GOODS_MONITOR_URL IS NOT NULL
		   AND TRIM(A.GOODS_MONITOR_URL) != ''
		   AND A.LANG_CODE = '00'
		 ORDER BY exmntConfmDate DESC NULLS LAST, REGIST_DT DESC
    </select>
    
    <!-- 모니터링 배치 정보 등록 -->
    <insert id="goodsMonitorInsertAction" parameterType="goodsVO">
    	/* _goodsManage.goodsMonitorInsertAction */
        INSERT INTO TST_GOOD_MONITOR_I 
		(
			   GOODS_CODE
		     , GOODS_MONITOR_DAY
		     , GOODS_MONITOR_TIME
		     , GOODS_SERVICE_STATE
		     , USER_ID
		     , REGIST_DT
		) 
		VALUES
		(
		       #{goodsCode}
		     , #{goodsMonitorDay}
		     , #{goodsMonitorTime}
		     , #{goodsServiceState}
		     , #{userId}
		     , SYS_DATETIME
		)
    </insert>
    
    <!-- 서비스 모니터링 내역 카운트 -->
    <select id="goodsMonitorHistoryCount" parameterType="map" resultType="int">
    	/* _goodsManage.goodsMonitorHistoryCount */
        SELECT COUNT(A.GOODS_CODE) AS totalCount
          FROM TST_GOOD_MONITOR_I A LEFT OUTER JOIN TST_GOOD_INFO_I B ON A.GOODS_CODE = B.GOODS_CODE
         WHERE 1 = 1
        <if test="q_searchKey != null  and q_searchKey != ''">
			<choose>
                <!-- 서비스명 -->
                <when test="q_searchKey == '1001'">
                    AND B.GOODS_NM LIKE  '%' || #{q_searchVal} || '%'
                </when>
                <!-- 스토어명 -->
                <when test="q_searchKey == '1002'">
                    AND A.USER_ID IN (SELECT USER_ID FROM TUM_SVC_STOR_I WHERE LANG_STORE_NM LIKE '%' || #{q_searchVal} || '%')
                </when>
                <!-- 판매자ID -->
                <when test="q_searchKey == '1003'">
                    AND A.USER_ID = #{q_searchVal}
                </when>
                <!-- 서비스코드 -->
                <when test="q_searchKey == '1004'">
                    AND A.GOODS_CODE = #{q_searchVal}
                </when>
            </choose>
        </if>
		<if test='q_beginDate != null and q_beginDate != ""'>
          	   AND GOODS_MONITOR_DAY BETWEEN TO_DATE(#{q_beginDate}, 'YYYY-MM-DD') AND TO_DATE(#{q_endDate}, 'YYYY-MM-DD') + 1
		</if>
    </select>
    
    <!-- 서비스 모니터링 내역 -->
    <select id="goodsMonitorHistory" parameterType="map" resultType="goodsVO">
    	/* _goodsManage.goodsMonitorHistory */
       	SELECT Y.* FROM (
           	SELECT ROWNUM NUM, X.* 
           	  FROM (
				SELECT A.GOODS_CODE AS goodsCode
				     , (SELECT GOODS_NM FROM TST_GOOD_INFO_I WHERE GOODS_CODE = A.GOODS_CODE) AS goodsNm
				     , A.GOODS_MONITOR_DAY AS goodsMonitorDay
				     , A.GOODS_MONITOR_TIME AS goodsMonitorTime
				     , A.GOODS_SERVICE_STATE AS goodsServiceState
				     , (SELECT LANG_STORE_NM FROM TUM_SVC_STOR_I WHERE USER_ID = A.USER_ID AND LANG_CODE = '00') AS langStoreNm
				     , A.USER_ID AS userId
				     , A.REGIST_DT AS registDt
				  FROM TST_GOOD_MONITOR_I A LEFT OUTER JOIN TST_GOOD_INFO_I B ON A.GOODS_CODE = B.GOODS_CODE
				 WHERE 1 = 1
				<if test="q_searchKey != null  and q_searchKey != ''">
		            <choose>
		                <!-- 서비스명 -->
		                <when test="q_searchKey == '1001'">
		                    AND B.GOODS_NM LIKE  '%' || #{q_searchVal} || '%'
		                </when>
		                <!-- 스토어명 -->
		                <when test="q_searchKey == '1002'">
		                    AND A.USER_ID IN (SELECT USER_ID FROM TUM_SVC_STOR_I WHERE LANG_STORE_NM LIKE '%' || #{q_searchVal} || '%')
		                </when>
		                <!-- 판매자ID -->
		                <when test="q_searchKey == '1003'">
		                    AND A.USER_ID = #{q_searchVal}
		                </when>
		                <!-- 서비스코드 -->
		                <when test="q_searchKey == '1004'">
		                    AND A.GOODS_CODE = #{q_searchVal}
		                </when>
		            </choose>
		        </if>
				<if test='q_beginDate != null and q_beginDate != ""'>
            	   AND A.GOODS_MONITOR_DAY BETWEEN TO_DATE(#{q_beginDate}, 'YYYY-MM-DD') AND TO_DATE(#{q_endDate}, 'YYYY-MM-DD') + 1
				</if>
				 ORDER BY goodsNm ASC, A.GOODS_MONITOR_DAY DESC, A.GOODS_MONITOR_TIME DESC
             ) X
            WHERE ROWNUM &lt;= #{pagingEndNum}
        ) Y
        WHERE NUM &gt;= #{pagingStartNum}
    </select>

  	<!-- 20161208 조달청서비스정보리스트 -->  
  	<resultMap id="goodsPPSResult" type="goodsPPSVo">
    	<collection property="goodsPpsList" column="" ofType="map" select="goodsPpsList"/>
    </resultMap>    
    
   <!-- 20161208조달청서비스정보리스트 -->   
    <select id="goodsPpsList" parameterType="map" resultMap="goodsPPSResult">
   		/*_goodsManage.goodsPpsList*/
       SELECT Y.* 
         FROM (SELECT  ROWNUM NUM
                     , X.* 
                 FROM  (SELECT  CNTR_UNUM  AS cntrUnum
                              , CNTR_NUM   AS cntrNum
                              , LINE_NUM   AS lineNum
                              , ITEM_NAME  AS itemName
                              , UNIT_PRIC  AS unitPric
                              , MANU_NAME  AS manuName
                              , ITEM_ENTR_DATE AS itemEntrDate
                              , GOODS_CODE AS goodsCode 
                          FROM  TCN_PPS_GOOD_INFO_L
                         WHERE  ITEM_USE ='Y'
                           AND  ITEM_DELETE ='N'
                           AND  ITEM_DEALSTOP ='N'
                           AND  ITEM_ORDER_BLOCK ='N'
                           AND  UNIT_PRIC > 0
                           <include refid="searchPppWhere"/>
                         ORDER  BY ITEM_ENTR_DATE DESC  //등록일순
                       ) X
                WHERE  ROWNUM &lt;= #{pagingEndNum}
              ) Y
        WHERE NUM &gt;= #{pagingStartNum}

    </select>
    
   <!-- 20161208 조달청서비스정보리스트 page count --> 
    <select id="goodsPpsCount" parameterType="map" resultType="int">
    /*_goodsManage.goodsPpsCount*/
        SELECT	COUNT(A.CNTR_UNUM) AS totalCount
          FROM	TCN_PPS_GOOD_INFO_L A
		 WHERE 	ITEM_USE ='Y'
		   AND  ITEM_DELETE ='N'
		   AND  ITEM_DEALSTOP ='N'
		   AND  ITEM_ORDER_BLOCK ='N'
		   AND  UNIT_PRIC > 0
        <include refid="searchPppWhere"/>
    </select>
 
    <!-- 20161208 조달청서비스정보 서비스코드(GOODS_CODE) UPDATE 위한 COUNT-->
    <select id="goodsCdUpCount" parameterType="goodsPPSVo" resultType="Integer">
    /* _goodsManage.goodsCdUpCount */
        SELECT 	COUNT(CNTR_NUM)
	      FROM 	TCN_PPS_GOOD_INFO_L
 		WHERE   CNTR_NUM = #{cntrNum}
	      AND   LINE_NUM = #{lineNum}
    </select>

   <!-- 20161208 조달청서비스정보 서비스코드(GOODS_CODE) UPDATE -->		
    <update id="goodsCdUpdate" parameterType="goodsPPSVo">
    /*_goodsManage.goodsCdUpdate*/
        UPDATE 	TCN_PPS_GOOD_INFO_L SET
            <choose>
                <when test="goodsCode == 'ISNULL'">
                GOODS_CODE = NULL
                </when>
                <otherwise>
          		GOODS_CODE = TRIM(#{goodsCode})
                </otherwise>
            </choose> 
 		WHERE   CNTR_NUM = #{cntrNum}
	      AND   LINE_NUM = #{lineNum}
    </update>

	
	 <select id="goodsChngRegHist" parameterType="goodsVO" resultType="map">
	 /*_goodsManage.goodsChngRegHist*/
  	  SELECT GOODS_CODE,
        	  EXMNT_CONFM_CD,        	  
        	  MNGR_ID,
        	  EXMNT_CONFM_DT AS EXMNT_CONFM_DT ,
        	  RETURN_RESN,
        	  GOODS_CHNG_FILE,
        	  GOODS_CHNG_PC,
        	  GOODS_BEFORE_PC,
        	  REQU_ID,
        	  REQU_DT  AS REQU_DT
        FROM TST_EXMN_CNFM_H
        WHERE GOODS_CODE =  #{goodsCode}
         AND  EXMNT_CONFM_CD in ('1007', '1009') AND GOODS_CHNG_FILE IS NOT NULL
    </select>
    
	<select id="goodsSpecHist" parameterType="goodsVO" resultType="GoodsSpecVO">
    /*  _goodsManage.goodsSpecHist */
    	SELECT  (SELECT goods_sumry 
    	           FROM tst_good_info_i 
    	          WHERE goods_code = A.goods_code)	AS goodsSpec1
    	      , (SELECT svc_pc 
    	           FROM tst_good_info_i 
    	          WHERE goods_code  = A.goods_code)	AS goodsSpec2
    	      , (SELECT mumm_cntrctpd 
    	           FROM tst_good_info_i 
    	          WHERE goods_code  = A.goods_code)	AS goodsSpec3
    	      , A.GOODS_ENTR_DATE	AS goodsEntrDate
    	      , (SELECT user_id 
    	          FROM tst_good_info_i 
    	         WHERE goods_code = A.goods_code)		AS userId
    	      , -1    						AS fileSeq
        FROM  TST_GOOD_SPEC_DESCRIBE_I A <!-- TST_GOOD_SPEC_I -->
        WHERE A.GOODS_CODE = #{goodsCode}
    </select>

	<insert id="overseasProductsInsertUpdate" parameterType="map">
	/*_goodsManage.overseasProductsInsertUpdate*/
		INSERT INTO tst_forn_goods_i (
			forn_goods_nm,
			forn_cmpny_nm,
			forn_goods_sumry,
			forn_knd_nm,
			forn_note,
			forn_link_url,
			form_seq,
			create_dt,
			update_dt
		)
		VALUES (
			#{searchResultTitle},
			#{searchResultSupplier},
			#{searchResultExcerpt},
			#{searchResultMetadataItem1},
			#{searchResultMetadataItem2},
			#{searchResultLink},
			#{searchResultSeq},
			SYSDATETIME,
			SYSDATETIME
		)
		ON DUPLICATE KEY UPDATE
			forn_goods_nm=#{searchResultTitle},
			forn_cmpny_nm=#{searchResultSupplier},
			forn_goods_sumry=#{searchResultExcerpt},
			forn_knd_nm=#{searchResultMetadataItem1},
			forn_note=#{searchResultMetadataItem2},
			forn_link_url=#{searchResultLink},
			update_dt=SYSDATETIME
	</insert>
    
	<sql id="searchWhereRequest">
		 <!-- 카테고리 -->
		<if test="q_goodsTyCd != null  and  q_goodsTyCd != ''">
		<choose>
	       <when test="q_ctgryCd1 != null  and q_ctgryCd1 != ''">
	           AND A.GOODS_CODE IN (SELECT GOODS_CODE FROM TST_GOOD_CATE_I 
	                               WHERE CTGRY_CODE IN (SELECT CTGRY_CODE
	                                                      FROM TST_CATE_MGMT_M
	                                                    START WITH PARNTS_CTGRY_CODE = #{q_ctgryCd1}
	                                                    CONNECT BY PRIOR CTGRY_CODE = PARNTS_CTGRY_CODE)
	                              UNION
	                              SELECT GOODS_CODE FROM TST_GOOD_CATE_I WHERE CTGRY_CODE = #{q_ctgryCd1})
	       </when>
	       <otherwise>
	           AND A.GOODS_CODE IN
	           ( SELECT  A.GOODS_CODE
	               FROM  TST_GOOD_CATE_I A, TST_CATE_MGMT_M B
	              WHERE  A.CTGRY_CODE = B.CTGRY_CODE
	                AND  B.CTGRY_CL_CD = #{q_goodsTyCd}
	           GROUP BY  A.GOODS_CODE )
	       </otherwise>
	       </choose>
	   </if>

		<!-- 신청유형 -->
		<if test='q_goodsRequstAt != null and q_goodsRequstAt != ""'>
			<!--AND REQUST_PROCESS_AT =#{q_goodsRequstAt} -->
			 <choose>
				<when test='(q_goodsRequstAt == "N" or q_goodsRequstAt == "M" )'>
					AND REQUST_PROCESS_AT =#{q_goodsRequstAt}
				</when>
	       		<otherwise>
	       			AND (REQUST_PROCESS_AT = #{q_goodsRequstAt} OR (GOODS_CHNG_FILE  &gt; 0 AND EXMNT_CONFM_CD = 1007))
	       		</otherwise>
	       </choose>	
		</if>

		<!-- 신청일 -->
		<if test='q_beginDate != null and q_beginDate != ""'>
			AND  A.REQU_DT BETWEEN TO_DATE(#{q_beginDate}, 'YYYY-MM-DD') AND TO_DATE(#{q_endDate}, 'YYYY-MM-DD') + 1
		</if>
		
		<!-- 승인일 -->
		<if test='q_beginConfmDate != null and q_beginConfmDate != ""'>
			AND  A.EXMNT_CONFM_DT BETWEEN TO_DATE(#{q_beginConfmDate}, 'YYYY-MM-DD') AND TO_DATE(#{q_endConfmDate}, 'YYYY-MM-DD') + 1
		</if>
		
		<!-- 상세검색 -->
	   <if test="q_searchKey != null  and q_searchKey != ''">
		<choose>
			<!-- 서비스명 -->
			<when test="q_searchKey == '1001'">
				AND GOODS_NM LIKE  '%' || #{q_searchVal} || '%'
			</when>
			<!-- 신청기업명  -->
			<when test="q_searchKey == '1003'">
				AND S.LANG_STORE_NM LIKE  '%' || #{q_searchVal} || '%'
			</when>
			<!-- 신청자명 -->
			<when test="q_searchKey == '1004'">
				AND U.USER_NM LIKE  '%' || #{q_searchVal} || '%'
			</when>
		</choose>
	    </if>
	</sql>

	<select id="requestHisoryCount" parameterType="map" resultType="int">
	  /* _goodsManage.requestHisoryCount */
		SELECT COUNT(A.GOODS_CODE) AS totalCount
		  FROM TST_EXMN_CNFM_H A
		  LEFT JOIN TST_GOOD_INFO_I B ON A.GOODS_CODE = B.GOODS_CODE
		  LEFT JOIN TUM_SVC_STOR_I	S ON S.USER_ID = B.USER_ID  AND S.LANG_CODE = B.LANG_CODE
		  LEFT JOIN OP_USER	U  ON U.USER_ID = B.USER_ID
		 WHERE ( REQUST_PROCESS_AT IS NOT NULL OR  (GOODS_CHNG_FILE  &gt; 0 AND EXMNT_CONFM_CD = 1007))
		 <include refid="searchWhereRequest"/>
	</select>

	<select id="requestHisory" parameterType="goodsVO" resultType="goodsVO">
	  /* _goodsManage.requestHisory */
		SELECT Y.* FROM (
			SELECT ROWNUM NUM, X.* FROM (
				SELECT    A.GOODS_CODE				as goodsCode			/*서비스 코드*/
						, B.goods_knd_cd AS goodsKndCd
			            , DECODE(B.goods_knd_cd,'1001','Paas','1002','Saas','1003','Iaas','1004','SCS') AS goodsKndNm
						, EXMNT_CONFM_HIST_SN		as exmntConfmHistSn		/*승인인력코드*/
						, B.GOODS_NM 				as goodsNm				/*서비스 명*/
						, A.REQUST_SE				as requstSe				/*변경요청 코드*/ 
						, C.INDVDLZ_CD_NM			as requstSeNm			/*변경요청구분명*/
						, A.REQU_ID					as registId				/*요청 날짜*/
						, TO_CHAR(A.REQU_DT ,'YYYY.MM.DD HH24:mi')				as registDt				/*요청 날짜*/
						, TO_CHAR(EXMNT_CONFM_DT ,'YYYY.MM.DD HH24:mi')			as exmntConfmDt			/*승인 날짜*/
						, TO_CHAR(EXMNT_DT ,'YYYY.MM.DD HH24:mi')				as exmntDt				/*검토 날짜*/
						, EXMNT_ID					as exmntId				/*검토인*/
						, MNGR_ID					as mngrId				/*승인아이디*/
						, (CASE WHEN A.REQUST_SE = '1001' THEN C1.INDVDLZ_CD_NM 
							   WHEN A.REQUST_SE = '1002' THEN  C2.INDVDLZ_CD_NM 
							   WHEN A.REQUST_SE = '1003' THEN  C3.INDVDLZ_CD_NM END) as requstResnCn	/*변경사유*/
						, A.REQUST_PROCESS_AT		as requstProcessAt				/*요청상태*/
						, DSPY_CNVRS_PREARNGE_DT	as dspyCnvrsPrearngeDt			/*전시전환예정일*/
						, GOODS_CHNG_FILE			as goodsChngSeq					/*사유서 파일*/
						, EXMNT_CONFM_CD			as exmntConfmCd					/*검토승인콛*/
						, S.LANG_STORE_NM AS langStoreNm
						, U.USER_NM AS goodsChargerNm
				  FROM TST_EXMN_CNFM_H A
				  LEFT JOIN TST_GOOD_INFO_I B ON A.GOODS_CODE = B.GOODS_CODE
				  LEFT JOIN TUM_SVC_STOR_I	S ON S.USER_ID = B.USER_ID    AND S.LANG_CODE = B.LANG_CODE
				  LEFT JOIN OP_USER	U ON U.USER_ID = A.REQU_ID
				  LEFT JOIN OP_CODE_INDVDLZ C ON C.LANG_CODE = '00' AND C.GROUP_CD=2047  AND  C.INDVDLZ_CD = A.REQUST_SE/*변경요청구분 */
				  LEFT JOIN OP_CODE_INDVDLZ C1 ON C1.LANG_CODE = '00' AND C1.GROUP_CD=2048  AND  A.REQUST_SE =1001 AND  C1.INDVDLZ_CD = A.REQUST_RESN /*전시요청사유*/
				  LEFT JOIN OP_CODE_INDVDLZ C2 ON C2.LANG_CODE = '00' AND C2.GROUP_CD=2049  AND  A.REQUST_SE =1002 AND  C2.INDVDLZ_CD = A.REQUST_RESN /*비전시요청사유*/
				  LEFT JOIN OP_CODE_INDVDLZ C3 ON C3.LANG_CODE = '00' AND C3.GROUP_CD=2050  AND  A.REQUST_SE =1003 AND  C3.INDVDLZ_CD = A.REQUST_RESN  /*삭제요청사유*/
				WHERE ( REQUST_PROCESS_AT IS NOT NULL OR (GOODS_CHNG_FILE  &gt; 0 AND EXMNT_CONFM_CD = 1007))
					  <include refid="searchWhereRequest"/>
				ORDER BY REQU_DT DESC
		  ) X
            WHERE ROWNUM &lt;= #{pagingEndNum}
        ) Y
        WHERE NUM &gt;= #{pagingStartNum}
    </select>
    
    <update id="updateReuestExmnAt" parameterType="goodsVO">
     /* _goodsManage.updateReuestExmnAt */
         UPDATE  TST_EXMN_CNFM_H
           SET  EXMNT_ID		= #{mngrId}	,
           	    EXMNT_DT		= SYS_DATETIME,
           	    REQUST_PROCESS_AT	= 'M',
           	    EXMNT_CONFM_CD		= 1004 
         WHERE GOODS_CODE			= #{goodsCode}
         	AND EXMNT_CONFM_HIST_SN = #{exmntConfmHistSn}
         	<!-- AND REQUST_PROCESS_AT = 'N' -->
    </update>
    
    <update id="updateReuestProcessAt" parameterType="goodsVO">
     /* _goodsManage.updateReuestAction */
         UPDATE  TST_EXMN_CNFM_H
           SET  MNGR_ID				= #{mngrId}	,
           	    EXMNT_CONFM_DT		= SYS_DATETIME,
           	    REQUST_PROCESS_AT	= 'Y',
           	    EXMNT_CONFM_CD		= 1007 
         WHERE GOODS_CODE			= #{goodsCode}
         	AND EXMNT_CONFM_HIST_SN = #{exmntConfmHistSn}
         		AND REQUST_PROCESS_AT = 'N'
    </update>
    
    <!-- 요청자 정보 -->
    <select id="requestUserInfo" parameterType="goodsVO" resultType="goodsVO">
        /* _goodsManage.requestUserInfo */
		SELECT    A.GOODS_CODE								as goodsCode
				, '00'										as langCode
				, A.USER_ID 								as userId
				, GOODS_CHARGER_NM							as goodsChargerNm
				, decrypt(GOODS_CHARGER_EMAIL, 'P008')		as goodsChargerEmail
				, decrypt(GOODS_CHARGER_MBTLNUM, 'P007')	as goodsChargerMbtlnum
				, B.USER_TY_CD				as userTyCd
		FROM TST_GOOD_INFO_I A
			LEFT JOIN OP_USER B ON A.USER_ID = B.USER_ID
		WHERE A.GOODS_CODE			= #{goodsCode}
        <!--   AND EXMNT_CONFM_HIST_SN   = #{exmntConfmHistSn} -->
     </select>
     
     
     <select id="goodsMailView" parameterType="String"  resultMap="goodsViewResult">
    /*_goodsManage.goodsMailView*/
         SELECT A.LANG_CODE
             , (SELECT LANG_NM FROM TCO_SVC_LANG_C WHERE LANG_CODE = A.LANG_CODE) AS langNm
             , A.GOODS_FILE_SEQ AS goodsFileSeq
             , A.GOODS_CODE
             , A.GOODS_NM AS goodsNm
             , A.GOODS_IMAGE_FILE_SEQ AS goodsImageFileSeq
             , USER_ID
             , A.GOODS_CHARGER_NM AS goodsChargerNm
             , DECRYPT(A.GOODS_CHARGER_EMAIL, 'P008') AS goodsChargerEmail
             , DECRYPT(A.GOODS_CHARGER_MBTLNUM, 'P007') AS goodsChargerMbtlnum
             , A.GOODS_SUMRY AS goodsSumry
          FROM TST_GOOD_INFO_I A
         WHERE A.GOODS_CODE = #{goodsCode}
    </select>
    
    <select id="storeLangNm" parameterType="String" resultType="goodsManageVO">
        /* _goodsManage.storeLangNm */
       SELECT LANG_CODE   AS langCode
            , LANG_NM     AS langNm
            , lang_eng_nm AS langEngNm
         FROM TCO_SVC_LANG_C 
        WHERE LANG_CODE = #{langCode}
    </select>

    <select id="goodsMetaPriceCode" parameterType="goodsVO" resultType="map">
    /*searchWhere.goodsMetaPriceCode*/
        SELECT INDVDLZ_CD    AS metaPriceCd
             , INDVDLZ_CD_NM AS metaPriceNm
          FROM OP_CODE_INDVDLZ
         WHERE LANG_CODE = #{langCode} 
           AND GROUP_CD = 2024
           AND USE_YN = 'Y'
      ORDER BY CD_SORT_NO
      
    </select>
    
    <select id="goodsMetaList" resultType="map">
    /* _goodsManage.goodsMetaList*/
    	SELECT A.GOODS_CODE AS goodsCode 
    	      , A.LANG_CD    AS langCd 
    	      , A.GROUP_CD   AS groupCd 
    	      , A.INDVDLZ_CD AS indvdlzCd 
    	      , (SELECT indvdlz_cd_nm /* 코드의 내용 */ 
    	           FROM op_code_indvdlz 
    	          WHERE goods_code = A.goods_code 
    	            AND lang_code  = A.lang_cd
    	            AND group_cd   = A.group_cd 
    	            AND indvdlz_cd = A.indvdlz_cd 
    	        ) AS indvdlzNm
    	      , A.META_ETC_CN AS metaEtcCn 
     	  FROM  TST_GOOD_META_I A
       WHERE  A.GOODS_CODE = #{goodsCode}
     	   AND  A.LANG_CD    = #{langCode}

    </select>
    
    <select id="goodsSpecDescribeInfo" parameterType="map" resultType="GoodsSpecVO">
    /* _goodsManage.goodsSpecDescribeInfo */
    	SELECT  AA.GOODS_CODE                     								                                      AS goodsCode                // 상품코드 
    				, AA.GOODS_NUM																																						AS goodsNum									// 상품순번
          	, A.GOODS_KND_CD                    								                                      AS goodsKndCd               // 상품종류코드(paas 1001 saas 1002 iaas 1003 SCS 1004)
          	, E.LANG_STORE_NM                   								                                      AS langStoreNm              // 공급업체명
          	, B.CNTR_NUM                        								                                      AS cntrNum                  // 계약번호-조달등록번호 
          	, C.BIZRNO                          								                                      AS bIZrNo                   // 사업자번호
          	, C.CMPNY_TELNO                     								                                      AS cmpnyTelNo               // 대표전화
          	, A.GOODS_CHARGER_NM                								                                      AS goodsChargerNm           // 담당자
          	, C.CMPNY_EMAIL                     								                                      AS cmpnyEmail               // 대표이메일
          	, A.GOODS_NM                        								                                      AS goodsNm                  // 서비스명
            , A.REGIST_DT                       								                                      AS registDt                 // 마켓등록일 
            , F.INDVDLZ_CD_NM                   								                                      AS indvdlzCdNm              // 서비스구분 
            , D.LANG_CTGRY_NM                   								                                      AS langCtgryNm              // 서비스종류                   
            /* 1. 회사 개요 */
<!--             //, AA.cmpny_nm                     AS cmpnyNm                  // 회사 명칭 -->         
            , E.LANG_STORE_NM                   								                                      AS cmpnyNm              		// 회사 명칭
            , AA.cmpny_fond_year                								                                      AS cmpnyFondYear            // 회사 설립년도
            , DECODE(AA.entrprs_se, '', null, AA.entrprs_se)																			    AS entrprsSe                // 기업 구분
            , oc2075.INDVDLZ_CD_NM              								                                      AS entrprsSeNm              // 기업 구분  명       

            , AA.cmpny_intrcn                   								                                      AS cmpnyIntrcn              // 회사 소개         
            , AA.bsns_realm                     								                                      AS bsnsRealm                // 사업 분야       
            , AA.main_refer                     								                                      AS mainRefer                // 주요 레퍼런스 (등록 서비스 기준)       

            /* 2. 서비스 개요 */
            , AA.svc_nm                         								                                      AS svcNm                    // 서비스 명칭 
            , AA.svc_dfn_sfe                    								                                      AS svcDfnSfe                // 서비스 정의 및 특징
            , AA.svc_expc_effect                								                                      AS svcExpcEffect            // 서비스 기대효과 
            , AA.svc_ty                         								                                      AS svcTy                    // 서비스 유형 
            , oc2076.INDVDLZ_CD_NM             									                                      AS svcTyNm                  // 서비스 유형 _ 명 * / 

            , DECODE(AA.svc_entrprs_suply_ty, '', null, AA.svc_entrprs_suply_ty)									    AS svcEntrprsSuplyTy        // 서비스 제공 기업의 공급 유형 
            , oc2055.INDVDLZ_CD_NM              								                                      AS svcEntrprsSuplyTyNm      // 서비스 제공 기업의 공급 유형 _ 명 

            , DECODE(AA.due_stdr_mumm, '', null, AA.due_stdr_mumm)                                    AS dueStdrMumm              // 과금 기준(최소)  
            , oc2077.INDVDLZ_CD_NM              								                                      AS dueStdrMummNm            // 과금 기준(최소) _ 명   

            , AA.svc_pc                         								                                      AS svcPc                    // 서비스 가격 
            , AA.svc_pc_vat                     								                                      AS svcPcVat                 // 서비스 가격 VAT포함여부 
            , AA.svc_pc_unt_cd                  								                                      AS svcPcUntCd               // 서비스 가격 통화단위 코드 
            , oc2085.INDVDLZ_CD_NM              								                                      AS svcPcUntCdNm            // 서비스 가격 통화단위 코드 _ 명                  

            , AA.mumm_cntrctpd                  								                                      AS mummCntrctpd             // 최소 계약기간 
            , AA.pc_table_atch_at               								                                      AS pcTableAtchAt            // 가격테이블 첨부 여부 
            , AA.vat_incls_at                   								                                      AS vatInclsAt               // VAT포함여부 
            , oc2078.INDVDLZ_CD_NM              								                                      AS vatInclsAtNm             // VAT포함여부 _ 명 

            , AA.svc_begin_procss               								                                      AS svcBeginProcss           // 서비스 시작 절차 
            , AA.svc_end_procss                 								                                      AS svcEndProcss             // 서비스 종료 절차 
            , AA.at_svc_evl                     								                                      AS atSvcEvl                 // 서비스 평가판 제공여부 
            , AA.svc_evl_suply_pd               								                                      AS svcEvlSuplyPd            // 서비스 평가판 제공 기간 
            , AA.svc_charger_nm                 								                                      AS svcChargerNm             // 서비스 담당자 이름
            , AA.svc_charger_cttpc              								                                      AS svcChargerCttpc					// 서비스 담당자 전화번호 국번 
            , AA.svc_charger_telno              								                                      AS svcChargerTelno          // 서비스 담당자 전화번호
            , AA.svc_charger_mbtl_num           								                                      AS svcChargerMbtlNum				// 서비스 담당자 휴대폰번호
            , AA.svc_charger_email              								                                      AS svcChargerEmail          // 서비스 담당자 이메일 
            , AA.gnrlz_sopmal_regist_at         								                                      AS gnrlzSopmalRegistAt      // 나라장터종합쇼핑몰 등록 여부 

            /* 3. 서비스 기술정보 */
            , AA.private_cloud_at               								                                      AS privateCloudAt           // Private cloud 구축 여부 
            , AA.public_cloud_at                								                                      AS publicCloudAt            // Public cloud 구축 여부 
            , AA.hybrid_cloud_at                								                                      AS hybridCloudAt            // Hybrid cloud 구축 여부 
            , AA.kisa_crtfc_at                  								                                      AS kisaCrtfcAt              // 클라우드 보안 인증(KISA) 여부 
            , DECODE(AA.cloud_svc_qlity_crtfc_at, '', null, AA.cloud_svc_qlity_crtfc_at) 				      AS cloudSvcQlityCrtfcAt     	// 클라우드 서비스 품질 인증 여부 
            , DECODE(AA.cloud_svc_cnfirm_at, '', null, AA.cloud_svc_cnfirm_at) 									      AS cloudSvcCnfirmAt         	// 클라우드 서비스 확인제 여부 
            , DECODE(AA.cc_crtfc_at, '', null, AA.cc_crtfc_at)  																      AS ccCrtfcAt                	// CC 인증 여부 
            , DECODE(AA.gs_crtfc_at, '', null, AA.gs_crtfc_at)  																      AS gsCrtfcAt                	// GS 인증 여부  
            , DECODE(AA.sla_applc_at, '', null, AA.sla_applc_at) 																      AS slaApplcAt               	// SLA 적용 여부 
            , AA.svc_useful                     																								      AS svcUseful                	// 서비스 가용성 
            , DECODE(AA.atmc_estn_sport_at, '', null, AA.atmc_estn_sport_at)										      AS atmcEstnSportAt          	// 자동 확장 지원 여부 
            , DECODE(AA.clustering_sport_at, '', null, AA.clustering_sport_at) 									      AS clusteringSportAt        	// 클러스터링 지원 여부 
            , DECODE(AA.sfsrv_provisioning_sport_at, '', null, AA.sfsrv_provisioning_sport_at)	      AS sfsrvProvisioningSportAt 	// 셀프서비스 프로비저닝 지원 여부 
            , AA.svc_provisioning_time          																								      AS svcProvisioningTime      	// 서비스 프로비저닝 시간 
            , AA.svc_provisioning_relis_time    																								      AS svcProvisioningRelisTime 	// 서비스 프로비저닝 해제 시간 

            /* 4. 서비스 및 데이터 관리 정보 */
            , oc2079.INDVDLZ_CD_NM              																								      AS dataCnterLcInfoNm         	// 데이터센터 국내, 외 위치 정보명  
            , DECODE(AA.data_cnter_lc_info, '', null, AA.data_cnter_lc_info) 										      AS dataCnterLcInfo     				// 데이터센터 국내, 외 위치 정보  

            , AA.data_cnter_hbrd_lc_info        								                                      AS dataCnterHbrdLcInfo       // 데이터센터 위치 정보  
            , AA.dsstrrecovry_plan              								                                      AS dsstrrecovryPlan          // 재해복구계획 
            , AA.data_extrc_procss              								                                      AS dataExtrcProcss           // 데이터 추출 절차 
            , AA.unuse_data_prtc_policy         								                                      AS unuseDataPrtcPolicy       // 미사용 데이터 보호 정책 
            , AA.safe_data_delete_policy        								                                      AS safeDataDeletePolicy      // 안전한 데이터 삭제 정책 
            , DECODE(AA.svc_manage_sttus_info_suply, '', null, AA.svc_manage_sttus_info_suply)	      AS svcManageSttusInfoSuply   // 서비스 관리 및 현황 정보 제공 
            , DECODE(AA.svc_use_log_suply_at, '', null, AA.svc_use_log_suply_at)         				      AS svcUseLogSuplyAt          // 서비스 이용 로그 제공 여부 
            , AA.trobl_manage_reprt_policy      																								      AS troblManageReprtPolicy    // 장애관리 및 보고 정책 
            , DECODE(AA.api_sport_at, '', null, AA.api_sport_at) 																      AS apiSportAt                // API 지원 여부
            , DECODE(AA.api_sport_ty, '', null, AA.api_sport_ty) 																      AS apiSportTy                // API 지원 타입 

            /* 5. 서비스 지원 정보　 */
            , DECODE(AA.user_mnl_suply_at, '', null, AA.user_mnl_suply_at)            					      AS userMnlSuplyAt              // 사용자 매뉴얼 제공 여부 
            , DECODE(AA.user_mnl_info_at, '', null, AA.user_mnl_info_at)             						      AS userMnlInfoAt               // 사용자 매뉴얼 정보 유무  
            , AA.user_mnl_info_input            																								      AS userMnlInfoInput            // 사용자 매뉴얼 정보  
            , DECODE(AA.user_edc_sport_at, '', null, AA.user_edc_sport_at)            					      AS userEdcSportAt              // 사용자 교육 지원 여부 
            , AA.user_edc_sport_input           																								      AS userEdcSportInput           // 사용자 교육 지원 기타 
            , AA.user_edc_info                  																								      AS userEdcInfo                 // 사용자 교육 정보 
            , DECODE(AA.visit_edc_sport_at, '', null, AA.visit_edc_sport_at)           					      AS visitEdcSportAt             // 방문 교육 지원 여부 
            , DECODE(AA.visit_tchnlgy_sport_at, '', null, AA.visit_tchnlgy_sport_at)       			      AS visitTchnlgySportAt         // 방문 기술 지원 여부 
            , DECODE(AA.visit_else_tchnlgy_sport_at, '', null, AA.visit_else_tchnlgy_sport_at)        AS visitElseTchnlgySportAt     // 방문 외 기술 지원 여부 (온라인, 이메일, 전화 등)
            , DECODE(AA.cstmr_cnter_oper_at, '', null, AA.cstmr_cnter_oper_at)          				      AS cstmrCnterOperAt            // 고객센터 운영 여부 
            , AA.cstmr_cnter_oper_time          																								      AS cstmrCnterOperTime          // 고객센터 운영 시간 

            /* Iaas */
            , AA.i_othbc_std_sport_doc          								                                      AS iOthbcStdSportDoc           // 공개표준 지원 및 문서 
            , AA.i_svc_direct_cnnc_ntwrk                                                              AS iSvcDirectCnncNtwrk         // 서비스에 직접 연결하는 네트워크 
            , AA.i_virtl_ntwrk_sport                                                                  AS iVirtlNtwrkSport            // 가상 네트워크 지원 
            , DECODE(AA.i_synchrn_sport_at, '', null, AA.i_synchrn_sport_at)											    AS iSynchrnSportAt             // 동기화 지원 여부 
            , AA.i_sport_eqpmn_list                                                                   AS iSportEqpmnList             // 지원 장비 목록 
            , AA.i_server_computer_svc                                                                AS iServerComputerSvc          // 서버/컴퓨터 서비스 
            , AA.i_strge_svc                                                                          AS iStrgeSvc                   // 스토리지 서비스 
            , AA.i_ntwrk_svc                                                                          AS iNtwrkSvc                   // 네트워크 서비스 
            , AA.i_scrty_svc                                                                          AS iScrtySvc                   // 보안 서비스 
            , AA.i_manage_svc                                                                         AS iManageSvc                  // 관리 서비스 
            , AA.i_etc_svc                                                                            AS iEtcSvc                     // 기타 서비스                   
              
            /* Paas */
            , AA.p_secure_devlop                                                                      AS pSecureDevlop               // Secure 개발 
            , AA.p_secure_dct_wdtb                                                                    AS pSecureDctWdtb              // Secure design, coding, testing 및 배포 
            , AA.p_sport_lang                                                                         AS pSportLang                  // 지원 언어 
            , AA.p_sport_pltfom                                                                       AS pSportPltfom                // 지원 플랫폼 
            , AA.p_sport_container_ver                                                                AS pSportContainerVer          // 지원 Container 및 버전 
            , AA.p_sport_data_storge                                                                  AS pSportDataStorge            // 지원 데이터 저장소 
            , AA.p_sub_tenancy_sport_at                                                               AS pSubTenancySportAt          // Sub-tenancy 지원 여부 
            , AA.p_dvlpr_unt_info                                                                     AS pDvlprUntInfo               // 개발자 도구 정보 
            , DECODE(AA.p_sdk_api_suply_at, '', null, AA.p_sdk_api_suply_at)											    AS pSdkApiSuplyAt              // SDK/API 제공 여부 
            , DECODE(AA.p_test_debuging_sport_at, '', null, AA.p_test_debuging_sport_at)					    AS pTestDebugingSportAt        // 테스트 및 디버깅 지원 여부 
            , DECODE(AA.p_addon_svc_markplace_sport_at, '', null, AA.p_addon_svc_markplace_sport_at)	AS pAddonSvcMarkplaceSportAt   // Add-on 서비스 및 마켓플레이스 지원 여부 
            , AA.p_cisport_sport                                                                      AS pCisportSport               // CISPORT(Continuous Integration) 지원 
            , AA.p_loging_mntrng_sport                                                                AS pLogingMntrngSport          // 로깅/모니터링 지원 
            , AA.p_load_balancing_sport                                                               AS pLoadBalancingSport         // Load Balancing 지원 
              
            /* Saas */
            , AA.s_user_svc_suply_mthd                                                                AS sUserSvcSuplyMthd           // 사용자용 서비스 제공 방식 
            , AA.s_manage_svc_suply_mthd                                                              AS sManageSvcSuplyMthd         // 관리용 서비스 제공 방식 
            , AA.s_infrstrctr_suply_mthd                                                              AS sInfrstrctrSuplyMthd        // 인프라 제공 방식 
            , AA.s_scrty_policy                                                                       AS sScrtyPolicy                // 보안 정책 
            , AA.s_data_encpt_at_mthd                                                                 AS sDataEncptAtMthd            // 데이터 암호화 여부 및 방식 
            , AA.s_backup_recovry_policy                                                              AS sBackupRecovryPolicy        // 백업 및 복구 정책 
            , AA.s_user_crtfc_scrty_prtc_policy                                                       AS sUserCrtfcScrtyPrtcPolicy   // 사용자 인증 및 보안 보호 정책 
            , DECODE(AA.s_multi_pltfom_sport_at, '', null, AA.s_multi_pltfom_sport_at)					      AS sMultiPltfomSportAt         // 다중 플랫폼 지원 여부 
            , AA.s_sport_opersysm_list                                                                AS sSportOpersysmList          // 지원 운영체계 목록 
            , AA.s_sport_wbsr_list                                                                    AS sSportWbsrList              // 지원 웹브라우저 목록 
            , AA.s_sport_mobile_pltfom_list                                                           AS sSportMobilePltfomList      // 지원 모바일 플랫폼 목록 
            , DECODE(AA.s_open_std_sport_at, '', null, AA.s_open_std_sport_at)									      AS sOpenStdSportAt             // 개방형 표준 지원 여부 
            , DECODE(AA.s_gvrn_frmwrk_sport_at, '', null, AA.s_gvrn_frmwrk_sport_at)						      AS sGvrnFrmwrkSportAt          // 정부 프레임워크 지원 여부 
            , DECODE(AA.s_open_sourc_sw_at, '', null, AA.s_open_sourc_sw_at)										      AS sOpenSourcSwAt              // 오픈소스 SW 호환 여부 
            , DECODE(AA.s_paasta_at, '', null, AA.s_paasta_at)																	      AS sPaastaAt                   // PaaS-Ta 호환 여부 
            , DECODE(AA.s_sourc_othbc_at, '', null, AA.s_sourc_othbc_at)												      AS sSourcOthbcAt               // 소스 공개 여부 
            , DECODE(AA.s_api_access_sport_at, '', null, AA.s_api_access_sport_at)							      AS sApiAccessSportAt           // 외부 API ACCESS 지원 여부 
            , DECODE(AA.s_db_migration_sport_at, '', null, AA.s_db_migration_sport_at)					      AS sDbMigrationSportAt         // DB 마이그레이션 지원 여부 
            , DECODE(AA.s_extrl_application_sport_at, '', null, AA.s_extrl_application_sport_at)	    AS sExtrlApplicationSportAt    // 외부 응용프로그램 통합 지원 여부 
            , DECODE(AA.s_sub_tenancy_sport_at, '', null, AA.s_sub_tenancy_sport_at)							    AS sSubTenancySportAt          // Sub-tenancy 지원 여부 
            , DECODE(AA.s_cstmzng_posbl_at, '', null, AA.s_cstmzng_posbl_at)											    AS sCstmzngPosblAt             // 커스터마이징 가능 여부 
            , AA.s_devlop_sport_etc                                                             	    AS sDevlopSportEtc             // 개발지원 조건 및 기타 사항            
              
            /* SCS */
            , AA.c_spclty_realm                                                                       AS cSpcltyRealm                // 전문 분야  
            , AA.c_indc_whole                                                                         AS cIndcWhole                  // 도입전반  
            , AA.c_setup_mgr                                                                          AS cSetupMgr                   // setup  migration 
            , AA.c_hold_qualf                                                                         AS cHoldQualf                  // 보유자격  
            , AA.c_hold_tchnlgy                                                                       AS cHoldTchnlgy                // 보유기술 
            , AA.c_infrstrctr                                                                         AS cInfrstrctr                 // 컨설팅가능 인프라 
            , AA.c_infrstrctr_etc                                                                     AS cInfrstrctrEtc              // 컨설팅가능 인프라 기타 
            , AA.c_pltfom                                                                             AS cPltfom                     // 컨설팅가능 플랫폼 
            , AA.c_pltfom_etc                                                                         AS cPltfomEtc                  // 컨설팅가능 플랫폼 기타
            , AA.c_prjct_exprnc                                                                       AS cPrjctExprnc                // 프로젝트 경험 
            , AA.c_cnsl_relm                                                                          AS cCnslRelm                   // 컨설팅 영역 
            , AA.c_cnsl_relm_etc                                                                      AS cCnslRelmEtc                // 컨설팅 영역 기타
            , AA.c_cnsl_scope                                                                         AS cCnslScope                  // 컨설팅 범위 
            , AA.c_detail_svc                                                                         AS cDetailSvc                  // 컨설팅 가능 상세 서비스 
            , AA.c_exc_pd                                                                             AS cExcPd                      // 수행기간 
            , AA.c_exc_pd_etc                                                                         AS cExcPdEtc                   // 수행기간 기타 
            , AA.c_exc_area                                                                           AS cExcArea                    // 수행가능지역 
            , AA.c_beffat_cnsl_at                                                                     AS cBeffatCnslAt               // 사전컨설팅 가능 여부 
            , AA.c_cnsl_pc                                                                            AS cCnslPc                     // 컨설팅 가격 
        FROM  TST_GOOD_SPEC_DESCRIBE_I AA
             
        LEFT JOIN OP_CODE_INDVDLZ oc2075
               ON oc2075.LANG_CODE = '00'
              AND oc2075.GROUP_CD = 2075
              AND oc2075.INDVDLZ_CD = AA.entrprs_se             
             
        LEFT JOIN OP_CODE_INDVDLZ oc2076
               ON oc2076.LANG_CODE = '00'
              AND oc2076.GROUP_CD = 2076
              AND oc2076.INDVDLZ_CD = AA.svc_ty             
             
        LEFT JOIN OP_CODE_INDVDLZ oc2055
               ON oc2055.LANG_CODE = '00'
              AND oc2055.GROUP_CD = 2055
              AND oc2055.INDVDLZ_CD = AA.svc_entrprs_suply_ty
             
        LEFT JOIN OP_CODE_INDVDLZ oc2077
               ON oc2077.LANG_CODE = '00'
              AND oc2077.GROUP_CD = 2077
              AND oc2077.INDVDLZ_CD = AA.due_stdr_mumm
             
        LEFT JOIN OP_CODE_INDVDLZ oc2085
               ON oc2085.LANG_CODE = '00'
              AND oc2085.GROUP_CD = 2085
              AND oc2085.INDVDLZ_CD = AA.svc_pc_unt_cd
             
        LEFT JOIN OP_CODE_INDVDLZ oc2078
               ON oc2078.LANG_CODE = '00'
              AND oc2078.GROUP_CD = 2078
              AND oc2078.INDVDLZ_CD = AA.vat_incls_at
             
        LEFT JOIN OP_CODE_INDVDLZ oc2079
               ON oc2079.LANG_CODE = '00'
              AND oc2079.GROUP_CD = 2079
              AND oc2079.INDVDLZ_CD = AA.data_cnter_lc_info
             
        LEFT JOIN TST_GOOD_INFO_I A 
               ON A.GOODS_CODE = AA.GOODS_CODE
        LEFT JOIN (SELECT CNTR_NUM, 
                          GOODS_CODE 
                         FROM TCN_PPS_GOOD_INFO_L 
                      GROUP BY CNTR_NUM 
                  )B 
               ON AA.GOODS_CODE = B.GOODS_CODE 
        LEFT JOIN OP_USER_ENTRPRS_OPTION  C 
               ON A.USER_ID = C.USER_ID
        LEFT JOIN (     SELECT SUBSTR(MAX(SYS_CONNECT_BY_PATH( AA.LANG_CTGRY_NM, ' , ')),3) AS LANG_CTGRY_NM
                              ,GOODS_CODE
                          FROM ( SELECT B.LANG_CTGRY_NM AS LANG_CTGRY_NM, 
                                        A.GOODS_CODE,
                                        ROWNUM  RR
                                   FROM TST_GOOD_CATE_I A, 
                                        TST_CATE_MGMT_M B 
                                  WHERE A.CTGRY_CODE = B.CTGRY_CODE 
                                    AND A.GOODS_CODE = #{goodsCode} 
                               ) AA
                    START WITH RR = 1
                    CONNECT BY PRIOR RR = RR-1
                      GROUP BY GOODS_CODE
                  ) D ON AA.GOODS_CODE = D.GOODS_CODE
        LEFT JOIN TUM_SVC_STOR_I E 
               ON A.USER_ID = E.USER_ID
              AND A.LANG_CODE = E.LANG_CODE
        LEFT JOIN (
                    SELECT INDVDLZ_CD, 
                           INDVDLZ_CD_NM 
                      FROM OP_CODE_INDVDLZ 
                     WHERE GROUP_CD = '1005' 
                       AND LANG_CODE = '00'
                  ) F 
               ON F.INDVDLZ_CD = A.GOODS_KND_CD
            WHERE AA.GOODS_CODE = #{goodsCode} 
              AND AA.GOODS_NUM  = (SELECT NVL(MAX(GOODS_NUM),1) FROM TST_GOOD_SPEC_DESCRIBE_I WHERE goods_code =#{goodsCode} )

    </select>
    
    <update id="updateTstGoodSpecDescribeIMerge" parameterType="GoodsSpecVO">
	/*_goodsManage.updateTstGoodSpecDescribeIMerge*/
        MERGE INTO
              TST_GOOD_SPEC_DESCRIBE_I A
        USING 
							( SELECT * 
							    FROM TST_GOOD_SPEC_DESCRIBE_I b
				         WHERE b.goods_code = #{goodsCode}
				           AND b.goods_num = #{goodsNum}
				    	) B ON (
				           		A.goods_code 	= B.goods_code
				       			AND A.goods_num = B.goods_num
				    	)
        WHEN MATCHED THEN
				UPDATE SET 
				        cmpny_nm                        = #{cmpnyNm}										//회사 명칭
							, cmpny_fond_year                 = #{cmpnyFondYear}							//회사 설립년도
							, entrprs_se                      = #{entrprsSe}									//기업 구분
							, cmpny_intrcn                    = #{cmpnyIntrcn}								//회사 소개
							, bsns_realm                      = #{bsnsRealm}									//사업 분야
							, main_refer                      = #{mainRefer}									//주요 레퍼런스 (등록 서비스 기준)
							, svc_nm                          = #{svcNm}											//서비스 명칭
							, svc_dfn_sfe                     = #{svcDfnSfe}									//서비스 정의 및 특징
							, svc_expc_effect                 = #{svcExpcEffect}							//서비스 기대효과
							, svc_ty                          = #{svcTy}											//서비스 유형
							, svc_entrprs_suply_ty            = #{svcEntrprsSuplyTy}					//서비스 제공 기업의 공급 유형
							, due_stdr_mumm                   = #{dueStdrMumm}								//과금 기준(최소)
							, svc_pc                          = #{svcPc}											//서비스 가격
							, svc_pc_vat                      = #{svcPcVat}										//서비스 가격 VAT포함여부
							, svc_pc_unt_cd                   = #{svcPcUntCd}									//서비스 가격 통화단위 코드
							, mumm_cntrctpd                   = #{mummCntrctpd}								//최소 계약기간
							, pc_table_atch_at                = #{pcTableAtchAt}							//가격테이블 첨부 여부
							, vat_incls_at                    = #{vatInclsAt}									//VAT포함여부
							, svc_begin_procss                = #{svcBeginProcss}							//서비스 시작 절차
							, svc_end_procss                  = #{svcEndProcss}								//서비스 종료 절차
							, at_svc_evl                      = #{atSvcEvl}										//서비스 평가판 제공여부
							, svc_evl_suply_pd                = #{svcEvlSuplyPd}							//서비스 평가판 제공 기간
							, svc_charger_nm                  = #{svcChargerNm}								//서비스 담당자 이름
							, svc_charger_telno               = #{svcChargerTelno}						//서비스 담당자 전화번호
							, svc_charger_email               = #{svcChargerEmail}						//서비스 담당자 이메일
							, gnrlz_sopmal_regist_at          = #{gnrlzSopmalRegistAt}				//나라장터종합쇼핑몰 등록 여부
							, private_cloud_at                = #{privateCloudAt}							//Private cloud 구축 여부
							, public_cloud_at                 = #{publicCloudAt}							//Public cloud 구축 여부
							, hybrid_cloud_at                 = #{hybridCloudAt}							//Hybrid cloud 구축 여부
							, kisa_crtfc_at                   = #{kisaCrtfcAt}								//클라우드 보안 인증(KISA) 여부
							, cloud_svc_qlity_crtfc_at        = #{cloudSvcQlityCrtfcAt}				//클라우드 서비스 품질 인증 여부
							, cloud_svc_cnfirm_at             = #{cloudSvcCnfirmAt}						//클라우드 서비스 확인제 여부
							, cc_crtfc_at                     = #{ccCrtfcAt}									//CC 인증 여부
							, gs_crtfc_at                     = #{gsCrtfcAt}									//GS 인증 여부
							, sla_applc_at                    = #{slaApplcAt}									//SLA 적용 여부
							, svc_useful                      = #{svcUseful}									//서비스 가용성
							, atmc_estn_sport_at              = #{atmcEstnSportAt}						//자동 확장 지원 여부
							, clustering_sport_at             = #{clusteringSportAt}					//클러스터링 지원 여부
							, sfsrv_provisioning_sport_at     = #{sfsrvProvisioningSportAt}		//셀프서비스 프로비저닝 지원 여부
							, svc_provisioning_time           = #{svcProvisioningTime}				//서비스 프로비저닝 시간
							, svc_provisioning_relis_time     = #{svcProvisioningRelisTime}		//서비스 프로비저닝 해제 시간
							, data_cnter_hbrd_lc_info         = #{dataCnterHbrdLcInfo}				//데이터센터 국내, 외 위치 정보
							, data_cnter_lc_info              = #{dataCnterLcInfo}						//데이터센터 국내, 외 위치 정보
							, dsstrrecovry_plan               = #{dsstrrecovryPlan}						//재해복구계획
							, data_extrc_procss               = #{dataExtrcProcss}						//데이터 추출 절차
							, unuse_data_prtc_policy          = #{unuseDataPrtcPolicy}				//미사용 데이터 보호 정책
							, safe_data_delete_policy         = #{safeDataDeletePolicy}				//안전한 데이터 삭제 정책
							, svc_manage_sttus_info_suply     = #{svcManageSttusInfoSuply}		//서비스 관리 및 현황 정보 제공
							, svc_use_log_suply_at            = #{svcUseLogSuplyAt}						//서비스 이용 로그 제공 여부
							, trobl_manage_reprt_policy       = #{troblManageReprtPolicy}			//장애관리 및 보고 정책
							, api_sport_at                    = #{apiSportAt}									//API 지원 여부
							, api_sport_ty                    = #{apiSportTy}									//API 지원 타입
							, user_mnl_suply_at               = #{userMnlSuplyAt}							//사용자 매뉴얼 제공 여부
							, user_mnl_info_at                = #{userMnlInfoAt}							//사용자 매뉴얼 정보 유무
							, user_mnl_info_input             = #{userMnlInfoInput}						//사용자 매뉴얼 정보 입력
							, user_edc_sport_at               = #{userEdcSportAt}							//사용자 교육 지원 여부
							, user_edc_sport_input            = #{userEdcSportInput}					//사용자 교육 지원 입력
							, user_edc_info                   = #{userEdcInfo}								//사용자 교육 정보
							, visit_edc_sport_at              = #{visitEdcSportAt}						//방문 교육 지원 여부
							, visit_tchnlgy_sport_at          = #{visitTchnlgySportAt}				//방문 기술 지원 여부
							, visit_else_tchnlgy_sport_at     = #{visitElseTchnlgySportAt}		//방문 외(온라인, 이메일, 전화 등) 기술 지원 여부
							, cstmr_cnter_oper_at             = #{cstmrCnterOperAt}						//고객센터 운영 여부
							, cstmr_cnter_oper_time           = #{cstmrCnterOperTime}					//고객센터 운영 시간
							, i_othbc_std_sport_doc           = #{iOthbcStdSportDoc}					//공개표준 지원 및 문서
							, i_svc_direct_cnnc_ntwrk         = #{iSvcDirectCnncNtwrk}				//서비스에 직접 연결하는 네트워크
							, i_virtl_ntwrk_sport             = #{iVirtlNtwrkSport}						//가상 네트워크 지원
							, i_synchrn_sport_at              = #{iSynchrnSportAt}						//동기화 지원 여부
							, i_sport_eqpmn_list              = #{iSportEqpmnList}						//지원 장비 목록
							, i_server_computer_svc           = #{iServerComputerSvc}					//서버/컴퓨터 서비스
							, i_strge_svc                     = #{iStrgeSvc}									//스토리지 서비스
							, i_ntwrk_svc                     = #{iNtwrkSvc}									//네트워크 서비스
							, i_scrty_svc                     = #{iScrtySvc}									//보안 서비스
							, i_manage_svc                    = #{iManageSvc}									//관리 서비스
							, i_etc_svc                       = #{iEtcSvc}										//기타 서비스
							, p_secure_devlop                 = #{pSecureDevlop}							//Secure 개발
							, p_secure_dct_wdtb               = #{pSecureDctWdtb}							//Secure design, coding, testing 및 배포
							, p_sport_lang                    = #{pSportLang}									//지원 언어
							, p_sport_pltfom                  = #{pSportPltfom}								//지원 플랫폼
							, p_sport_container_ver           = #{pSportContainerVer}					//지원 Container 및 버전
							, p_sport_data_storge             = #{pSportDataStorge}						//지원 데이터 저장소
							, p_sub_tenancy_sport_at          = #{pSubTenancySportAt}					//Sub-tenancy 지원 여부
							, p_dvlpr_unt_info                = #{pDvlprUntInfo}							//개발자 도구 정보
							, p_sdk_api_suply_at              = #{pSdkApiSuplyAt}							//SDK/API 제공 여부
							, p_test_debuging_sport_at        = #{pTestDebugingSportAt}				//테스트 및 디버깅 지원 여부
							, p_addon_svc_markplace_sport_at  = #{pAddonSvcMarkplaceSportAt}	//Add-on 서비스 및 마켓플레이스 지원 여부
							, p_cisport_sport                 = #{pCisportSport}							//CISPORT(Continuous Integration) 지원
							, p_loging_mntrng_sport           = #{pLogingMntrngSport}					//로깅/모니터링 지원
							, p_load_balancing_sport          = #{pLoadBalancingSport}				//Load Balancing 지원
							, s_user_svc_suply_mthd           = #{sUserSvcSuplyMthd}					//사용자용 서비스 제공 방식
							, s_manage_svc_suply_mthd         = #{sManageSvcSuplyMthd}				//관리용 서비스 제공 방식
							, s_infrstrctr_suply_mthd         = #{sInfrstrctrSuplyMthd}				//인프라 제공 방식
							, s_scrty_policy                  = #{sScrtyPolicy}								//보안 정책
							, s_data_encpt_at_mthd            = #{sDataEncptAtMthd}						//데이터 암호화 여부 및 방식
							, s_backup_recovry_policy         = #{sBackupRecovryPolicy}				//백업 및 복구 정책
							, s_user_crtfc_scrty_prtc_policy  = #{sUserCrtfcScrtyPrtcPolicy}	//사용자 인증 및 보안 보호 정책
							, s_multi_pltfom_sport_at         = #{sMultiPltfomSportAt}				//다중 플랫폼 지원 여부
							, s_sport_opersysm_list           = #{sSportOpersysmList}					//지원 운영체계 목록 
							, s_sport_wbsr_list               = #{sSportWbsrList}							//지원 웹브라우저 목록
							, s_sport_mobile_pltfom_list      = #{sSportMobilePltfomList}			//지원 모바일 플랫폼 목록
							, s_open_std_sport_at             = #{sOpenStdSportAt}						//개방형 표준 지원 여부
							, s_gvrn_frmwrk_sport_at          = #{sGvrnFrmwrkSportAt}					//정부 프레임워크 지원 여부
							, s_open_sourc_sw_at              = #{sOpenSourcSwAt}							//오픈소스 SW 호환 여부
							, s_paasta_at                     = #{sPaastaAt}									//PaaS-Ta 호환 여부
							, s_sourc_othbc_at                = #{sSourcOthbcAt}							//소스 공개 여부
							, s_api_access_sport_at           = #{sApiAccessSportAt}					//외부 API ACCESS 지원 여부
							, s_db_migration_sport_at         = #{sDbMigrationSportAt}				//DB 마이그레이션 지원 여부
							, s_extrl_application_sport_at    = #{sExtrlApplicationSportAt}		//외부 응용프로그램 통합 지원 여부
							, s_sub_tenancy_sport_at          = #{sSubTenancySportAt}					//Sub-tenancy 지원 여부
							, s_cstmzng_posbl_at              = #{sCstmzngPosblAt}						//커스터마이징 가능 여부
							, s_devlop_sport_etc              = #{sDevlopSportEtc}						//개발지원 조건 및 기타 사항
							, c_spclty_realm                  = #{cSpcltyRealm}								//전문 분야
							, c_indc_whole                    = #{cIndcWhole}									//도입전반
							, c_setup_mgr                     = #{cSetupMgr}									//setup N migration
							, c_hold_qualf                    = #{cHoldQualf}									//보유자격
							, c_hold_tchnlgy                  = #{cHoldTchnlgy}								//보유기술
							, c_infrstrctr                    = #{cInfrstrctr}								//컨설팅가능 인프라
							, c_infrstrctr_etc                = #{cInfrstrctrEtc}							//컨설팅가능 인프라 기타
							, c_pltfom                        = #{cPltfom}										//컨설팅가는 플랫폼
							, c_pltfom_etc                    = #{cPltfomEtc}									//컨설팅가는 플랫폼 기타
							, c_prjct_exprnc                  = #{cPrjctExprnc}								//프로젝트 경험
							, c_cnsl_relm                     = #{cCnslRelm}									//컨설팅 영역
							, c_cnsl_relm_etc                 = #{cCnslRelmEtc}								//컨설팅 영역 기타
							, c_cnsl_scope                    = #{cCnslScope}									//컨설팅 범위
							, c_detail_svc                    = #{cDetailSvc}									//컨설팅 가능 상세 서비스
							, c_exc_pd                        = #{cExcPd}											//수행기간
							, c_exc_pd_etc                    = #{cExcPdEtc}									//수행기간 기타
							, c_exc_area                      = #{cExcArea}										//수행가능지역
							, c_beffat_cnsl_at                = #{cBeffatCnslAt}							//사전컨설팅 가능 여부
							, c_cnsl_pc                       = #{cCnslPc}										//컨설팅 가격
							, entr_date                       = SYS_DATETIME									//생성일시
							, user_id                         = #{userId}											//로그인아이디
							, save_step                       = '41'													//저장단계(11:1단계 /10: 1단계임시저장 /21:2단계 /20: 2단계임시저장 /31:3단계 /30: 3단계임시저장 /41:4단계/40: 4단계임시저장)
							, goods_entr_date                 = SYS_DATETIME									//등록일
							, goods_use                       = 'Y'														//사용여부
							, svc_charger_cttpc               = #{svcChargerCttpc}						//국가번호
							, svc_charger_mbtl_num            = #{svcChargerMbtlNum}					//서비스 담당자 휴대폰
							
        WHEN NOT MATCHED THEN
              INSERT
                  (
										  goods_code                 , goods_num                     , cmpny_nm                   , cmpny_fond_year             , entrprs_se
										, cmpny_intrcn               , bsns_realm                    , main_refer                 , svc_nm                      , svc_dfn_sfe
										, svc_expc_effect            , svc_ty                        , svc_entrprs_suply_ty       , due_stdr_mumm               , svc_pc
										, svc_pc_vat                 , svc_pc_unt_cd                 , mumm_cntrctpd              , pc_table_atch_at            , vat_incls_at
										, svc_begin_procss           , svc_end_procss                , at_svc_evl                 , svc_evl_suply_pd            , svc_charger_nm
										, svc_charger_telno          , svc_charger_email					   , gnrlz_sopmal_regist_at     , private_cloud_at            , public_cloud_at
										, hybrid_cloud_at            , kisa_crtfc_at                 , cloud_svc_qlity_crtfc_at   , cloud_svc_cnfirm_at         , cc_crtfc_at
										, gs_crtfc_at                , sla_applc_at  							   , svc_useful                 , atmc_estn_sport_at          , clustering_sport_at
										, sfsrv_provisioning_sport_at, svc_provisioning_time         , svc_provisioning_relis_time, data_cnter_hbrd_lc_info     , data_cnter_lc_info
										, dsstrrecovry_plan          , data_extrc_procss             , unuse_data_prtc_policy     , safe_data_delete_policy     , svc_manage_sttus_info_suply
										, svc_use_log_suply_at       , trobl_manage_reprt_policy     , api_sport_at               , api_sport_ty                , user_mnl_suply_at
										, user_mnl_info_at           , user_mnl_info_input           , user_edc_sport_at          , user_edc_sport_input        , user_edc_info
										, visit_edc_sport_at         , visit_tchnlgy_sport_at        , visit_else_tchnlgy_sport_at, cstmr_cnter_oper_at         , cstmr_cnter_oper_time
										, i_othbc_std_sport_doc      , i_svc_direct_cnnc_ntwrk       , i_virtl_ntwrk_sport        , i_synchrn_sport_at          , i_sport_eqpmn_list
										, i_server_computer_svc      , i_strge_svc                   , i_ntwrk_svc                , i_scrty_svc                 , i_manage_svc
										, i_etc_svc                  , p_secure_devlop               , p_secure_dct_wdtb          , p_sport_lang                , p_sport_pltfom
										, p_sport_container_ver      , p_sport_data_storge           , p_sub_tenancy_sport_at     , p_dvlpr_unt_info            , p_sdk_api_suply_at
										, p_test_debuging_sport_at   , p_addon_svc_markplace_sport_at, p_cisport_sport            , p_loging_mntrng_sport       , p_load_balancing_sport
										, s_user_svc_suply_mthd      , s_manage_svc_suply_mthd       , s_infrstrctr_suply_mthd    , s_scrty_policy              , s_data_encpt_at_mthd
										, s_backup_recovry_policy    , s_user_crtfc_scrty_prtc_policy, s_multi_pltfom_sport_at    , s_sport_opersysm_list       , s_sport_wbsr_list
										, s_sport_mobile_pltfom_list , s_open_std_sport_at           , s_gvrn_frmwrk_sport_at     , s_open_sourc_sw_at          , s_paasta_at
										, s_sourc_othbc_at           , s_api_access_sport_at         , s_db_migration_sport_at    , s_extrl_application_sport_at, s_sub_tenancy_sport_at
										, s_cstmzng_posbl_at         , s_devlop_sport_etc            , c_spclty_realm             , c_indc_whole                , c_setup_mgr
										, c_hold_qualf               , c_hold_tchnlgy                , c_infrstrctr               , c_infrstrctr_etc            , c_pltfom
										, c_pltfom_etc               , c_prjct_exprnc                , c_cnsl_relm                , c_cnsl_relm_etc             , c_cnsl_scope
										, c_detail_svc               , c_exc_pd	                     , c_exc_pd_etc               , c_exc_area                  , c_beffat_cnsl_at
										, c_cnsl_pc                  , entr_date                     , user_id                    , save_step                   , goods_entr_date
										, goods_use                  , svc_charger_cttpc             , svc_charger_mbtl_num
                  )
              VALUES
              	 (
              	    #{goodsCode}               , (SELECT NVL(MAX(goods_num), 0) + 1 FROM tst_good_spec_describe_i WHERE goods_code = #{goodsCode})                 , #{cmpnyNm}                 , #{cmpnyFondYear}           , #{entrprsSe}
              	  , #{cmpnyIntrcn}             , #{bsnsRealm}                , #{mainRefer}               , #{svcNm}                   , #{svcDfnSfe}
              	  , #{svcExpcEffect}           , #{svcTy}									   , #{svcEntrprsSuplyTy}       , #{dueStdrMumm}             , #{svcPc}
              	  , #{svcPcVat}                , #{svcPcUntCd}							 , #{mummCntrctpd}            , #{pcTableAtchAt}           , #{vatInclsAt}
              	  , #{svcBeginProcss}          , #{svcEndProcss}             , #{atSvcEvl}                , #{svcEvlSuplyPd}           , #{svcChargerNm}
              	  , #{svcChargerTelno}         , #{svcChargerEmail}          , #{gnrlzSopmalRegistAt}     , #{privateCloudAt}          , #{publicCloudAt}
              	  , #{hybridCloudAt}           , #{kisaCrtfcAt}              , #{cloudSvcQlityCrtfcAt}    , #{cloudSvcCnfirmAt}        , #{ccCrtfcAt}
              	  , #{gsCrtfcAt}               , #{slaApplcAt}               , #{svcUseful}               , #{atmcEstnSportAt}         , #{clusteringSportAt}
              	  , #{sfsrvProvisioningSportAt}, #{svcProvisioningTime}      , #{svcProvisioningRelisTime}, #{dataCnterHbrdLcInfo}     , #{dataCnterLcInfo}
              	  , #{dsstrrecovryPlan}        , #{dataExtrcProcss}          , #{unuseDataPrtcPolicy}     , #{safeDataDeletePolicy}    , #{svcManageSttusInfoSuply}
              	  , #{svcUseLogSuplyAt}        , #{troblManageReprtPolicy}   , #{apiSportAt}              , #{apiSportTy}              , #{userMnlSuplyAt}
              	  , #{userMnlInfoAt}           , #{userMnlInfoInput}         , #{userEdcSportAt}          , #{userEdcSportInput}       , #{userEdcInfo}
              	  , #{visitEdcSportAt}         , #{visitTchnlgySportAt}      , #{visitElseTchnlgySportAt} , #{cstmrCnterOperAt}        , #{cstmrCnterOperTime}
              	  , #{iOthbcStdSportDoc}       , #{iSvcDirectCnncNtwrk}      , #{iVirtlNtwrkSport}        , #{iSynchrnSportAt}         , #{iSportEqpmnList}
              	  , #{iServerComputerSvc}      , #{iStrgeSvc}                , #{iNtwrkSvc}               , #{iScrtySvc}               , #{iManageSvc}
              	  , #{iEtcSvc}                 , #{pSecureDevlop}            , #{pSecureDctWdtb}          , #{pSportLang}              , #{pSportPltfom}
              	  , #{pSportContainerVer}      , #{pSportDataStorge}         , #{pSubTenancySportAt}      , #{pDvlprUntInfo}           , #{pSdkApiSuplyAt}
              	  , #{pTestDebugingSportAt}    , #{pAddonSvcMarkplaceSportAt}, #{pCisportSport}           , #{pLogingMntrngSport}      , #{pLoadBalancingSport}
              	  , #{sUserSvcSuplyMthd}       , #{sManageSvcSuplyMthd}      , #{sInfrstrctrSuplyMthd}    , #{sScrtyPolicy}            , #{sDataEncptAtMthd}
              	  , #{sBackupRecovryPolicy}    , #{sUserCrtfcScrtyPrtcPolicy}, #{sMultiPltfomSportAt}     , #{sSportOpersysmList}      , #{sSportWbsrList}
              	  , #{sSportMobilePltfomList}  , #{sOpenStdSportAt}          , #{sGvrnFrmwrkSportAt}      , #{sOpenSourcSwAt}          , #{sPaastaAt}
              	  , #{sSourcOthbcAt}           , #{sApiAccessSportAt}        , #{sDbMigrationSportAt}     , #{sExtrlApplicationSportAt}, #{sSubTenancySportAt}
              	  , #{sCstmzngPosblAt}         , #{sDevlopSportEtc}          , #{cSpcltyRealm}            , #{cIndcWhole}              , #{cSetupMgr}
              	  , #{cHoldQualf}              , #{cHoldTchnlgy}             , #{cInfrstrctr}             , #{cInfrstrctrEtc}          , #{cPltfom}
              	  , #{cPltfomEtc}              , #{cPrjctExprnc}             , #{cCnslRelm}               , #{cCnslRelmEtc}            , #{cCnslScope}
              	  , #{cDetailSvc}              , #{cExcPd}                   , #{cExcPdEtc}               , #{cExcArea}                , #{cBeffatCnslAt}
              	  , #{cCnslPc}                 , SYS_DATETIME                , #{userId}                  , '41'                       , SYS_DATETIME
              	  , 'Y'                        , #{svcChargerCttpc}          , #{svcChargerMbtlNum}
              	 )
         
		</update>
		
		<update id="updateTstGoodSpecDescribeI" parameterType="GoodsSpecVO">
		/*_goodsManage.updateTstGoodSpecDescribeI*/
				UPDATE  TST_GOOD_SPEC_DESCRIBE_I
				   SET 
				        user_id                         = #{userId}											//로그인아이디
				      , entr_date                       = SYS_DATETIME									//생성일시 
				      , goods_use                       = 'Y'														//사용여부 
				   <if test="formNm eq 'dataForm5'">
				      , svc_begin_procss                = #{svcBeginProcss}							//서비스 시작 절차
					   	, svc_end_procss                  = #{svcEndProcss}								//서비스 종료 절차
					   	, at_svc_evl                      = #{atSvcEvl}										//서비스 평가판 제공여부
					   	, svc_evl_suply_pd                = #{svcEvlSuplyPd}							//서비스 평가판 제공 기간
					   	, sla_applc_at                    = #{slaApplcAt}									//SLA 적용 여부
					   	, svc_useful                      = #{svcUseful}									//서비스 가용성
					   	, atmc_estn_sport_at              = #{atmcEstnSportAt}						//자동 확장 지원 여부
					   	, clustering_sport_at             = #{clusteringSportAt}					//클러스터링 지원 여부
					   	, sfsrv_provisioning_sport_at     = #{sfsrvProvisioningSportAt}		//셀프서비스 프로비저닝 지원 여부
					   	, svc_provisioning_time           = #{svcProvisioningTime}				//서비스 프로비저닝 시간
					   	, svc_provisioning_relis_time     = #{svcProvisioningRelisTime}		//서비스 프로비저닝 해제 시간
				   </if>
				   <if test="formNm eq 'dataForm6'">
				   		, data_cnter_lc_info              = #{dataCnterLcInfo}						//데이터센터 국내, 외 위치 정보
				   		, data_cnter_hbrd_lc_info         = #{dataCnterHbrdLcInfo}				//데이터센터 국내, 외 위치 정보
				   		, dsstrrecovry_plan               = #{dsstrrecovryPlan}						//재해복구계획
						  , data_extrc_procss               = #{dataExtrcProcss}						//데이터 추출 절차
						  , unuse_data_prtc_policy          = #{unuseDataPrtcPolicy}				//미사용 데이터 보호 정책
						  , safe_data_delete_policy         = #{safeDataDeletePolicy}				//안전한 데이터 삭제 정책
						  , svc_manage_sttus_info_suply     = #{svcManageSttusInfoSuply}		//서비스 관리 및 현황 정보 제공
						  , svc_use_log_suply_at            = #{svcUseLogSuplyAt}						//서비스 이용 로그 제공 여부
						  , trobl_manage_reprt_policy       = #{troblManageReprtPolicy}			//장애관리 및 보고 정책
						  , api_sport_at                    = #{apiSportAt}									//API 지원 여부
						  , api_sport_ty                    = #{apiSportTy}									//API 지원 타입
				   </if>
				   <if test="formNm eq 'dataForm7'">
							, user_mnl_suply_at               = #{userMnlSuplyAt}							//사용자 매뉴얼 제공 여부
							, user_mnl_info_at                = #{userMnlInfoAt}							//사용자 매뉴얼 정보 유무
							, user_mnl_info_input             = #{userMnlInfoInput}						//사용자 매뉴얼 정보 입력
							, user_edc_sport_at               = #{userEdcSportAt}							//사용자 교육 지원 여부
							, user_edc_sport_input            = #{userEdcSportInput}					//사용자 교육 지원 입력
							, visit_edc_sport_at              = #{visitEdcSportAt}						//방문 교육 지원 여부
							, visit_tchnlgy_sport_at          = #{visitTchnlgySportAt}				//방문 기술 지원 여부
							, visit_else_tchnlgy_sport_at     = #{visitElseTchnlgySportAt}		//방문 외(온라인, 이메일, 전화 등) 기술 지원 여부
							, cstmr_cnter_oper_at             = #{cstmrCnterOperAt}						//고객센터 운영 여부
							, cstmr_cnter_oper_time           = #{cstmrCnterOperTime}					//고객센터 운영 시간
				   </if>
				   <if test="formNm eq 'dataForm8'">
							, s_user_svc_suply_mthd           = #{sUserSvcSuplyMthd}					//사용자용 서비스 제공 방식
							, s_manage_svc_suply_mthd         = #{sManageSvcSuplyMthd}				//관리용 서비스 제공 방식
							, s_infrstrctr_suply_mthd         = #{sInfrstrctrSuplyMthd}				//인프라 제공 방식
							, s_scrty_policy                  = #{sScrtyPolicy}								//보안 정책
							, s_data_encpt_at_mthd            = #{sDataEncptAtMthd}						//데이터 암호화 여부 및 방식
							, s_backup_recovry_policy         = #{sBackupRecovryPolicy}				//백업 및 복구 정책
							, s_user_crtfc_scrty_prtc_policy  = #{sUserCrtfcScrtyPrtcPolicy}	//사용자 인증 및 보안 보호 정책
							, s_multi_pltfom_sport_at         = #{sMultiPltfomSportAt}				//다중 플랫폼 지원 여부
							, s_sport_opersysm_list           = #{sSportOpersysmList}					//지원 운영체계 목록 
							, s_sport_wbsr_list               = #{sSportWbsrList}							//지원 웹브라우저 목록
							, s_sport_mobile_pltfom_list      = #{sSportMobilePltfomList}			//지원 모바일 플랫폼 목록
							, s_open_std_sport_at             = #{sOpenStdSportAt}						//개방형 표준 지원 여부
							, s_gvrn_frmwrk_sport_at          = #{sGvrnFrmwrkSportAt}					//정부 프레임워크 지원 여부
							, s_open_sourc_sw_at              = #{sOpenSourcSwAt}							//오픈소스 SW 호환 여부
							, s_paasta_at                     = #{sPaastaAt}									//PaaS-Ta 호환 여부
							, s_sourc_othbc_at                = #{sSourcOthbcAt}							//소스 공개 여부
							, s_api_access_sport_at           = #{sApiAccessSportAt}					//외부 API ACCESS 지원 여부
							, s_db_migration_sport_at         = #{sDbMigrationSportAt}				//DB 마이그레이션 지원 여부
							, s_extrl_application_sport_at    = #{sExtrlApplicationSportAt}		//외부 응용프로그램 통합 지원 여부
							, s_sub_tenancy_sport_at          = #{sSubTenancySportAt}					//Sub-tenancy 지원 여부
							, s_cstmzng_posbl_at              = #{sCstmzngPosblAt}						//커스터마이징 가능 여부
							, s_devlop_sport_etc              = #{sDevlopSportEtc}						//개발지원 조건 및 기타 사항
				   </if>
				   <if test="formNm eq 'dataForm9'">
							, p_secure_devlop                 = #{pSecureDevlop}							//Secure 개발
							, p_secure_dct_wdtb               = #{pSecureDctWdtb}							//Secure design, coding, testing 및 배포
							, p_sport_lang                    = #{pSportLang}									//지원 언어
							, p_sport_pltfom                  = #{pSportPltfom}								//지원 플랫폼
							, p_sport_container_ver           = #{pSportContainerVer}					//지원 Container 및 버전
							, p_sport_data_storge             = #{pSportDataStorge}						//지원 데이터 저장소
							, p_sub_tenancy_sport_at          = #{pSubTenancySportAt}					//Sub-tenancy 지원 여부
							, p_dvlpr_unt_info                = #{pDvlprUntInfo}							//개발자 도구 정보
							, p_sdk_api_suply_at              = #{pSdkApiSuplyAt}							//SDK/API 제공 여부
							, p_test_debuging_sport_at        = #{pTestDebugingSportAt}				//테스트 및 디버깅 지원 여부
							, p_addon_svc_markplace_sport_at  = #{pAddonSvcMarkplaceSportAt}	//Add-on 서비스 및 마켓플레이스 지원 여부
							, p_cisport_sport                 = #{pCisportSport}							//CISPORT(Continuous Integration) 지원
							, p_loging_mntrng_sport           = #{pLogingMntrngSport}					//로깅/모니터링 지원
							, p_load_balancing_sport          = #{pLoadBalancingSport}				//Load Balancing 지원
				   </if>
				   <if test="formNm eq 'dataForm10'">
							, i_othbc_std_sport_doc           = #{iOthbcStdSportDoc}					//공개표준 지원 및 문서
							, i_svc_direct_cnnc_ntwrk         = #{iSvcDirectCnncNtwrk}				//서비스에 직접 연결하는 네트워크
							, i_virtl_ntwrk_sport             = #{iVirtlNtwrkSport}						//가상 네트워크 지원
							, i_synchrn_sport_at              = #{iSynchrnSportAt}						//동기화 지원 여부
							, i_sport_eqpmn_list              = #{iSportEqpmnList}						//지원 장비 목록
							, i_server_computer_svc           = #{iServerComputerSvc}					//서버/컴퓨터 서비스
							, i_strge_svc                     = #{iStrgeSvc}									//스토리지 서비스
							, i_ntwrk_svc                     = #{iNtwrkSvc}									//네트워크 서비스
							, i_scrty_svc                     = #{iScrtySvc}									//보안 서비스
							, i_manage_svc                    = #{iManageSvc}									//관리 서비스
							, i_etc_svc                       = #{iEtcSvc}										//기타 서비스
				   </if>
				   <if test="formNm eq 'dataForm11'">
							, c_spclty_realm                  = #{cSpcltyRealm}								//전문 분야
							, c_indc_whole                    = #{cIndcWhole}									//도입전반
							, c_setup_mgr                     = #{cSetupMgr}									//setup N migration
							, c_hold_qualf                    = #{cHoldQualf}									//보유자격
							, c_hold_tchnlgy                  = #{cHoldTchnlgy}								//보유기술
							, c_infrstrctr                    = #{cInfrstrctr}								//컨설팅가능 인프라
							, c_infrstrctr_etc                = #{cInfrstrctrEtc}							//컨설팅가능 인프라 기타
							, c_pltfom                        = #{cPltfom}										//컨설팅가는 플랫폼
							, c_pltfom_etc                    = #{cPltfomEtc}									//컨설팅가는 플랫폼 기타
							, c_prjct_exprnc                  = #{cPrjctExprnc}								//프로젝트 경험
							, c_cnsl_relm                     = #{cCnslRelm}									//컨설팅 영역
							, c_cnsl_relm_etc                 = #{cCnslRelmEtc}								//컨설팅 영역 기타
							, c_cnsl_scope                    = #{cCnslScope}									//컨설팅 범위
							, c_detail_svc                    = #{cDetailSvc}									//컨설팅 가능 상세 서비스
							, c_exc_pd                        = #{cExcPd}											//수행기간
							, c_exc_pd_etc                    = #{cExcPdEtc}									//수행기간 기타
							, c_exc_area                      = #{cExcArea}										//수행가능지역
							, c_beffat_cnsl_at                = #{cBeffatCnslAt}							//사전컨설팅 가능 여부
							, c_cnsl_pc                       = #{cCnslPc}										//컨설팅 가격
				   </if>
				   <if test="formNm eq 'dataForm12'">
							, cmpny_nm                        = #{cmpnyNm}										//회사 명칭
							, cmpny_fond_year                 = #{cmpnyFondYear}							//회사 설립년도
							, cmpny_intrcn                    = #{cmpnyIntrcn}								//회사 소개
							, bsns_realm                      = #{bsnsRealm}									//사업 분야
							, svc_entrprs_suply_ty            = #{svcEntrprsSuplyTy}					//서비스 제공 기업의 공급 유형
							, entrprs_se                      = #{entrprsSe}									//기업 구분
				   </if>
				   <if test="formNm eq 'dataForm13'">
							, svc_charger_nm                  = #{svcChargerNm}								//서비스 담당자 이름
							, svc_charger_email               = #{svcChargerEmail}						//서비스 담당자 이메일
							, svc_charger_cttpc               = #{svcChargerCttpc}						//국가번호
							, svc_charger_telno               = #{svcChargerTelno}						//서비스 담당자 전화번호
							, svc_charger_mbtl_num            = #{svcChargerMbtlNum}					//서비스 담당자 휴대폰
				   </if>
				 WHERE  goods_code = #{goodsCode}
				   AND  goods_num  = #{goodsNum}
		</update>
		<update id="updateTstGoodSpecDescribeI_ASIS" parameterType="GoodsSpecVO">
		/*_goodsManage.updateTstGoodSpecDescribeI_ASIS*/
				UPDATE TST_GOOD_SPEC_DESCRIBE_I
				   SET
				        cmpny_nm                        = #{cmpnyNm}										//회사 명칭
							, cmpny_fond_year                 = #{cmpnyFondYear}							//회사 설립년도
							, entrprs_se                      = #{entrprsSe}									//기업 구분
							, cmpny_intrcn                    = #{cmpnyIntrcn}								//회사 소개
							, bsns_realm                      = #{bsnsRealm}									//사업 분야
							, main_refer                      = #{mainRefer}									//주요 레퍼런스 (등록 서비스 기준)
							, svc_nm                          = #{svcNm}											//서비스 명칭
							, svc_dfn_sfe                     = #{svcDfnSfe}									//서비스 정의 및 특징
							, svc_expc_effect                 = #{svcExpcEffect}							//서비스 기대효과
							, svc_ty                          = #{svcTy}											//서비스 유형
							, svc_entrprs_suply_ty            = #{svcEntrprsSuplyTy}					//서비스 제공 기업의 공급 유형
							, due_stdr_mumm                   = #{dueStdrMumm}								//과금 기준(최소)
							, svc_pc                          = #{svcPc}											//서비스 가격
							, svc_pc_vat                      = #{svcPcVat}										//서비스 가격 VAT포함여부
							, svc_pc_unt_cd                   = #{svcPcUntCd}									//서비스 가격 통화단위 코드
							, mumm_cntrctpd                   = #{mummCntrctpd}								//최소 계약기간
							, pc_table_atch_at                = #{pcTableAtchAt}							//가격테이블 첨부 여부
							, vat_incls_at                    = #{vatInclsAt}									//VAT포함여부
							, svc_begin_procss                = #{svcBeginProcss}							//서비스 시작 절차
							, svc_end_procss                  = #{svcEndProcss}								//서비스 종료 절차
							, at_svc_evl                      = #{atSvcEvl}										//서비스 평가판 제공여부
							, svc_evl_suply_pd                = #{svcEvlSuplyPd}							//서비스 평가판 제공 기간
							, svc_charger_nm                  = #{svcChargerNm}								//서비스 담당자 이름
							, svc_charger_telno               = #{svcChargerTelno}						//서비스 담당자 전화번호
							, svc_charger_email               = #{svcChargerEmail}						//서비스 담당자 이메일
							, gnrlz_sopmal_regist_at          = #{gnrlzSopmalRegistAt}				//나라장터종합쇼핑몰 등록 여부
							, private_cloud_at                = #{privateCloudAt}							//Private cloud 구축 여부
							, public_cloud_at                 = #{publicCloudAt}							//Public cloud 구축 여부
							, hybrid_cloud_at                 = #{hybridCloudAt}							//Hybrid cloud 구축 여부
							, kisa_crtfc_at                   = #{kisaCrtfcAt}								//클라우드 보안 인증(KISA) 여부
							, cloud_svc_qlity_crtfc_at        = #{cloudSvcQlityCrtfcAt}				//클라우드 서비스 품질 인증 여부
							, cloud_svc_cnfirm_at             = #{cloudSvcCnfirmAt}						//클라우드 서비스 확인제 여부
							, cc_crtfc_at                     = #{ccCrtfcAt}									//CC 인증 여부
							, gs_crtfc_at                     = #{gsCrtfcAt}									//GS 인증 여부
							, sla_applc_at                    = #{slaApplcAt}									//SLA 적용 여부
							, svc_useful                      = #{svcUseful}									//서비스 가용성
							, atmc_estn_sport_at              = #{atmcEstnSportAt}						//자동 확장 지원 여부
							, clustering_sport_at             = #{clusteringSportAt}					//클러스터링 지원 여부
							, sfsrv_provisioning_sport_at     = #{sfsrvProvisioningSportAt}		//셀프서비스 프로비저닝 지원 여부
							, svc_provisioning_time           = #{svcProvisioningTime}				//서비스 프로비저닝 시간
							, svc_provisioning_relis_time     = #{svcProvisioningRelisTime}		//서비스 프로비저닝 해제 시간
							, data_cnter_hbrd_lc_info         = #{dataCnterHbrdLcInfo}				//데이터센터 국내, 외 위치 정보
							, data_cnter_lc_info              = #{dataCnterLcInfo}						//데이터센터 국내, 외 위치 정보
							, dsstrrecovry_plan               = #{dsstrrecovryPlan}						//재해복구계획
							, data_extrc_procss               = #{dataExtrcProcss}						//데이터 추출 절차
							, unuse_data_prtc_policy          = #{unuseDataPrtcPolicy}				//미사용 데이터 보호 정책
							, safe_data_delete_policy         = #{safeDataDeletePolicy}				//안전한 데이터 삭제 정책
							, svc_manage_sttus_info_suply     = #{svcManageSttusInfoSuply}		//서비스 관리 및 현황 정보 제공
							, svc_use_log_suply_at            = #{svcUseLogSuplyAt}						//서비스 이용 로그 제공 여부
							, trobl_manage_reprt_policy       = #{troblManageReprtPolicy}			//장애관리 및 보고 정책
							, api_sport_at                    = #{apiSportAt}									//API 지원 여부
							, api_sport_ty                    = #{apiSportTy}									//API 지원 타입
							, user_mnl_suply_at               = #{userMnlSuplyAt}							//사용자 매뉴얼 제공 여부
							, user_mnl_info_at                = #{userMnlInfoAt}							//사용자 매뉴얼 정보 유무
							, user_mnl_info_input             = #{userMnlInfoInput}						//사용자 매뉴얼 정보 입력
							, user_edc_sport_at               = #{userEdcSportAt}							//사용자 교육 지원 여부
							, user_edc_sport_input            = #{userEdcSportInput}					//사용자 교육 지원 입력
							, user_edc_info                   = #{userEdcInfo}								//사용자 교육 정보
							, visit_edc_sport_at              = #{visitEdcSportAt}						//방문 교육 지원 여부
							, visit_tchnlgy_sport_at          = #{visitTchnlgySportAt}				//방문 기술 지원 여부
							, visit_else_tchnlgy_sport_at     = #{visitElseTchnlgySportAt}		//방문 외(온라인, 이메일, 전화 등) 기술 지원 여부
							, cstmr_cnter_oper_at             = #{cstmrCnterOperAt}						//고객센터 운영 여부
							, cstmr_cnter_oper_time           = #{cstmrCnterOperTime}					//고객센터 운영 시간
							, i_othbc_std_sport_doc           = #{iOthbcStdSportDoc}					//공개표준 지원 및 문서
							, i_svc_direct_cnnc_ntwrk         = #{iSvcDirectCnncNtwrk}				//서비스에 직접 연결하는 네트워크
							, i_virtl_ntwrk_sport             = #{iVirtlNtwrkSport}						//가상 네트워크 지원
							, i_synchrn_sport_at              = #{iSynchrnSportAt}						//동기화 지원 여부
							, i_sport_eqpmn_list              = #{iSportEqpmnList}						//지원 장비 목록
							, i_server_computer_svc           = #{iServerComputerSvc}					//서버/컴퓨터 서비스
							, i_strge_svc                     = #{iStrgeSvc}									//스토리지 서비스
							, i_ntwrk_svc                     = #{iNtwrkSvc}									//네트워크 서비스
							, i_scrty_svc                     = #{iScrtySvc}									//보안 서비스
							, i_manage_svc                    = #{iManageSvc}									//관리 서비스
							, i_etc_svc                       = #{iEtcSvc}										//기타 서비스
							, p_secure_devlop                 = #{pSecureDevlop}							//Secure 개발
							, p_secure_dct_wdtb               = #{pSecureDctWdtb}							//Secure design, coding, testing 및 배포
							, p_sport_lang                    = #{pSportLang}									//지원 언어
							, p_sport_pltfom                  = #{pSportPltfom}								//지원 플랫폼
							, p_sport_container_ver           = #{pSportContainerVer}					//지원 Container 및 버전
							, p_sport_data_storge             = #{pSportDataStorge}						//지원 데이터 저장소
							, p_sub_tenancy_sport_at          = #{pSubTenancySportAt}					//Sub-tenancy 지원 여부
							, p_dvlpr_unt_info                = #{pDvlprUntInfo}							//개발자 도구 정보
							, p_sdk_api_suply_at              = #{pSdkApiSuplyAt}							//SDK/API 제공 여부
							, p_test_debuging_sport_at        = #{pTestDebugingSportAt}				//테스트 및 디버깅 지원 여부
							, p_addon_svc_markplace_sport_at  = #{pAddonSvcMarkplaceSportAt}	//Add-on 서비스 및 마켓플레이스 지원 여부
							, p_cisport_sport                 = #{pCisportSport}							//CISPORT(Continuous Integration) 지원
							, p_loging_mntrng_sport           = #{pLogingMntrngSport}					//로깅/모니터링 지원
							, p_load_balancing_sport          = #{pLoadBalancingSport}				//Load Balancing 지원
							, s_user_svc_suply_mthd           = #{sUserSvcSuplyMthd}					//사용자용 서비스 제공 방식
							, s_manage_svc_suply_mthd         = #{sManageSvcSuplyMthd}				//관리용 서비스 제공 방식
							, s_infrstrctr_suply_mthd         = #{sInfrstrctrSuplyMthd}				//인프라 제공 방식
							, s_scrty_policy                  = #{sScrtyPolicy}								//보안 정책
							, s_data_encpt_at_mthd            = #{sDataEncptAtMthd}						//데이터 암호화 여부 및 방식
							, s_backup_recovry_policy         = #{sBackupRecovryPolicy}				//백업 및 복구 정책
							, s_user_crtfc_scrty_prtc_policy  = #{sUserCrtfcScrtyPrtcPolicy}	//사용자 인증 및 보안 보호 정책
							, s_multi_pltfom_sport_at         = #{sMultiPltfomSportAt}				//다중 플랫폼 지원 여부
							, s_sport_opersysm_list           = #{sSportOpersysmList}					//지원 운영체계 목록 
							, s_sport_wbsr_list               = #{sSportWbsrList}							//지원 웹브라우저 목록
							, s_sport_mobile_pltfom_list      = #{sSportMobilePltfomList}			//지원 모바일 플랫폼 목록
							, s_open_std_sport_at             = #{sOpenStdSportAt}						//개방형 표준 지원 여부
							, s_gvrn_frmwrk_sport_at          = #{sGvrnFrmwrkSportAt}					//정부 프레임워크 지원 여부
							, s_open_sourc_sw_at              = #{sOpenSourcSwAt}							//오픈소스 SW 호환 여부
							, s_paasta_at                     = #{sPaastaAt}									//PaaS-Ta 호환 여부
							, s_sourc_othbc_at                = #{sSourcOthbcAt}							//소스 공개 여부
							, s_api_access_sport_at           = #{sApiAccessSportAt}					//외부 API ACCESS 지원 여부
							, s_db_migration_sport_at         = #{sDbMigrationSportAt}				//DB 마이그레이션 지원 여부
							, s_extrl_application_sport_at    = #{sExtrlApplicationSportAt}		//외부 응용프로그램 통합 지원 여부
							, s_sub_tenancy_sport_at          = #{sSubTenancySportAt}					//Sub-tenancy 지원 여부
							, s_cstmzng_posbl_at              = #{sCstmzngPosblAt}						//커스터마이징 가능 여부
							, s_devlop_sport_etc              = #{sDevlopSportEtc}						//개발지원 조건 및 기타 사항
							, c_spclty_realm                  = #{cSpcltyRealm}								//전문 분야
							, c_indc_whole                    = #{cIndcWhole}									//도입전반
							, c_setup_mgr                     = #{cSetupMgr}									//setup N migration
							, c_hold_qualf                    = #{cHoldQualf}									//보유자격
							, c_hold_tchnlgy                  = #{cHoldTchnlgy}								//보유기술
							, c_infrstrctr                    = #{cInfrstrctr}								//컨설팅가능 인프라
							, c_infrstrctr_etc                = #{cInfrstrctrEtc}							//컨설팅가능 인프라 기타
							, c_pltfom                        = #{cPltfom}										//컨설팅가는 플랫폼
							, c_pltfom_etc                    = #{cPltfomEtc}									//컨설팅가는 플랫폼 기타
							, c_prjct_exprnc                  = #{cPrjctExprnc}								//프로젝트 경험
							, c_cnsl_relm                     = #{cCnslRelm}									//컨설팅 영역
							, c_cnsl_relm_etc                 = #{cCnslRelmEtc}								//컨설팅 영역 기타
							, c_cnsl_scope                    = #{cCnslScope}									//컨설팅 범위
							, c_detail_svc                    = #{cDetailSvc}									//컨설팅 가능 상세 서비스
							, c_exc_pd                        = #{cExcPd}											//수행기간
							, c_exc_pd_etc                    = #{cExcPdEtc}									//수행기간 기타
							, c_exc_area                      = #{cExcArea}										//수행가능지역
							, c_beffat_cnsl_at                = #{cBeffatCnslAt}							//사전컨설팅 가능 여부
							, c_cnsl_pc                       = #{cCnslPc}										//컨설팅 가격
							, entr_date                       = SYS_DATETIME									//생성일시
							, user_id                         = #{userId}											//로그인아이디
							, save_step                       = '41'													//저장단계(11:1단계 /10: 1단계임시저장 /21:2단계 /20: 2단계임시저장 /31:3단계 /30: 3단계임시저장 /41:4단계/40: 4단계임시저장)
							, goods_entr_date                 = SYS_DATETIME									//등록일
							, goods_use                       = 'Y'														//사용여부
							, svc_charger_cttpc               = #{svcChargerCttpc}						//국가번호
							, svc_charger_mbtl_num            = #{svcChargerMbtlNum}					//서비스 담당자 휴대폰
				 WHERE  goods_code = #{goodsCode}
				   AND  goods_num  = #{goodsNum}
		</update>


    <select id="suplyCnt" parameterType="map" resultType="int">
    	/*_goodsManage.suplyCnt*/
   		SELECT SUM(CNT) AS supplyCnt
		  FROM (SELECT COUNT(C.GOODS_CODE)	 CNT 
			      FROM TCN_DVYFG_INFO_L A 
			     INNER JOIN TCN_PPS_GOOD_INFO_L B ON A.DELIVERY_NUM||A.DELIVERY_ORDER||A.ITEM_NUM = B.CNTR_NUM||LINE_NUM
				 INNER JOIN TST_GOOD_INFO_I C ON B.GOODS_CODE = C.GOODS_CODE
			     WHERE C.GOODS_CODE =#{goodsCode}
				 UNION ALL	
			     SELECT COUNT(B.GOODS_CODE)	CNT
			       FROM TCM_CNTRCT_MANAGE_I A,
			       TCM_CNTRCT_SERVICE_I B
			      WHERE B.GOODS_CODE = #{goodsCode}
			        AND A.DELETE_AT !='N'
			        AND A.ASIS = 'N'
			        AND A.cntrct_sn = B.cntrct_sn			        
		       )
    </select>

    <select id="listCtgryNm" parameterType="map" resultType="String">
		/*_goodsManage.listCtgryNm*/
    	SELECT  D.lang_ctgry_nm 
        FROM  TST_GOOD_CATE_I C
            , TST_CATE_MGMT_M D
       WHERE  C.CTGRY_CODE = D.CTGRY_CODE
         AND  D.LANG_CODE =  #{langCode}
         AND  C.goods_code = #{goodsCode}
    </select>

</mapper>